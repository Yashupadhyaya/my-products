# ********RoostGPT********

# Test generated by RoostGPT for test test-circleci using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /me_get for http method type GET 
# RoostTestHash=4f4e94f0a0
# 
# 

# ********RoostGPT********
Feature: User Information Endpoint
  Provides information about the user that is currently signed in.

  Background:
    * def baseURL = karate.properties['CIRCLECI_API_BASE_URL'] || karate.properties['API_HOST']
    * url baseURL
    * configure report = false

  Scenario: Retrieve user information using Basic Authentication
    * def username = karate.properties['AUTH_USERNAME']
    * def password = karate.properties['AUTH_PASSWORD']
    * def credentials = username + ':' + password
    * def encoded = Java.type('java.util.Base64').getEncoder().encodeToString(credentials.getBytes())
    * def authHeader = 'Basic ' + encoded
    * configure headers = { Authorization: '#(authHeader)', Accept: 'application/json' }
    Given path '/me'
    When method GET
    Then status 200
    And match response == { id: '#uuid', login: '#string', name: '#string' }
    And match response.id == '##string'
    And match response.login == '##string'
    And match response.name == '##string'

  Scenario: Retrieve user information using API Key Authorization
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { Circle-Token: '#(authToken)', Accept: 'application/json' }
    Given path '/me'
    When method GET
    Then status 200
    And match response == { id: '#uuid', login: '#string', name: '#string' }
    And match response.id == '##string'
    And match response.login == '##string'
    And match response.name == '##string'

  Scenario Outline: Retrieve user information with deprecated API Key as query parameter
    * def authToken = karate.properties['circle-token']
    Given path '/me'
    And param circle-token = authToken
    When method GET
    Then status 200
    And match response == { id: '#uuid', login: '#string', name: '#string' }
    And match response.id == '##string'
    And match response.login == '##string'
    And match response.name == '##string'

  Scenario Outline: Error response handling with Basic Authentication
    * def username = karate.properties['AUTH_USERNAME']
    * def password = karate.properties['AUTH_PASSWORD']
    * def credentials = username + ':' + password
    * def encoded = Java.type('java.util.Base64').getEncoder().encodeToString(credentials.getBytes())
    * def authHeader = 'Basic ' + encoded
    * configure headers = { Authorization: '#(authHeader)', Accept: 'application/json' }
    Given path '/me'
    When method GET
    Then assert responseStatus > 299
    And match response == { message: '#string' }
    And match response.message == '##string'

  Scenario Outline: Error response handling with API Key Authorization
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { Circle-Token: '#(authToken)', Accept: 'application/json' }
    Given path '/me'
    When method GET
    Then assert responseStatus > 299
    And match response == { message: '#string' }
    And match response.message == '##string'

  Scenario Outline: Error response handling with deprecated API Key as query parameter
    * def authToken = karate.properties['circle-token']
    Given path '/me'
    And param circle-token = authToken
    When method GET
    Then assert responseStatus > 299
    And match response == { message: '#string' }
    And match response.message == '##string'
