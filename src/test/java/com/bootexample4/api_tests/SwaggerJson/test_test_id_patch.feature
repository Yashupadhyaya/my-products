# ********RoostGPT********

# Test generated by RoostGPT for test test-roostapispec-1 using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# Feature file generated for /test/{test_id}_patch for http method type PATCH 
# RoostTestHash=d7c0e01b63
# 
# 

# ********RoostGPT********
Feature: Edit Test API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + authToken

  Scenario Outline: Edit a test with valid input
    Given path '/test/<test_id>'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "<selected_model>",
          "vertex_model": {
            "title": "Vertex Model",
            "key": "vertex_model_key"
          },
          "open_source_model_info": {
            "ip": "192.168.1.1",
            "model_name": "open_source_model"
          },
          "claude_model": {
            "title": "Claude Model",
            "key": "claude_model_key"
          },
          "star_chat_info": {
            "ip": "192.168.1.2",
            "model_name": "star_chat_model"
          },
          "llama_model_info": {
            "ip": "192.168.1.3",
            "model_name": "llama_model"
          },
          "dbrx_info": {
            "dbrx_model_name": "dbrx_model"
          },
          "azure_model_info": {
            "azure_openai_key": "azure_key",
            "azure_deployment_name": "azure_deployment",
            "azure_endpoint": "https://azure-endpoint.com"
          }
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/path/to/repo",
          "host_type": {},
          "source": {
            "access_token": "source_token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "repo_key",
              "title": "Repo Title",
              "id": "repo_id",
              "owner": "repo_owner",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "target_token",
            "selected_branch": "develop",
            "selected_repo": {
              "key": "target_repo_key",
              "title": "Target Repo Title",
              "id": "target_repo_id",
              "owner": "target_repo_owner",
              "default_branch": "main"
            }
          },
          "max_depth": 5
        },
        "integration_info": {
          "type": "<integration_type>"
        },
        "additional_info": {
          "language": "java",
          "iterations": "3",
          "test_type": "<test_type>",
          "log_type": "file",
          "log_file": {
            "file_name": "log.txt",
            "file_path": "/logs/",
            "file_content": "Log content"
          },
          "dependency_versions": {
            "java_version": {
              "title": "Java 11",
              "key": "11"
            }
          },
          "apiSpec": {
            "type": "openapi",
            "sourceType": "url",
            "url": ["https://api-spec.com"],
            "gitpath": ["/path/to/spec"],
            "fileContent": []
          },
          "behaviouralTest": {
            "type": "cucumber",
            "sourceType": "git",
            "url": [],
            "gitpath": ["/path/to/behavioural/test"],
            "fileContent": []
          },
          "env_config": [
            {
              "key": "ENV_VAR",
              "value": "env_value",
              "type": "string",
              "secret": false
            }
          ]
        },
        "test_timeout": 3600,
        "trigger_events": ["push", "pull_request"],
        "test_framework": "junit",
        "git_type": "github",
        "source_branch": "feature/new-feature",
        "git_ops": true
      }
      """
    When method PUT
    Then status 200
    And match response == {}

    Examples:
      | read('test_test_id_patch.csv') |

  Scenario: Edit a test with invalid test_id
    Given path '/test/invalid_id'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "openai",
          "vertex_model": {
            "title": "Vertex Model",
            "key": "vertex_model_key"
          },
          "open_source_model_info": {
            "ip": "192.168.1.1",
            "model_name": "open_source_model"
          },
          "claude_model": {
            "title": "Claude Model",
            "key": "claude_model_key"
          },
          "star_chat_info": {
            "ip": "192.168.1.2",
            "model_name": "star_chat_model"
          },
          "llama_model_info": {
            "ip": "192.168.1.3",
            "model_name": "llama_model"
          },
          "dbrx_info": {
            "dbrx_model_name": "dbrx_model"
          },
          "azure_model_info": {
            "azure_openai_key": "azure_key",
            "azure_deployment_name": "azure_deployment",
            "azure_endpoint": "https://azure-endpoint.com"
          }
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/path/to/repo",
          "host_type": {},
          "source": {
            "access_token": "source_token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "repo_key",
              "title": "Repo Title",
              "id": "repo_id",
              "owner": "repo_owner",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "target_token",
            "selected_branch": "develop",
            "selected_repo": {
              "key": "target_repo_key",
              "title": "Target Repo Title",
              "id": "target_repo_id",
              "owner": "target_repo_owner",
              "default_branch": "main"
            }
          },
          "max_depth": 5
        },
        "integration_info": {
          "type": "jira"
        },
        "additional_info": {
          "language": "java",
          "iterations": "3",
          "test_type": "unit",
          "log_type": "file",
          "log_file": {
            "file_name": "log.txt",
            "file_path": "/logs/",
            "file_content": "Log content"
          },
          "dependency_versions": {
            "java_version": {
              "title": "Java 11",
              "key": "11"
            }
          },
          "apiSpec": {
            "type": "openapi",
            "sourceType": "url",
            "url": ["https://api-spec.com"],
            "gitpath": ["/path/to/spec"],
            "fileContent": []
          },
          "behaviouralTest": {
            "type": "cucumber",
            "sourceType": "git",
            "url": [],
            "gitpath": ["/path/to/behavioural/test"],
            "fileContent": []
          },
          "env_config": [
            {
              "key": "ENV_VAR",
              "value": "env_value",
              "type": "string",
              "secret": false
            }
          ]
        },
        "test_timeout": 3600,
        "trigger_events": ["push", "pull_request"],
        "test_framework": "junit",
        "git_type": "github",
        "source_branch": "feature/new-feature",
        "git_ops": true
      }
      """
    When method PUT
    Then status 404
    And match response contains { code: 404, message: 'Not found' }
    And match response.path == '/test/invalid_id'
    And match response.method == 'PUT'
