# ********RoostGPT********

# Test generated by RoostGPT for test test-roostapispec-1 using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# Feature file generated for /test_post for http method type POST 
# RoostTestHash=99bb15b7c8
# 
# 

# ********RoostGPT********
Feature: Test API endpoints

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * header Authorization = 'Bearer ' + karate.properties['AUTH_TOKEN']

  Scenario: Create a Test App
    Given path '/test'
    And request
      """
      {
        "app_id": "test123",
        "test_name": "Test App",
        "git_type": "github",
        "ai_model_info": {
          "selected_model": "openai",
          "vertex_model": {},
          "open_source_model_info": {},
          "claude_model": {},
          "star_chat_info": {},
          "llama_model_info": {},
          "dbrx_info": {},
          "azure_model_info": {}
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/",
          "host_type": {},
          "source": {
            "access_token": "token123",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "repo1",
              "title": "Test Repo",
              "id": "123",
              "owner": "testuser",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "token456", 
            "selected_branch": "main",
            "selected_repo": {
              "key": "repo2",
              "title": "Target Repo",
              "id": "456",
              "owner": "testuser",
              "default_branch": "main"  
            }
          },
          "max_depth": 5
        },
        "integration_info": {
          "type": "none"  
        },
        "additional_info": {
          "language": "java",
          "iterations": "1",
          "test_type": "unit",
          "log_type": "console",
          "log_file": {},
          "dependency_versions": {},
          "apiSpec": {
            "type": "openapi",
            "sourceType": "file",
            "url": [],
            "gitpath": [],
            "fileContent": []
          },
          "behaviouralTest": {
            "type": "openapi", 
            "sourceType": "file",
            "url": [],
            "gitpath": [],
            "fileContent": []
          },
          "env_config": []
        },
        "test_timeout": 3600
      }
      """
    When method POST
    Then status 201
    And match response contains { id: '#string' }

  Scenario: Get all tests
    Given path '/test'
    And param get_for_all = 'true'
    And param searchTerm = 'test'
    And param take = '10'
    And param skip = '0'
    When method GET
    Then status 200

  Scenario: Get one test
    Given path '/test/test123'
    When method GET
    Then status 200

  Scenario: Update a test
    Given path '/test/test123'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "openai",
          "vertex_model": {},
          "open_source_model_info": {},
          "claude_model": {},
          "star_chat_info": {},
          "llama_model_info": {},
          "dbrx_info": {},
          "azure_model_info": {}
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/",
          "host_type": {},
          "source": {
            "access_token": "newtoken123",
            "selected_branch": "dev",
            "repository_type": {},
            "selected_repo": {
              "key": "repo1",
              "title": "Updated Repo",
              "id": "123",
              "owner": "testuser",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "newtoken456",
            "selected_branch": "main", 
            "selected_repo": {
              "key": "repo2",
              "title": "Updated Target Repo",
              "id": "456",
              "owner": "testuser",
              "default_branch": "main"
            }
          },
          "max_depth": 10
        },
        "integration_info": {
          "type": "none"
        },
        "additional_info": {
          "language": "java",
          "iterations": "2",
          "test_type": "unit",
          "log_type": "console",
          "log_file": {},
          "dependency_versions": {},
          "apiSpec": {
            "type": "openapi",
            "sourceType": "file", 
            "url": [],
            "gitpath": [],
            "fileContent": []
          },
          "behaviouralTest": {
            "type": "openapi",
            "sourceType": "file",
            "url": [],
            "gitpath": [],
            "fileContent": []  
          },
          "env_config": []
        },
        "test_timeout": 7200,
        "trigger_events": ["push"],
        "test_framework": "junit",
        "git_type": "github",
        "source_repo": "testuser/repo1",
        "source_branch": "dev",
        "git_ops": true
      }
      """
    When method PATCH
    Then status 200

  Scenario: Delete a test
    Given path '/test/test123'
    When method DELETE
    Then status 200

  Scenario: Trigger a test
    Given path '/test/test123/trigger'
    When method POST
    Then status 201

  Scenario: Get test events
    Given path '/test/event'
    And param take = '10'
    And param skip = '0'
    When method GET
    Then status 200

  Scenario: Get one test event
    Given path '/test/event/event123'
    When method GET
    Then status 200

  Scenario: Update test event
    Given path '/test/event/event123'
    And request
      """
      {
        "status": "completed",
        "status_details": "Test completed successfully",
        "completion_time": "2023-08-08T12:00:00Z",
        "modification_time": "2023-08-08T12:00:00Z",
        "test_endpoints": "http://test.com/api",
        "test_report": "Test passed"
      }
      """
    When method PATCH
    Then status 200

  Scenario: Retrigger test event
    Given path '/test/event/event123/retrigger'
    And request
      """
      {
        "improve_test": true,
        "file_path": ["/src/test/Test.java"],
        "user_content": "Please improve the test",
        "testscript_endpoint": "http://test.com/script",
        "git_pr_url": "http://github.com/pr/123"
      }
      """
    When method POST
    Then status 201

  Scenario: Abort test event
    Given path '/test/event/event123/abort'
    When method POST
    Then status 201

  Scenario: Get test event logs
    Given path '/test/event/event123/logs'
    When method GET
    Then status 200

  Scenario: Execute test
    Given path '/test/event/event123/execute'
    And request
      """
      {
        "target_url": "http://test.com",
        "file_path": ["/src/test/Test.java"]
      }
      """
    When method POST
    Then status 201

  Scenario: Get test execution report
    Given path '/test/event/event123/execute/report'
    And param file_choice = 'junit'
    And param file_path = '/reports/test-report.xml'
    When method GET
    Then status 200

  Scenario: Get test execution file status
    Given path '/test/event/event123/execute/status'
    And param file_path = '/reports/test-report.xml'
    When method GET
    Then status 200

  Scenario: Abort test execution
    Given path '/test/event/event123/execute/abort'
    When method POST
    Then status 201
