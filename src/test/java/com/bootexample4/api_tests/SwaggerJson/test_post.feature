# ********RoostGPT********

# Test generated by RoostGPT for test test-roostapispec-1 using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# Feature file generated for /test_post for http method type POST 
# RoostTestHash=99bb15b7c8
# 
# 

# ********RoostGPT********
Feature: Test App Creation

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + authToken

  Scenario: Create a Test App successfully
    Given path '/test'
    And request
      """
      {
        "app_id": "test-app-001",
        "test_name": "Sample Test App",
        "git_type": "github",
        "ai_model_info": {
          "selected_model": "openai",
          "vertex_model": {},
          "open_source_model_info": {},
          "claude_model": {},
          "star_chat_info": {},
          "llama_model_info": {},
          "dbrx_info": {
            "dbrx_model_name": "sample-model"
          },
          "azure_model_info": {}
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/path/to/repo",
          "host_type": {},
          "source": {
            "access_token": "sample-token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "repo-key",
              "title": "Sample Repo",
              "id": "repo-id",
              "owner": "sample-owner",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "sample-token",
            "selected_branch": "main",
            "selected_repo": {
              "key": "repo-key",
              "title": "Sample Repo",
              "id": "repo-id",
              "owner": "sample-owner",
              "default_branch": "main"
            }
          },
          "max_depth": 5
        },
        "integration_info": {
          "type": "none"
        },
        "additional_info": {
          "language": "java",
          "iterations": "3",
          "test_type": "unit",
          "log_type": "file",
          "log_file": {
            "file_name": "test.log",
            "file_path": "/path/to/log",
            "file_content": ""
          },
          "dependency_versions": {
            "java_version": {
              "title": "Java 11",
              "key": "11"
            }
          },
          "apiSpec": {
            "type": "openapi",
            "sourceType": "url",
            "url": ["https://example.com/api-spec"],
            "gitpath": [],
            "fileContent": []
          },
          "behaviouralTest": {
            "type": "cucumber",
            "sourceType": "git",
            "url": [],
            "gitpath": ["/path/to/behavioural/tests"],
            "fileContent": []
          },
          "env_config": [
            {
              "key": "ENV_VAR",
              "value": "test_value",
              "type": "string",
              "secret": false
            }
          ]
        },
        "test_timeout": 3600,
        "test_framework": "junit"
      }
      """
    When method POST
    Then status 201
    And match response contains { id: '#string' }
    And match response.user_id == '#string'
    And match response.thirdparty_app_id == '#string'
    And match response.test_name == 'Sample Test App'
    And match response.git_type == 'github'
    And match response.created_on == '#string'
    And match response.updated_on == '#string'
    And match response.deleted == '#number'
    And match response.test_timeout == 3600
    And match response.test_framework == 'junit'

  Scenario: Attempt to create a Test App with missing required fields
    Given path '/test'
    And request
      """
      {
        "test_name": "Incomplete Test App"
      }
      """
    When method POST
    Then status 400
    And match response.code == 400
    And match response.message == '#string'
    And match response.timestamp == '#string'
    And match response.path == '/test'
    And match response.method == 'POST'

  Scenario Outline: Create Test Apps with different Git types
    Given path '/test'
    And request
      """
      {
        "app_id": "test-app-<gitType>",
        "test_name": "<gitType> Test App",
        "git_type": "<gitType>",
        "ai_model_info": {
          "selected_model": "openai",
          "vertex_model": {},
          "open_source_model_info": {},
          "claude_model": {},
          "star_chat_info": {},
          "llama_model_info": {},
          "dbrx_info": {
            "dbrx_model_name": "sample-model"
          },
          "azure_model_info": {}
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/path/to/repo",
          "host_type": {},
          "source": {
            "access_token": "sample-token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "repo-key",
              "title": "Sample Repo",
              "id": "repo-id",
              "owner": "sample-owner",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "sample-token",
            "selected_branch": "main",
            "selected_repo": {
              "key": "repo-key",
              "title": "Sample Repo",
              "id": "repo-id",
              "owner": "sample-owner",
              "default_branch": "main"
            }
          },
          "max_depth": 5
        },
        "integration_info": {
          "type": "none"
        },
        "additional_info": {
          "language": "java",
          "iterations": "3",
          "test_type": "unit",
          "log_type": "file",
          "log_file": {
            "file_name": "test.log",
            "file_path": "/path/to/log",
            "file_content": ""
          },
          "dependency_versions": {
            "java_version": {
              "title": "Java 11",
              "key": "11"
            }
          },
          "apiSpec": {
            "type": "openapi",
            "sourceType": "url",
            "url": ["https://example.com/api-spec"],
            "gitpath": [],
            "fileContent": []
          },
          "behaviouralTest": {
            "type": "cucumber",
            "sourceType": "git",
            "url": [],
            "gitpath": ["/path/to/behavioural/tests"],
            "fileContent": []
          },
          "env_config": [
            {
              "key": "ENV_VAR",
              "value": "test_value",
              "type": "string",
              "secret": false
            }
          ]
        },
        "test_timeout": 3600,
        "test_framework": "junit"
      }
      """
    When method POST
    Then status 201
    And match response.git_type == '<gitType>'

    Examples:
      | read('test_post.csv') |
