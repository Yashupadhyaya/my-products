# ********RoostGPT********

# Test generated by RoostGPT for test test-roostapispec-1 using AI Type  and AI Model 
# 
# Feature file generated for /test_get for http method type GET 
# RoostTestHash=c82b34f0b0
# 
# 

# ********RoostGPT********
Feature: Test RoostGPT API Endpoint

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario Outline: Get all tests with different parameters
    Given path '/test'
    And param get_for_all = '<get_for_all>'
    And param searchTerm = '<searchTerm>'
    And param take = '<take>'
    And param skip = '<skip>'
    And param label_filter = <label_filter>
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 200

    Examples:
      | read('test_get.csv') |

  Scenario: Get all tests with invalid parameters
    Given path '/test'
    And param get_for_all = 'invalid'
    And param searchTerm = 'ab'
    And param take = 'invalid'
    And param skip = 'invalid'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 400

  Scenario: Get all tests without required parameters
    Given path '/test'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 400

  Scenario: Get all tests with invalid authentication
    Given path '/test'
    And param get_for_all = 'true'
    And param searchTerm = 'abc'
    And param take = '10'
    And param skip = '0'
    And header Authorization = 'Bearer invalidToken'
    When method GET
    Then status 401

  Scenario: Get all tests with valid parameters and check default error response
    Given path '/test'
    And param get_for_all = 'true'
    And param searchTerm = 'abc'
    And param take = '10'
    And param skip = '0'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 404
    And match response contains
      """
      {
        code: 404,
        timestamp: '#string',
        path: '/application/client/git/eaas/trigger',
        method: '#enum',
        message: 'Not found'
      }
      """
    And match response.method == '#? _ == "GET" || _ == "DELETE" || _ == "HEAD" || _ == "OPTIONS" || _ == "POST" || _ == "PUT" || _ == "PATCH" || _ == "PURGE" || _ == "LINK" || _ == "UNLINK"'
