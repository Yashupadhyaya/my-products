# ********RoostGPT********

# Test generated by RoostGPT for test testingartillerytest using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=977dd819cb
# 
# 

# ********RoostGPT********
Here is the corrected and improved version of the Gherkin feature file based on the provided audit instructions:

```gherkin
Feature: Nobel Prizes API Tests
  This feature file contains tests for the Nobel Prizes API at endpoint /2.1/nobelPrizes. It verifies various request parameters, response bodies, and status codes as per API specification.

  Background:
    * def urlBase = karate.properties['URL_BASE']
    * url urlBase

  Scenario Outline: Get Nobel Prizes with valid query parameters
    Given path '2.1/nobelPrizes'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = <nobelPrizeCategory>
    And param format = <format>
    And param csvLang = <csvLang>
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[]'
    And match response.meta.offset == '#number'
    And match response.meta.limit == '#number'
    And match response.meta.nobelPrizeYear == '#number'
    And match response.meta.count == '#number'
    And match response.links.self == '#string'
    And match response.links.first == '#string'
    And match response.links.next == '#string'
    And match response.links.last == '#string'

    Examples:
      | offset | limit | sort  | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
      | 1      | 10    | asc   | 1901           | 1905   | physics            | json   | en      |
      | 5      | 20    | desc  | 2000           | 2010   | chemistry          | csv    | fr      |

  Scenario: Get Nobel Prizes without query parameters
    Given path '2.1/nobelPrizes'
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[]'
    And match response.meta.offset == '#number'
    And match response.meta.limit == '#number'
    And match response.meta.nobelPrizeYear == '#null'
    And match response.meta.count == '#number'
    And match response.links.self == '#string'

  Scenario: Invalid query parameters
    Given path '2.1/nobelPrizes'
    And param offset = -1
    And param limit = -10
    And param nobelPrizeYear = 1899
    When method GET
    Then status 400
    And match response.code == '400'
    And match response.message contains 'request could not be understood'

  Scenario: Not Found
    Given path '2.1/nobelPrizes'
    And param nobelPrizeCategory = 'unknown'
    When method GET
    Then status 404
    And match response.code == '404'
    And match response.message contains 'requested resource could not be found'

  Scenario: Unprocessable Entity
    Given path '2.1/nobelPrizes'
    And param yearTo = 1890
    When method GET
    Then status 422
    And match response.code == '422'
    And match response.message contains 'semantic errors'

  Scenario: Valid response assertion for Nobel Prizes
    Given path '2.1/nobelPrizes'
    And param nobelPrizeYear = 1989
    And param nobelPrizeCategory = 'physics'
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[]'
    And match response.nobelPrizes[*].awardYear == '#number'
    And match response.nobelPrizes[*].category.en == '#string'
    And match response.nobelPrizes[*].category.se == '#string'
    And match response.nobelPrizes[*].dateAwarded == '#string'
    And match response.nobelPrizes[*].prizeAmount == '#number'
    And match response.nobelPrizes[*].prizeAmountAdjusted == '#number'
    """response.nobelPrizes[*].laureates[
    *].id == ‘’numbers`
)))
}`===