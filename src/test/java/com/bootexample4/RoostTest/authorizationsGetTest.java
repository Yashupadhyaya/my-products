// Test generated by RoostGPT for test testing-rest-assured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /authorizations_get for http method type GET in rest-assured framework

// RoostTestHash=3b64f22044

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.assertThat;

public class AuthorizationsGetTest {

  @BeforeClass
  public static void setup() {
      RestAssured.baseURI = System.getenv("BASE_URL");
  }

  @Test  
  public void authorizationsGetTest() throws IOException {
      String csvFilePath = "src/test/java/com/bootexample4/RoostTest/authorizations_get.csv";
      BufferedReader reader = new BufferedReader(new FileReader(csvFilePath));
      
      // Skipping the header as it is not used in the actual test
      reader.readLine(); 
      
      String line;
      while ((line = reader.readLine()) != null) {
          Response response = given()
                                .contentType(ContentType.JSON)
                                .when()
                                .get("/authorizations")
                                .then()
                                .extract().response();

          switch(response.statusCode()) {
              case 200:
                  validate200Response(response);
                  break;
              case 400:
                  validateErrorResponse(response);
                  break;
              case 401:
                  validateAuthenticationResponse(response);
                  break;
              default:
                  fail("Unexpected status code: " + response.statusCode());
          }
      }
  }

  private void validate200Response(Response response) {
      assertThat(response.header("api-version"), notNullValue());
      assertThat(response.path("total"), instanceOf(Integer.class));
      response.jsonPath().getList("authorizations").forEach(authorization -> {
          assertThat(authorization, instanceOf(Map.class));
          Map<String, Object> authMap = (Map<String, Object>) authorization;
          assertThat(authMap.get("id"), instanceOf(String.class));
          assertThat(authMap.get("name"), instanceOf(String.class));
          assertThat(authMap.get("email"), instanceOf(String.class));
          assertThat(authMap.get("createdAt"), instanceOf(String.class));
          assertThat(authMap.get("updatedAt"), instanceOf(String.class));
      });
  }

  private void validateErrorResponse(Response response) {
      assertThat(response.header("api-version"), notNullValue());
      assertThat(response.path("message"), instanceOf(String.class));
      assertThat(response.path("error"), instanceOf(Map.class));
  }

  private void validateAuthenticationResponse(Response response) {
      assertThat(response.header("api-version"), notNullValue());
      assertThat(response.path("message"), instanceOf(String.class));
  }
}

