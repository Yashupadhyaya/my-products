// Test generated by RoostGPT for test Koreai-restassured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /deposit_post for http method type POST in rest-assured framework

// RoostTestHash=70db6d5eac

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class DepositPostTest {

    private static final String CSV_FILE_PATH = "src/test/java/com/bootexample4/RoostTest/deposit_post.csv";

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void depositPostTest() {
        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> dataMap = createDataMap(headers, line.split(","));

                Response response = makeDepositRequest(dataMap);

                switch (response.getStatusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 401:
                        validateUnauthorisedResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unhandled status code: " + response.getStatusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Test failed due to IOException: " + e.getMessage());
        }
    }

    private Map<String, String> createDataMap(String[] headers, String[] values) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], values[i]);
        }
        return map;
    }

    private Response makeDepositRequest(Map<String, String> dataMap) {
        return given()
                .pathParam("koreUserId", dataMap.get("koreUserId"))
                .pathParam("botId", dataMap.get("botId"))
                .pathParam("accountId", dataMap.get("accountId"))
                .header("Authorization", dataMap.get("Authorization"))
                .contentType(ContentType.JSON)
                .body(createRequestBody(dataMap))
                .when()
                .post("/deposit")
                .then()
                .extract().response();
    }

    private String createRequestBody(Map<String, String> dataMap) {
        return String.format(
                "{\n" +
                "  \"customerId\": \"%s\",\n" +
                "  \"sourceAccountId\": \"%s\",\n" +
                "  \"amount\": \"%s\",\n" +
                "  \"currency\": \"%s\",\n" +
                "  \"image\": \"%s\"\n" +
                "}", 
                dataMap.get("customerId"), 
                dataMap.get("sourceAccountId"), 
                dataMap.get("amount"), 
                dataMap.get("currency"), 
                dataMap.get("image")
        );
    }

    private void validateSuccessResponse(Response response) {
        response.then().statusCode(200)
                .body("success", is(true))
                .body("message", equalTo("Deposit success"));
    }

    private void validateErrorResponse(Response response) {
        response.then().statusCode(400)
                .body("err", notNullValue())
                .body("err.message", instanceOf(String.class));
        // Additional specific assertions can be added based on the error response structure
    }

    private void validateUnauthorisedResponse(Response response) {
        response.then().statusCode(401)
                .body("error", equalTo("Authorization failed"));
    }

    private void validateNotFoundResponse(Response response) {
        response.then().statusCode(404)
                .body("error", equalTo("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then().statusCode(422)
                .body("error", notNullValue())
                .body("details", instanceOf(Map.class));
        // Additional specific assertions can be added based on the error response structure
    }

    private void fail(String message) {
        throw new AssertionError(message);
    }
}
