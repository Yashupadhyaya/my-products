// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /grants_get for http method type GET in rest-assured framework

// RoostTestHash=692c6b853f

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class grantsGetTest {

  private static final Logger logger = LoggerFactory.getLogger(grantsGetTest.class);

  @BeforeAll
  public static void setUp() {
    RestAssured.baseURI = "http://0.0.0.0:4012";
  }

  @Test
  public void grants_get_Test() {
    Response response = given()
        .header("Token", System.getenv("API_KEY"))
        .when()
        .get("/grants")
        .then()
        .extract().response();

    switch (response.statusCode()) {
      case 200:
        System.out.println("Description: successful operation");

        MatcherAssert.assertThat("Response total field is of type Integer",
            response.jsonPath().get("total"), instanceOf(Integer.class));

        List<Map<String, ?>> grants = response.jsonPath().getList("grants");
        for (int i = 0; i < grants.size(); i++) {
          String baseJsonPath = "grants[" + i + "]";
          MatcherAssert.assertThat("Grant ID is a String",
              response.jsonPath().get(baseJsonPath + ".id"), instanceOf(String.class));
          MatcherAssert.assertThat("Grant Token is a String",
              response.jsonPath().get(baseJsonPath + ".token"), instanceOf(String.class));
          MatcherAssert.assertThat("Created At is a String",
              response.jsonPath().get(baseJsonPath + ".createdAt"), instanceOf(String.class));
          MatcherAssert.assertThat("Updated At is a String",
              response.jsonPath().get(baseJsonPath + ".updatedAt"), instanceOf(String.class));

          Map<String, ?> account = response.jsonPath().getMap(baseJsonPath + ".account");
          if (account != null) {
            MatcherAssert.assertThat("Account ID is a String",
                account.get("id"), instanceOf(String.class));
            MatcherAssert.assertThat("Account Name is a String",
                account.get("name"), instanceOf(String.class));
            MatcherAssert.assertThat("Account Image is a String",
                account.get("image"), instanceOf(String.class));
          }
        }
        MatcherAssert.assertThat("Grants field is a List",
            grants, instanceOf(List.class));
        break;

      case 401:
        logger.info("Description: Authentication Required");
        MatcherAssert.assertThat("Error field is a String",
            response.jsonPath().get("error"), instanceOf(String.class));
        MatcherAssert.assertThat("Error field matches pattern",
            response.jsonPath().getString("error"), matchesPattern("^validation/.*$"));
        MatcherAssert.assertThat("Description field is a String",
            response.jsonPath().get("description"), instanceOf(String.class));
        MatcherAssert.assertThat("Value field is a String",
            response.jsonPath().get("value"), instanceOf(String.class));
        MatcherAssert.assertThat("Field field is a String",
            response.jsonPath().get("field"), instanceOf(String.class));
        MatcherAssert.assertThat("Schema_field field is a String",
            response.jsonPath().get("schema_field"), instanceOf(String.class));
        break;

      default:
        fail("Unexpected status code received: " + response.statusCode());
    }
  }
}
