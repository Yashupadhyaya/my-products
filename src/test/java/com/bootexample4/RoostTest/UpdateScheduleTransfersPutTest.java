// Test generated by RoostGPT for test Koreai-restassured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /UpdateScheduleTransfers_put for http method type PUT in rest-assured framework

// RoostTestHash=c0505709a3

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class UpdateScheduleTransfersPutTest {

    private static final String BASE_URL = System.getenv("BASE_URL");
    private static final String ENDPOINT = "/UpdateScheduleTransfers";
    private static final String CSV_FILE_PATH = "src/test/java/com/bootexample4/RoostTest/UpdateScheduleTransfers_put.csv";

    @Before
    public void setUp() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void UpdateScheduleTransfersPutTest() {
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> dataMap = csvLineToMap(headers, line);

                Response response = given()
                        .pathParams(dataMap)
                        .contentType(ContentType.JSON)
                        .body(mapToRequestBody(dataMap))
                        .when()
                        .put(ENDPOINT)
                        .then()
                        .extract().response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> csvLineToMap(String[] headers, String line) {
        String[] data = line.split(",");
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private String mapToRequestBody(Map<String, String> dataMap) {
        return "{\n" +
                "  \"paymentId\": \"" + dataMap.get("paymentId") + "\",\n" +
                "  \"customerId\": \"" + dataMap.get("customerId") + "\",\n" +
                "  \"amount\": \"" + dataMap.get("amount") + "\",\n" +
                "  \"scheduledDate\": \"" + dataMap.get("scheduledDate") + "\",\n" +
                "  \"sourceAccountId\": \"" + dataMap.get("sourceAccountId") + "\",\n" +
                "  \"targetAccountId\": \"" + dataMap.get("targetAccountId") + "\"\n" +
                "}";
    }

    private void validateResponse(Response response) {
        switch (response.statusCode()) {
            case 200:
                System.out.println("Scheduled transfer updated successfully");
                // Add any specific assertions for a successful response if needed
                break;
            case 400:
                validateBadRequestResponse(response);
                break;
            case 401:
                System.out.println("Authorization failed.");
                validateErrorResponse(response);
                break;
            case 404:
                System.out.println("Not Found");
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
            default:
                System.out.println("Unhandled status code: " + response.statusCode());
                break;
        }
    }

    private void validateBadRequestResponse(Response response) {
        // Add specific assertions for a 400 Bad Request response
        String errorMessage = response.jsonPath().get("error.message");
        assertThat(errorMessage, not(isEmptyOrNullString()));
    }

    private void validateErrorResponse(Response response) {
        // Add specific assertions for a 401 Unauthorized response
        String errorMessage = response.jsonPath().get("error.message");
        assertThat(errorMessage, is("Invalid credentials"));
    }

    private void validateNotFoundResponse(Response response) {
        // Add specific assertions for a 404 Not Found response
        String errorMessage = response.jsonPath().get("error.message");
        assertThat(errorMessage, is("Resource not found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        // Add specific assertions for a 422 Unprocessable Entity response
        String errorMessage = response.jsonPath().get("error.message");
        assertThat(errorMessage, not(isEmptyOrNullString()));
    }
}
