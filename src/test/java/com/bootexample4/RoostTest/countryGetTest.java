// ********RoostGPT********
/*
Test generated by RoostGPT for test test-restassured using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /country_get for http method type GET in rest-assured framework

RoostTestHash=1258279f02


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class CountryGetTest {

    private List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataLoader = new TestdataLoader();
        String[] envVarsList = {""};
        envList = dataLoader.load("src/test/java/com/bootexample4/RoostTest/countryGetTest.csv", envVarsList);
    }

    @Test
    public void countryGet_Test() throws JSONException {
        setUp();
        int testNumber = 1;

        for (Map<String, String> testData : envList) {
            RestAssured.baseURI = testData.getOrDefault("url1_country2_BASE_URL", "http://api.example.com/v1");

            JSONObject requestBodyObject = testData.get("RequestBody") != null
                    ? new JSONObject(testData.get("RequestBody"))
                    : new JSONObject();

            Response response = given()
                    .header("app-identifier", testData.getOrDefault("app-identifier", ""))
                    .header("customer-secret-key", testData.getOrDefault("customer-secret-key", ""))
                    .when()
                    .get("/country")
                    .then()
                    .extract().response();

            System.out.printf("Test Case %d: countryGet_Test\n", testNumber++);
            System.out.println("Request: GET /country");
            System.out.println("Status Code: " + response.statusCode());

            validateStatusCode(response, testData);

            String contentType = response.getContentType();
            assertThat("Content type mismatch", contentType, anyOf(containsString("application/json"),
                    containsString("application/xml"), containsString("text/xml")));

            JsonPath responseJsonPath = parseResponseBasedOnContentType(response);

            switch (response.statusCode()) {
                case 200:
                    validateSuccessResponse(responseJsonPath);
                    break;
                case 400:
                    validateErrorResponse(responseJsonPath);
                    break;
                case 404:
                    validateNotFoundResponse(responseJsonPath);
                    break;
                case 422:
                    validateUnprocessableEntityResponse(responseJsonPath);
                    break;
                default:
                    System.out.println("Unexpected status code encountered: " + response.statusCode());
            }
        }
    }

    private void validateStatusCode(Response response, Map<String, String> testData) {
        if (testData.get("statusCode") != null) {
            String expectedStatusCode = testData.get("statusCode");
            if (expectedStatusCode.contains("X")) {
                assertThat(
                        "Expected a status code in the category " + expectedStatusCode + ", but actual was: " + response.statusCode(),
                        Integer.toString(response.statusCode()).charAt(0), equalTo(expectedStatusCode.charAt(0)));
            } else {
                assertThat("Status code mismatch", Integer.toString(response.statusCode()), equalTo(expectedStatusCode));
            }
        } else {
            assertThat("Status code mismatch", response.statusCode(), is(200));
        }
    }

    private JsonPath parseResponseBasedOnContentType(Response response) {
        String contentType = response.getContentType();
        if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
            JSONObject jsonResponse = XML.toJSONObject(response.asString());
            return new JsonPath(jsonResponse.toString());
        } else if (contentType.contains("application/json")) {
            return response.jsonPath();
        } else {
            throw new IllegalArgumentException("Unsupported content type: " + contentType);
        }
    }

    private void validateSuccessResponse(JsonPath response) {
        System.out.println("Description: Success");

        assertThat(response.get("status"), instanceOf(String.class));
        assertThat(response.get("message"), instanceOf(String.class));

        if (response.get("data") != null && response.get("data.countries") != null) {
            List<Map<String, Object>> countries = response.getList("data.countries");

            assertThat(countries, instanceOf(List.class));

            for (Map<String, Object> country : countries) {
                assertThat(country.get("id"), instanceOf(Integer.class));
                assertThat(country.get("name"), instanceOf(String.class));
                assertThat(country.get("code"), instanceOf(String.class));
                assertThat(country.get("default_currency"), instanceOf(String.class));
                assertThat(country.get("is_active"), instanceOf(Integer.class));
                assertThat(country.get("app_id"), instanceOf(Integer.class));
                assertThat(country.get("customer_id"), instanceOf(Integer.class));
                assertThat(country.get("created_by"), instanceOf(Integer.class));
                assertThat(country.get("updated_by"), instanceOf(Integer.class));
                assertThat(country.get("created_at"), instanceOf(String.class));
                assertThat(country.get("updated_at"), instanceOf(String.class));
                assertThat(country.get("currencies"), instanceOf(List.class));
            }
        }
    }

    private void validateErrorResponse(JsonPath response) {
        assertThat(response.get("error"), instanceOf(String.class));
        assertThat(response.get("message"), instanceOf(String.class));
        System.out.println("Validated error response for status code 400.");
    }

    private void validateNotFoundResponse(JsonPath response) {
        assertThat(response.get("error"), instanceOf(String.class));
        assertThat(response.get("message"), instanceOf(String.class));
        System.out.println("Validated not found response for status code 404.");
    }

    private void validateUnprocessableEntityResponse(JsonPath response) {
        assertThat(response.get("error"), instanceOf(String.class));
        assertThat(response.get("message"), instanceOf(String.class));
        assertThat(response.get("details"), instanceOf(List.class));
        System.out.println("Validated unprocessable entity response for status code 422.");
    }
}
