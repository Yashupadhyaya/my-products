/*
Test generated by RoostGPT for test testing-integration-test using AI Type Open AI and AI Model gpt-4

{
  background: 'Given the base URL is "http://0.0.0.0:4012"',
  rule: null,
  scenario: 'Delete authorization\n' +
    '    Given authorization ID\n' +
    '    When the client sends a DELETE request to "/authorizations/ID"\n' +
    '    Then the response status code should be 200 for a successful delete\n' +
    '    And the authorizations should not appear in GET request for "/authorizations"',
  title: 'Delete authorization'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;

public class scenario249628b1c6Test {

    @Test
    public void testDeleteAuthorization() throws IOException {
        String env = System.getenv("API_HOST");
        String fileName = "src/test/java/com/bootexample4/RoostTest/scenario-249628b1c6-Test.csv";
        String file = Paths.get(fileName).toString();
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line = null;
        reader.readLine();
        while((line = reader.readLine()) != null){
            String[] splitData = line.split("\\^\\|\\^");
            if(splitData[0].equalsIgnoreCase("DELETE")){
                String url = env + splitData[1];
                JSONParser parser = new JSONParser();
                JSONObject headers = (JSONObject) parser.parse(splitData[2]);
                RequestSpecification request = RestAssured.given();
                request.headers(headers);
                Response response = request.delete(url);
                Assert.assertEquals(response.getStatusCode(), Integer.parseInt(splitData[4]));
                JSONObject responseBody = (JSONObject) parser.parse(splitData[5]);
                Assert.assertEquals(response.getBody().jsonPath().getString("description"), responseBody.get("description"));
                Assert.assertEquals(response.getBody().jsonPath().getString("api-version"), responseBody.get("api-version"));
            }
            else if(splitData[0].equalsIgnoreCase("GET")){
                String url = env + splitData[1];
                JSONParser parser = new JSONParser();
                JSONObject headers = (JSONObject) parser.parse(splitData[2]);
                RequestSpecification request = RestAssured.given();
                request.headers(headers);
                Response response = request.get(url);
                Assert.assertEquals(response.getStatusCode(), Integer.parseInt(splitData[4]));
                JSONObject responseBody = (JSONObject) parser.parse(splitData[5]);
                Assert.assertEquals(response.getBody().jsonPath().getInt("total"), responseBody.get("total"));
                Assert.assertEquals(response.getBody().jsonPath().getList("authorizations"), responseBody.get("authorizations"));
                Assert.assertEquals(response.getBody().jsonPath().getString("api-version"), responseBody.get("api-version"));
            }
        }
        reader.close();
    }
}
