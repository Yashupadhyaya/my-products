/*
Test generated by RoostGPT for test testing-integration-test using AI Type Open AI and AI Model gpt-4

{
  background: 'Given the base URL is "http://0.0.0.0:4012"',
  rule: null,
  scenario: 'Create my account \n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\n' +
    '    Then create an account with the specified informatio\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.extension.ExtendWith;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import io.restassured.http.ContentType;
import org.junit.jupiter.api.BeforeAll;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

@ExtendWith(RestAssuredExtension.class)
public class scenario5161c852c6Test {

    private static String BASE_URL;

    @BeforeAll
    public static void init() {
        BASE_URL = System.getenv("API_HOST");
    }

    @Test
    @DisplayName("Create my account")
    public void createMyAccountTest() {
        String filePath = "src/test/java/com/bootexample4/RoostTest/scenario-5161c852c6-Test.csv";
        BufferedReader reader = null;

        try {
            reader = new BufferedReader(new FileReader(filePath));
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split("\\^\\|\\^");
                if (data[0].equalsIgnoreCase("POST")) {
                    Map<String, String> headers = new HashMap<>();
                    headers.put("commit-hash", "928d28d");
                    given().baseUri(BASE_URL)
                            .contentType(ContentType.JSON)
                            .headers(headers)
                            .body(data[3])
                            .when().post(data[1])
                            .then().assertThat().statusCode(Integer.parseInt(data[4]))
                            .body("description", equalTo("successful operation"))
                            .body("headers.api-version", equalTo("1.0.0"))
                            .body("headers.commit-hash", equalTo("928d28d"));
                }
                if (data[0].equalsIgnoreCase("GET")) {
                    Map<String, String> headers = new HashMap<>();
                    headers.put("api-version", "1.0.0");
                    given().baseUri(BASE_URL)
                            .contentType(ContentType.JSON)
                            .headers(headers)
                            .when().get(data[1])
                            .then().assertThat().statusCode(Integer.parseInt(data[4]))
                            .body("id", equalTo("uuid"))
                            .body("did", equalTo("null"))
                            .body("name", equalTo("null"))
                            .body("image", equalTo("null"))
                            .body("email", equalTo("test@example.com"))
                            .body("createdAt", equalTo("date-time"))
                            .body("updatedAt", equalTo("date-time"))
                            .body("headers.api-version", equalTo("1.0.0"));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
