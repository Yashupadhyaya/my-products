/*
Test generated by RoostGPT for test testing-integration-test using AI Type Open AI and AI Model gpt-4

{
  background: 'Given the base URL is "http://0.0.0.0:4012"',
  rule: null,
  scenario: 'Create my account \n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\n' +
    '    Then create an account with the specified informatio\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.JSONObject;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class scenario5161c852c6Test {

    @Test
    public void createMyAccount() throws IOException {
        String baseUrl = System.getenv("API_HOST");
        String file = "src/test/java/com/bootexample4/RoostTest/scenario-5161c852c6-Test.csv";
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line = reader.readLine(); // Skip headers
        while ((line = reader.readLine()) != null) {
            String[] data = line.split("\\^\\|\\^");
            String method = data[0];
            String url = data[1];
            JSONObject reqHeaders = new JSONObject(data[2]);
            JSONObject reqBody = new JSONObject(data[3]);
            int responseCode = Integer.parseInt(data[4]);
            JSONObject responseBody = new JSONObject(data[5]);

            RequestSpecification request = RestAssured.given();
            reqHeaders.keys().forEachRemaining(key -> request.header(key, reqHeaders.get(key)));
            request.body(reqBody.toString());

            Response response;
            switch (method) {
                case "POST":
                    response = request.post(url);
                    break;
                case "GET":
                    response = request.get(url);
                    break;
                default:
                    throw new IllegalArgumentException("Invalid method: " + method);
            }

            assertEquals(responseCode, response.getStatusCode());
            JSONObject json = new JSONObject(response.getBody().asString());
            responseBody.keys().forEachRemaining(key -> assertEquals(responseBody.get(key), json.get(key)));
        }
        reader.close();
    }
}
