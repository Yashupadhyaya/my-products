// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /images/variations_post for http method type POST in rest-assured framework

RoostTestHash=d44a85fb9f


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class variationsPostTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/variationsPostTest.csv");
    }

  
    @Test  
    public void variationsPost_Test() {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = "https://api.openai.com/v1";  
  
                Response response = given()
				.header("api_key", testData.get("api_key"))
                .when()
                .post("/images/variations")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: OK");
      
              if (response.jsonPath().get("created") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("created"), instanceOf(Integer.class));  
          }
      
              if (response.jsonPath().get("data") != null) {      
                for (int i = 0; i < response.jsonPath().getList("data").size(); i++) {      
              if (response.jsonPath().get("data["+ i +"].b64_json") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("data["+ i +"].b64_json"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("data["+ i +"].url") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("data["+ i +"].url"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("data["+ i +"].revised_prompt") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("data["+ i +"].revised_prompt"), instanceOf(String.class));  
          }
      
                  }    
                MatcherAssert.assertThat(response.jsonPath().getList("data"), instanceOf(List.class));
  
          }
				}
  
            }  
    }
}
