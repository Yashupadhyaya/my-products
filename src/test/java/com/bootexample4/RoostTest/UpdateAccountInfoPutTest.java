// Test generated by RoostGPT for test Koreai-restassured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /UpdateAccountInfo_put for http method type PUT in rest-assured framework

// RoostTestHash=adb57fbf1b

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.assertThat;

public class UpdateAccountInfoPutTest {

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void UpdateAccountInfo_put_Test() {
        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/UpdateAccountInfo_put.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> dataMap = createDataMap(headers, line.split(","));

                Response response = sendPutRequest(dataMap);

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateBadRequestResponse(response);
                        break;
                    case 401:
                        validateUnauthorizedResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unexpected status code received: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Test failed due to IOException.");
        }
    }

    private Map<String, String> createDataMap(String[] headers, String[] values) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], values[i]);
        }
        return map;
    }

    private Response sendPutRequest(Map<String, String> dataMap) {
        return given()
                .headers("Authorization", dataMap.get("Authorization"),
                        "X-Auth-token", dataMap.get("X-Auth-token"),
                        "X-CORRELATION-ID", dataMap.get("X-CORRELATION-ID"),
                        "Content-Type", ContentType.JSON)
                .body(dataMap)
                .when()
                .put("/UpdateAccountInfo")
                .then()
                .extract().response();
    }

    private void validateSuccessResponse(Response response) {
        assertThat("Description: successful operation", response.statusCode(), equalTo(200));
        // Add more assertions as needed
    }

    private void validateBadRequestResponse(Response response) {
        assertThat("Description: Bad Request", response.statusCode(), equalTo(400));
        // Add specific assertions based on the response structure for status code 400
    }

    private void validateUnauthorizedResponse(Response response) {
        assertThat("Description: Error: Authorization failed.", response.statusCode(), equalTo(401));
        // Add specific assertions based on the response structure for status code 401
    }

    private void validateNotFoundResponse(Response response) {
        assertThat("Description: Error: Not Found", response.statusCode(), equalTo(404));
        // Add specific assertions based on the response structure for status code 404
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat("Description: Unprocessable Entity", response.statusCode(), equalTo(422));
        // Add specific assertions based on the response structure for status code 422
    }
}
