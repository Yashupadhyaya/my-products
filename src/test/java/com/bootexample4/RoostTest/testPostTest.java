// ********RoostGPT********
/*
Test generated by RoostGPT for test test-roostgpt-api using AI Type Open AI and AI Model gpt-4

Test generated for /test_post for http method type POST in rest-assured framework

RoostTestHash=83193a8b39


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;
import java.util.Arrays;

public class testPostTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @BeforeEach
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {""};
      envList = dataloader.load("src/test/java/com/bootexample4/RoostTest/testPostTest.csv", envVarsList);
    }

  
    @Test  
    public void testPost_Test() throws JSONException {
        this.setUp();
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "/api";  
          JSONObject requestBodyObject = new JSONObject();
          if(testData.get("RequestBody") != null){
              requestBodyObject = new JSONObject(testData.get("RequestBody"));
          }
                Response responseObj = given()
				.contentType(ContentType.JSON)
				.body(requestBodyObject.toString())
				.header("Authorization", "Bearer " + testData.get("bearer"))
                .when()
                .post("/test")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();

              System.out.printf("Test Case %d: testPost_Test \n", testNumber++);
              System.out.println("Request: POST /test");
              System.out.println("Status Code: " + responseObj.statusCode());
              if (testData.get("statusCode") != null) {
                String statusCodeFromCSV = testData.get("statusCode");
                if (statusCodeFromCSV.contains("X")) {
                  MatcherAssert.assertThat(
                      "Expected a status code of category " + statusCodeFromCSV + ", but got "
                          + Integer.toString(responseObj.statusCode()) + " instead",
                      Integer.toString(responseObj.statusCode()).charAt(0), equalTo(statusCodeFromCSV.charAt(0)));
                } else {
                  MatcherAssert.assertThat(
                      Integer.toString(responseObj.statusCode()), equalTo(statusCodeFromCSV));
                }
              } 
              				else {  
      List<Integer> expectedStatusCodes = Arrays.asList(201,default);
				MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
          }
				String stringifiedStatusCode = Integer.toString(responseObj.statusCode());
        switch(responseObj.statusCode()){
        
          case 201:
            stringifiedStatusCode = "201";
            MatcherAssert.assertThat(contentType, equalTo("application/json"));
            break;
         
          case default:
            stringifiedStatusCode = "default";
            MatcherAssert.assertThat(contentType, equalTo("application/json"));
            break;
         
    }

      switch(Integer.toString(responseObj.statusCode()).charAt(0)){
      
    }

      
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else if(contentType.contains("application/json")){  
                response = responseObj.jsonPath(); 
              } else {
                System.out.println("Response content type found: "+contentType+", but RoostGPT currently only supports the following response content types: application/json,text/xml,application/xml");
                continue;
              }
         
                if(stringifiedStatusCode.equals("201")){					System.out.println("Status code: 201");
      
              if (response.get("id") != null) {
                  
                MatcherAssert.assertThat(response.get("id"), instanceOf(String.class));
              }
      
              if (response.get("user_id") != null) {
                  
                MatcherAssert.assertThat(response.get("user_id"), instanceOf(String.class));
              }
      
              if (response.get("thirdparty_app_id") != null) {
                  
                MatcherAssert.assertThat(response.get("thirdparty_app_id"), instanceOf(String.class));
              }
      
              if (response.get("test_name") != null) {
                  
                MatcherAssert.assertThat(response.get("test_name"), instanceOf(String.class));
              }
      
              if (response.get("git_info") != null) {
                  
                MatcherAssert.assertThat(response.get("git_info"), instanceOf(String.class));
              }
      
              if (response.get("ai_model_info") != null) {
                  
                MatcherAssert.assertThat(response.get("ai_model_info"), instanceOf(String.class));
              }
      
              if (response.get("integration_info") != null) {
                  
                MatcherAssert.assertThat(response.get("integration_info"), instanceOf(String.class));
              }
      
              if (response.get("additional_info") != null) {
                  
                MatcherAssert.assertThat(response.get("additional_info"), instanceOf(String.class));
              }
      
              if (response.get("trigger_events") != null) {
                  
                MatcherAssert.assertThat(response.get("trigger_events"), instanceOf(String.class));
              }
      
              if (response.get("created_on") != null) {
                  
                MatcherAssert.assertThat(response.get("created_on"), instanceOf(String.class));
              }
      
              if (response.get("updated_on") != null) {
                  
                MatcherAssert.assertThat(response.get("updated_on"), instanceOf(String.class));
              }
      
              if (response.get("deleted") != null) {
                  
                MatcherAssert.assertThat(response.get("deleted"), instanceOf(Integer.class));
              }
      
              if (response.get("test_timeout") != null) {
                  
                MatcherAssert.assertThat(response.get("test_timeout"), instanceOf(Integer.class));
              }
      
              if (response.get("webhook_error") != null) {
                  
                MatcherAssert.assertThat(response.get("webhook_error"), instanceOf(String.class));
              }
      
              if (response.get("test_framework") != null) {
                  
                MatcherAssert.assertThat(response.get("test_framework"), instanceOf(String.class));
              }
      
              if (response.get("git_type") != null) {
                  
                MatcherAssert.assertThat(response.get("git_type"), instanceOf(String.class));
              }
      
              if (response.get("source_repo") != null) {
                  
                MatcherAssert.assertThat(response.get("source_repo"), instanceOf(String.class));
              }
      
              if (response.get("source_branch") != null) {
                  
                MatcherAssert.assertThat(response.get("source_branch"), instanceOf(String.class));
              }
      
              if (response.get("connector_ids") != null) {
                  
                MatcherAssert.assertThat(response.get("connector_ids"), instanceOf(String.class));
              }
      
              if (response.get("git_ops") != null) {
                  
                MatcherAssert.assertThat(response.get("git_ops"), instanceOf(Integer.class));
              }
      
              if (response.get("labels") != null) {
                  
                MatcherAssert.assertThat(response.get("labels"), instanceOf(String.class));
              }
      
              if (response.get("test_source") != null) {
                  
                MatcherAssert.assertThat(response.get("test_source"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("test_source"), anyOf(equalTo("jira_plugin")));

              }
				}
if(stringifiedStatusCode.equals("default")){					System.out.println("Status code: default");
      
              if (response.get("code") != null) {
                  
                MatcherAssert.assertThat(response.get("code"), instanceOf(Integer.class));
              }
      
              if (response.get("timestamp") != null) {
                  
                MatcherAssert.assertThat(response.get("timestamp"), instanceOf(String.class));
              }
      
              if (response.get("path") != null) {
                  
                MatcherAssert.assertThat(response.get("path"), instanceOf(String.class));
              }
      
              if (response.get("method") != null) {
                  
                MatcherAssert.assertThat(response.get("method"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("method"), anyOf(equalTo("GET"), equalTo("DELETE"), equalTo("HEAD"), equalTo("OPTIONS"), equalTo("POST"), equalTo("PUT"), equalTo("PATCH"), equalTo("PURGE"), equalTo("LINK"), equalTo("UNLINK")));

              }
      
              if (response.get("message") != null) {
                  
                MatcherAssert.assertThat(response.get("message"), instanceOf(String.class));
              }
				}


            }  
    }
}
