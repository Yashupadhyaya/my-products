// ********RoostGPT********
/*
Test generated by RoostGPT for test testingartillerytest using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /nobelPrize/{category}/{year}_get for http method type GET in rest-assured framework

RoostTestHash=968c47d2dc

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Test a valid request with correct category and year parameters",
    "Execution": {
      "Arrange": "Prepare valid 'category=phy' and 'year=2000' path parameters",
      "Act": "Send GET request to /2.1/nobelPrize/phy/2000",
      "Assert": "Ensure response status code is 200 and response body contains expected Nobel Prize data"
    },
    "Validation": "Ensures API successfully returns a valid Nobel Prize for a correct category and year"
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingCategoryReturns400",
    "Description": "Test request where the 'category' parameter is omitted",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize//2000",
      "Act": "Send GET request without 'category' parameter",
      "Assert": "Ensure response status code is 400 and validate error message in the response body"
    },
    "Validation": "Ensures API handles missing 'category' parameter correctly"
  },
  {
    "ScenarioID": "3",
    "TestName": "testMissingYearReturns400",
    "Description": "Test request where the 'year' parameter is omitted",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize/phy/",
      "Act": "Send GET request without 'year' parameter",
      "Assert": "Ensure response status code is 400 and validate error message in the response body"
    },
    "Validation": "Ensures API handles missing 'year' parameter correctly"
  },
  {
    "ScenarioID": "4",
    "TestName": "testInvalidCategoryValueReturns422",
    "Description": "Test request with invalid 'category' parameter value",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize/invalidCategory/2000",
      "Act": "Send GET request with invalid 'category' value",
      "Assert": "Ensure response status code is 422 and validate error message in the response body"
    },
    "Validation": "Ensures API rejects invalid 'category' values not defined in the enum"
  },
  {
    "ScenarioID": "5",
    "TestName": "testYearBelowMinimumReturns422",
    "Description": "Test request where the 'year' parameter is below the minimum allowed value",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize/phy/1800",
      "Act": "Send GET request with 'year' parameter below 1901",
      "Assert": "Ensure response status code is 422 and validate error message in the response body"
    },
    "Validation": "Ensures API enforces minimum constraints for 'year' parameter"
  },
  {
    "ScenarioID": "6",
    "TestName": "testNoParametersReturns400",
    "Description": "Test request where both 'category' and 'year' parameters are missing",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize//",
      "Act": "Send GET request without any parameters",
      "Assert": "Ensure response status code is 400 and validate error message in the response body"
    },
    "Validation": "Ensures API rejects completely empty requests"
  },
  {
    "ScenarioID": "7",
    "TestName": "testCategoryCaseSensitivity",
    "Description": "Test request where 'category' parameter value has incorrect casing",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize/PHY/2000",
      "Act": "Send GET request using 'category' parameter with uppercase letters",
      "Assert": "Ensure response status code is 422 and validate error message in the response body"
    },
    "Validation": "Ensures API enforces case sensitivity on 'category' values"
  },
  {
    "ScenarioID": "8",
    "TestName": "testMalformedYearFormatReturns400",
    "Description": "Test request with 'year' formatted incorrectly as a string instead of an integer",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize/phy/abcd",
      "Act": "Send GET request with 'year' parameter as a string",
      "Assert": "Ensure response status code is 400 and validate error message in the response body"
    },
    "Validation": "Ensures API rejects malformed 'year' format"
  },
  {
    "ScenarioID": "9",
    "TestName": "testFutureYearReturns404",
    "Description": "Test request with 'year' parameter that is in the future",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize/lit/3000",
      "Act": "Send GET request with 'year' parameter set to a future year",
      "Assert": "Ensure response status code is 404 and validate error message in the response body"
    },
    "Validation": "Ensures API correctly handles requests for non-existent future Nobel Prizes"
  },
  {
    "ScenarioID": "10",
    "TestName": "testValidCategoryWithNoWinnerReturns404",
    "Description": "Test request with valid 'category' and 'year' where no Nobel Prize was awarded",
    "Execution": {
      "Arrange": "Prepare a request with path /2.1/nobelPrize/pea/2023",
      "Act": "Send GET request expecting no winner",
      "Assert": "Ensure response status code is 404 and validate error message in the response body"
    },
    "Validation": "Ensures API handles cases where no Nobel Prize was awarded for valid inputs"
  }
]

*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
category,year
import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class NobelPrizeCategoryYearGetTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/com/bootexample4/RoostTest/nobelPrize_category_yearGetTest.JSON");
    }


    @Test
    public void NobelPrizeCategoryYearGet_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "http://api.nobelprize.org/2.1";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/nobelPrize/{category}/{year}";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "nobel.json";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("get".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "get");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: NobelPrizeCategoryYearGet_Test\n", testNumber++);
            System.out.println("Request: GET " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
