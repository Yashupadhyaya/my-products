// Test generated by RoostGPT for test test-postman using AI Type Open AI and AI Model gpt-4-1106-preview


// Test generated for /apikeys_get for http method type GET in rest-assured framework


// RoostTestHash=9e57a3b0dd


package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ApiKeysGetTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApiKeysGetTest.class);

    @Test
    public void apiKeysGetTest() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/apikeysGetTest.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .header("Token", System.getenv("API_KEY"))
                        .when()
                        .get("/apikeys")
                        .then()
                        .contentType(ContentType.JSON)
                        .extract().response();

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessfulResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 401:
                        validateUnprocessableEntityResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    default:
                        LOGGER.error("Unexpected status code received: {}", response.statusCode());
                }
            }
        } catch (IOException e) {
            LOGGER.error("Error reading CSV file: {}", e.getMessage());
        }
    }

    private void validateSuccessfulResponse(Response response) {
        LOGGER.info("Description: Successful operation");

        Integer total = response.jsonPath().get("total");
        if (total != null) {
            assertThat(total, instanceOf(Integer.class));
        }

        List<Map<String, Object>> apiKeys = response.jsonPath().getList("apikeys");
        if (apiKeys != null) {
            assertThat(apiKeys, everyItem(hasKey("id")));
            assertThat(apiKeys, everyItem(hasKey("createdAt")));
        }
    }

    private void validateErrorResponse(Response response) {
        LOGGER.info("Description: Bad Request");
        String error = response.jsonPath().get("error");
        String description = response.jsonPath().get("description");
        assertThat(error, allOf(notNullValue(), instanceOf(String.class), matchesPattern("^validation/.*$")));
        assertThat(description, allOf(notNullValue(), instanceOf(String.class)));
    }

    private void validateNotFoundResponse(Response response) {
        LOGGER.info("Description: Not Found");
        String error = response.jsonPath().get("error");
        assertThat(error, is("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        LOGGER.info("Description: Unprocessable Entity");
        String error = response.jsonPath().get("error");
        assertThat(error, is("Unprocessable Entity"));
    }
}
