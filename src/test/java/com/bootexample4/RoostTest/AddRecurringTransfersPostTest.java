// Test generated by RoostGPT for test Koreai-restassured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /AddRecurringTransfers_post for http method type POST in rest-assured framework

// RoostTestHash=b9ae237532

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class AddRecurringTransfersPostTest {

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void AddRecurringTransfersPostTest() {
        String csvFilePath = "src/test/java/com/bootexample4/RoostTest/AddRecurringTransfers_post.csv";
        try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> dataMap = createDataMap(headers, line);

                Response response = given()
                        .contentType(ContentType.JSON)
                        .headers("Authorization", dataMap.get("Authorization"))
                        .body(createRequestBody(dataMap))
                        .when()
                        .post("/AddRecurringTransfers")
                        .then()
                        .extract().response();

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response, "Bad Request");
                        break;
                    case 401:
                        validateErrorResponse(response, "Authorization failed");
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Test failed due to IOException.");
        }
    }

    private Map<String, String> createDataMap(String[] headers, String line) {
        Map<String, String> map = new HashMap<>();
        String[] data = line.split(",");
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private String createRequestBody(Map<String, String> dataMap) {
        return "{" +
                "\"customerId\": \"" + dataMap.get("customerId") + "\"," +
                "\"amount\": \"" + dataMap.get("amount") + "\"," +
                "\"sourceAccountId\": \"" + dataMap.get("sourceAccountId") + "\"," +
                "\"targetAccountId\": \"" + dataMap.get("targetAccountId") + "\"," +
                "\"currency\": \"" + dataMap.get("currency") + "\"," +
                "\"status\": \"" + dataMap.get("status") + "\"," +
                "\"scheduledDate\": \"" + dataMap.get("scheduledDate") + "\"," +
                "\"recurringOptions\": \"" + dataMap.get("recurringOptions") + "\"" +
                "}";
    }

    private void validateSuccessResponse(Response response) {
        response.then().statusCode(200)
                .body("message", equalTo("schedule transfer added successfully"));
    }

    private void validateErrorResponse(Response response, String message) {
        response.then().statusCode(400)
                .body("error.message", equalTo(message));
    }

    private void validateNotFoundResponse(Response response) {
        response.then().statusCode(404)
                .body("error.message", equalTo("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then().statusCode(422)
                .body("error.message", containsString("Unprocessable Entity"));
    }
}
