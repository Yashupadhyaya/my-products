// ********RoostGPT********
/*
Test generated by RoostGPT for test testingartillerytest using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /laureates_get for http method type GET in rest-assured framework

RoostTestHash=1e43731d2a

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Test a valid request with offset and limit query parameters set",
    "Execution": {
      "Arrange": "Prepare query params: offset=5, limit=10",
      "Act": "Send GET request to /2.1/laureates with the query parameters",
      "Assert": "Check for 200 status and response contains a list of laureates"
    },
    "Validation": "Ensures API successfully returns correct response with valid input"
  },
  {
    "ScenarioID": "2",
    "TestName": "testWithoutParamsReturns200",
    "Description": "Test API response when no query parameters are provided",
    "Execution": {
      "Arrange": "Do not pass any query parameters",
      "Act": "Send GET request to /2.1/laureates",
      "Assert": "Check for 200 status and response contains a default list of laureates"
    },
    "Validation": "Ensures API can handle requests without query parameters"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidOffsetReturns400",
    "Description": "Test response when offset is set to an invalid value",
    "Execution": {
      "Arrange": "Prepare query param: offset=-5",
      "Act": "Send GET request to /2.1/laureates with invalid offset",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API handles invalid offset parameter gracefully"
  },
  {
    "ScenarioID": "4",
    "TestName": "testInvalidLimitReturns400",
    "Description": "Test response when limit is set to an invalid value",
    "Execution": {
      "Arrange": "Prepare query param: limit=0",
      "Act": "Send GET request to /2.1/laureates with invalid limit",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API handles invalid limit parameter gracefully"
  },
  {
    "ScenarioID": "5",
    "TestName": "testSortAscReturns200",
    "Description": "Test sorting results in ascending order",
    "Execution": {
      "Arrange": "Prepare query param: sort=asc",
      "Act": "Send GET request to /2.1/laureates with sort=asc",
      "Assert": "Check for 200 status and results are sorted alphabetically in ascending order"
    },
    "Validation": "Ensures API correctly sorts results in ascending order"
  },
  {
    "ScenarioID": "6",
    "TestName": "testSortInvalidParamReturns400",
    "Description": "Test response for invalid sort query value",
    "Execution": {
      "Arrange": "Prepare query param: sort=random",
      "Act": "Send GET request to /2.1/laureates with invalid sort value",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API handles invalid sort parameter gracefully"
  },
  {
    "ScenarioID": "7",
    "TestName": "testValidGenderParamReturns200",
    "Description": "Test API response when gender query parameter is valid",
    "Execution": {
      "Arrange": "Prepare query param: gender=female",
      "Act": "Send GET request to /2.1/laureates with gender=female",
      "Assert": "Check for 200 status and response contains laureates with gender=female"
    },
    "Validation": "Ensures API accurately filters laureates based on gender"
  },
  {
    "ScenarioID": "8",
    "TestName": "testInvalidGenderParamReturns400",
    "Description": "Test response for invalid gender query value",
    "Execution": {
      "Arrange": "Prepare query param: gender=invalid",
      "Act": "Send GET request to /2.1/laureates with invalid gender value",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API handles invalid gender parameter gracefully"
  },
  {
    "ScenarioID": "9",
    "TestName": "testEmptyMotivationParamReturns200",
    "Description": "Test response when motivation query parameter is empty",
    "Execution": {
      "Arrange": "Prepare query param: motivation=",
      "Act": "Send GET request to /2.1/laureates with empty motivation parameter",
      "Assert": "Check for 200 status and response contains all laureates"
    },
    "Validation": "Ensures API handles empty motivation parameter correctly"
  },
  {
    "ScenarioID": "10",
    "TestName": "testValidBirthDateRangeReturns200",
    "Description": "Test API response with valid birthDate and birthDateTo range",
    "Execution": {
      "Arrange": "Prepare query params: birthDate=1900, birthDateTo=2000",
      "Act": "Send GET request to /2.1/laureates with birthDate range",
      "Assert": "Check for 200 status and response contains laureates within the date range"
    },
    "Validation": "Ensures API filters laureates based on birth date range"
  },
  {
    "ScenarioID": "11",
    "TestName": "testMissingBirthDateParamWithRangeReturns400",
    "Description": "Test response when birthDateTo is set without birthDate",
    "Execution": {
      "Arrange": "Prepare query param: birthDateTo=2000",
      "Act": "Send GET request to /2.1/laureates with missing birthDate",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API requires birthDate when birthDateTo is given"
  },
  {
    "ScenarioID": "12",
    "TestName": "testValidNobelPrizeCategoryReturns200",
    "Description": "Test API response with valid Nobel Prize category",
    "Execution": {
      "Arrange": "Prepare query param: nobelPrizeCategory=che",
      "Act": "Send GET request to /2.1/laureates with nobelPrizeCategory=che",
      "Assert": "Check for 200 status and response contains laureates in the chemistry category"
    },
    "Validation": "Ensures API filters laureates based on Nobel Prize category"
  },
  {
    "ScenarioID": "13",
    "TestName": "testInvalidNobelPrizeCategoryReturns400",
    "Description": "Test response for invalid Nobel Prize category",
    "Execution": {
      "Arrange": "Prepare query param: nobelPrizeCategory=invalid",
      "Act": "Send GET request to /2.1/laureates with invalid Nobel Prize category",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API handles invalid Nobel Prize category parameter gracefully"
  },
  {
    "ScenarioID": "14",
    "TestName": "testValidFormatParamReturns200",
    "Description": "Test API response with format=csv",
    "Execution": {
      "Arrange": "Prepare query param: format=csv",
      "Act": "Send GET request to /2.1/laureates with format=csv",
      "Assert": "Check for 200 status and response in CSV format"
    },
    "Validation": "Ensures API can return data in CSV format"
  },
  {
    "ScenarioID": "15",
    "TestName": "testInvalidFormatParamReturns400",
    "Description": "Test response for an unsupported format value",
    "Execution": {
      "Arrange": "Prepare query param: format=xml",
      "Act": "Send GET request to /2.1/laureates with unsupported format",
      "Assert": "Check for 400 status and appropriate error message"
    },
    "Validation": "Ensures API restricts response formats to accepted values"
  },
  {
    "ScenarioID": "16",
    "TestName": "testMissingTokenReturns403",
    "Description": "Test API response when missing required security token",
    "Execution": {
      "Arrange": "Do not add any authentication token to request header",
      "Act": "Send GET request to /2.1/laureates",
      "Assert": "Check for 403 status and authorization error response"
    },
    "Validation": "Ensures API restricts access without authentication"
  },
  {
    "ScenarioID": "17",
    "TestName": "testInvalidTokenReturns403",
    "Description": "Test API response when invalid security token is provided",
    "Execution": {
      "Arrange": "Add invalid authentication token to request header",
      "Act": "Send GET request to /2.1/laureates",
      "Assert": "Check for 403 status and appropriate authorization error response"
    },
    "Validation": "Ensures API rejects invalid tokens promptly"
  }
]

*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class LaureatesGetTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/com/bootexample4/RoostTest/laureatesGetTest.JSON");
    }


    @Test
    public void LaureatesGet_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "http://api.nobelprize.org/2.1";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/laureates";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "nobel.json";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("get".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "get");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: LaureatesGet_Test\n", testNumber++);
            System.out.println("Request: GET " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
