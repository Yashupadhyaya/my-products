// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /get-cart/{id}_get for http method type GET in rest-assured framework

RoostTestHash=bd19d8edab


*/

// ********RoostGPT********

package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class getcartIdGetTest {

    List<Map<String, String>> envList = new ArrayList<>();

    // Before running this test, ensure that the Maven dependencies 'org.apache.commons:commons-io:jar:2.6' and 'org.junit:junit:jar:4.13.1' are available in your local repository.
    // If they are not available, you can add them to your project's pom.xml file and update the project dependencies.

    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/get-cart_idGetTest.csv");
    }

    @Test  
    public void getcartIdGet_Test() {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = testData.get("BASE_URL");  
  
                Response response = given()
				.pathParam("id", testData.get("id") != null ? testData.get("id") : "")
				.pathParam("Authorization", testData.get("Authorization") != null ? testData.get("Authorization") : "")
				.header("Authorization", testData.get("API_KEY"))
                .when()
                .get("/get-cart/{id}")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: Success");
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad Request");
				}
if (response.statusCode() == 401) {
					System.out.println("Description: Unauthorized");
				}
if (response.statusCode() == 403) {
					System.out.println("Description: Forbidden");
				}
if (response.statusCode() == 404) {
					System.out.println("Description: Not Found");
				}
  
            }  
    }
}
