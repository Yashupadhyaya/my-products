// Test generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=3a8d014c99

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.hamcrest.MatcherAssert;

public class laureate_laureateIDGetTest {
  
    @Test  
    public void laureate_laureateID_get_Test() {  
        //Set Base URI
        RestAssured.baseURI = System.getenv("BASE_URL");  

        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/laureate_laureateID_get.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  

                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }   

                // Perform the GET request
                Response response = given()
                .pathParam("laureateID", map.get("laureateID"))
                .when()
                .get("/laureate/{laureateID}") 
                .then()
                .contentType(ContentType.JSON)
                .extract().response();   

                // Validate the response based on the HTTP Status code
                int statusCode = response.getStatusCode();
                String responseBody = response.getBody().asString();

                // Assertions based on status code
                switch(statusCode) {
                    case 200:
                        assertTrue(responseBody.length() > 0);
                        break;
                    case 400:
                    case 404:
                    case 422:
                        assertTrue(response.path("code") instanceof String);
                        assertTrue(response.path("message") instanceof String);
                        break;
                    default:
                        fail("Unexpected status code received: " + statusCode);
                        break;
                }

            }  
        } catch (IOException e) {  
            fail("Exception during reading CSV file: " + e.getMessage());  
        }  
    }  
}
