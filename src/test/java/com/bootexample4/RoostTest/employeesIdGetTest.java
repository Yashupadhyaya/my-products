// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /employees/{id}_get for http method type GET in rest-assured framework

RoostTestHash=36bc161fb6


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;

public class employeesIdGetTest {

  List<Map<String, String>> envList = new ArrayList<>();

  @Before
  public void setUp() {
    TestdataLoader dataloader = new TestdataLoader();
    String[] envVarsList = { "id" };
    envList = dataloader.load("src/test/java/com/bootexample4/RoostTest/employees_idGetTest.csv", envVarsList);
  }

  @Test
  public void employeesIdGet_Test() {
    this.setUp();
    for (Map<String, String> testData : envList) {
      RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty())
          ? testData.get("BASE_URL")
          : "https://virtserver.swaggerhub.com/061REB413/employee-service/0.1";

      Response responseObj = given()
          .pathParam("id", testData.get("id") != null ? testData.get("id") : "")
          .when()
          .get("/employees/{id}")
          .then()
          .extract().response();
      JsonPath response;
      String contentType = responseObj.getContentType();
      if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
        String xmlResponse = responseObj.asString();
        JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
        JSONObject jsonData = jsonResponse.getJSONObject("xml");
        String jsonString = jsonData.toString();
        response = new JsonPath(jsonString);

      } else {
        response = responseObj.jsonPath();
      }

      if (responseObj.statusCode() == 200) {
        System.out.println("Description: Successful operation");

        if (response.get("id") != null) {
          MatcherAssert.assertThat(response.get("id"), instanceOf(String.class));
        }

        if (response.get("jobTitle") != null) {
          MatcherAssert.assertThat(response.get("jobTitle"), instanceOf(String.class));
        }

        if (response.get("name") != null) {
          MatcherAssert.assertThat(response.get("name"), instanceOf(String.class));
        }

        if (response.get("email") != null) {
          MatcherAssert.assertThat(response.get("email"), instanceOf(String.class));
        }
      }
      if (responseObj.statusCode() == 404) {
        System.out.println("Description: Not found");
      }

    }
  }
}
