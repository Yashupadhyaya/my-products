// Test generated by RoostGPT for test Koreai-restassured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /GetTransactions_post for http method type POST in rest-assured framework

// RoostTestHash=207beafabe

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetTransactionsPostTest {
  
    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }
  
    @Test  
    public void GetTransactions_post_Test() {  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/GetTransactions_post.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
  
                Response response = given()
                    .headers("Authorization", map.get("Authorization"),
                            "X-Auth-token", map.get("X-Auth-token"),
                            "X-CORRELATION-ID", map.get("X-CORRELATION-ID"))
                    .contentType(ContentType.JSON)
                    .body(map)
                    .when()
                    .post("/GetTransactions")  
                    .then()
                    .statusCode(anyOf(is(200), is(400), is(404), is(422)))
                    .extract().response();    
         
                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unexpected status code: " + response.statusCode());
                }
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
            fail("Test data file could not be read");
        }  
    }

    private void validateSuccessResponse(Response response) {
        response.then()
            .body("status", equalTo("SUCCESS"))
            .body("transactions", is(not(empty())))
            .body("transactions", everyItem(hasKey("transactionId")));
    }

    private void validateErrorResponse(Response response) {
        response.then()
            .body("status", equalTo("ERROR"))
            .body("message", notNullValue());
    }

    private void validateNotFoundResponse(Response response) {
        response.then()
            .body("status", equalTo("NOT_FOUND"))
            .body("error", equalTo("Transactions not found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then()
            .body("status", equalTo("UNPROCESSABLE_ENTITY"))
            .body("errors", not(empty()));
    }
}
