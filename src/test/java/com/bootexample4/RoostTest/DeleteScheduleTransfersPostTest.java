// Test generated by RoostGPT for test Koreai-restassured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /DeleteScheduleTransfers_post for http method type POST in rest-assured framework

// RoostTestHash=47355f872f

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.*;
import java.util.*;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class DeleteScheduleTransfersPostTest {

    private static final String CSV_PATH = "src/test/java/com/bootexample4/RoostTest/DeleteScheduleTransfers_post.csv";
    private static final String BASE_URL_ENV_VARIABLE = "BASE_URL";
    
    @Test  
    public void deleteScheduleTransfersPostTest() {  
        RestAssured.baseURI = System.getenv(BASE_URL_ENV_VARIABLE);  
        HashMap<String, String> headers = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_PATH))) {  
            String[] headerKeys = reader.readLine().split(",");  

            reader.lines().forEach(line -> {
                String[] dataValues = line.split(",");
                Map<String, String> testData = new HashMap<>();
                for (int i = 0; i < headerKeys.length; i++) {
                    testData.put(headerKeys[i], dataValues[i]);
                    if (headerKeys[i].equals("koreUserId") || headerKeys[i].equals("botId") || 
                        headerKeys[i].equals("userCode") || headerKeys[i].equals("accountId") || 
                        headerKeys[i].equals("Authorization")) {
                        headers.put(headerKeys[i], dataValues[i]);
                    }
                }

                Response response = given()
                                    .headers(headers)
                                    .contentType(ContentType.JSON)
                                    .body(new File("src/test/java/com/bootexample4/RoostTest/DeleteScheduleTransferRequest.json"))
                                    .when()
                                    .post("/DeleteScheduleTransfers")
                                    .then()
                                    .extract().response();

                validateResponse(response);
            });

        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                System.out.println("Description: Scheduled transfer deleted successfully");
                // Additional validation logics as necessary
                break;
            case 401:
                System.out.println("Description: Error: Authorization failed.");
                assertThat(response.path("err.message"), is(notNullValue()));
                break;
            case 404:
                System.out.println("Description: Error: Not Found");
                assertThat(response.path("err.message"), is(notNullValue()));
                break;
            default:
                fail("Received unexpected HTTP status code: " + statusCode);
        }
    }
}

