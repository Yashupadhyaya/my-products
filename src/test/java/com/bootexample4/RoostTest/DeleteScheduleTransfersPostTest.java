// Test generated by RoostGPT for test Koreai-restassured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /DeleteScheduleTransfers_post for http method type POST in rest-assured framework

// RoostTestHash=47355f872f

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class DeleteScheduleTransfersPostTest {

    private static final String CSV_FILE_PATH = "src/test/java/com/bootexample4/RoostTest/DeleteScheduleTransfers_post.csv";
    private static final String ENDPOINT = "/DeleteScheduleTransfers";

    @Before
    public void setUp() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void deleteScheduleTransfersPostTest() {
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> dataMap = createDataMap(headers, data);

                Response response = given()
                        .pathParams(createPathParamsMap(dataMap))
                        .header("Authorization", dataMap.get("Authorization"))
                        .contentType(ContentType.JSON)
                        .body(createRequestBody(dataMap))
                        .when()
                        .post(ENDPOINT)
                        .then()
                        .extract().response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> createDataMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Map<String, Object> createPathParamsMap(Map<String, String> dataMap) {
        Map<String, Object> pathParams = new HashMap<>();
        pathParams.put("koreUserId", dataMap.get("koreUserId"));
        pathParams.put("botId", dataMap.get("botId"));
        pathParams.put("userCode", dataMap.get("userCode"));
        pathParams.put("accountId", dataMap.get("accountId"));
        return pathParams;
    }

    private String createRequestBody(Map<String, String> dataMap) {
        return String.format("{\n" +
                "  \"paymentId\": \"%s\",\n" +
                "  \"updateTransferType\": \"%s\",\n" +
                "  \"customerId\": \"%s\"\n" +
                "}", dataMap.get("paymentId"), dataMap.get("updateTransferType"), dataMap.get("customerId"));
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                validateErrorResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
            default:
                fail("Unexpected status code: " + statusCode);
        }
    }

    private void validateSuccessResponse(Response response) {
        System.out.println("Description: Scheduled transfer deleted successfully");
        // Additional success response validations can be performed here.
    }

    private void validateErrorResponse(Response response) {
        System.out.println("Description: Error: Bad Request");
        // Validate specific error structure and messages.
        response.then().body("err.message", instanceOf(String.class));
    }

    private void validateNotFoundResponse(Response response) {
        System.out.println("Description: Error: Not Found");
        // Validate not found response structure and messages.
        response.then().body("err.message", instanceOf(String.class));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        System.out.println("Description: Error: Unprocessable Entity");
        // Validate unprocessable entity response structure and messages.
        response.then().body("err.message", instanceOf(String.class));
    }
}
