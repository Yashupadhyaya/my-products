// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /order-service/orders/onboarding_post for http method type POST in rest-assured framework

RoostTestHash=2762b233e6


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class onboardingPostTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/onboardingPostTest.csv");
    }

  
    @Test  
    public void onboardingPost_Test() {
        this.setUp();
        for (Map<String, String> map : envList) {
          RestAssured.baseURI = map.get("BASE_URL");  
  
                Response response = given()
				.pathParam("channel", map.get("channel") != null ? map.get("channel") : "")
				.pathParam("X-Trace-Id", map.get("X-Trace-Id") != null ? map.get("X-Trace-Id") : "")
				.pathParam("username", map.get("username") != null ? map.get("username") : "")
                .when()
                .post("/order-service/orders/onboarding")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 201) {
					System.out.println("Description: Created");
      
              if (response.jsonPath().get("orderId") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("orderId"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("requestId") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("requestId"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad Request");
      
              if (response.jsonPath().get("code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 401) {
					System.out.println("Description: Unauthorized");
      
              if (response.jsonPath().get("code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 403) {
					System.out.println("Description: Forbidden");
      
              if (response.jsonPath().get("code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 405) {
					System.out.println("Description: Method Not allowed");
      
              if (response.jsonPath().get("code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 409) {
					System.out.println("Description: Conflict");
      
              if (response.jsonPath().get("code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 422) {
					System.out.println("Description: Unprocessable Entity");
      
              if (response.jsonPath().get("code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("code"), anyOf(equalTo("601"), equalTo("602"), equalTo("603"), equalTo("604"), equalTo("605"), equalTo("606"), equalTo("607"), equalTo("608"), equalTo("424")));
  
          }
      
              if (response.jsonPath().get("message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
				}
if (response.statusCode() == 500) {
					System.out.println("Description: Internal Server Error");
      
              if (response.jsonPath().get("code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("code"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("message"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("status"), instanceOf(String.class));  
          }
				}
  
            }  
    }
}
