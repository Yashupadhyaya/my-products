/*
Test generated by RoostGPT for test testing-integration-test using AI Type Open AI and AI Model gpt-4

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\n' +
    '    Then create an account with the specified informatio\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;
import io.restassured.http.ContentType;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import org.json.JSONObject;

public class scenario587f2627bdTest {

    @Test
    public void testCreateMyAccount() {
        // Reading payload file
        try (BufferedReader br = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/scenario-587f2627bd-Test.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Start reading from the second line
                if (!line.startsWith("METHOD")) {
                    String[] data = line.split("\\^\\|\\^");
                    String method = data[0];
                    String url = data[1];
                    HashMap<String, String> headers = new JSONObject(data[2]).toMap();
                    JSONObject body = new JSONObject(data[3]);
                    int responseCode = Integer.parseInt(data[4]);
                    JSONObject responseBody = new JSONObject(data[5]);

                    // Test scenario: Create my account
                    if (url.endsWith("/accounts")) {
                        given()
                            .header("Content-Type", ContentType.JSON)
                            .headers(headers)
                            .body(body.toString())
                        .when()
                            .post(url)
                        .then()
                            .statusCode(responseCode)
                            .body("api-version", equalTo(responseBody.getString("api-version")))
                            .body("commit-hash", equalTo(responseBody.getString("commit-hash")));
                    }

                    // Test scenario: Verify the account created
                    if (url.endsWith("/me")) {
                        given()
                            .header("Content-Type", ContentType.JSON)
                            .headers(headers)
                        .when()
                            .get(url)
                        .then()
                            .statusCode(responseCode)
                            .body("id", equalTo(responseBody.getString("id")))
                            .body("email", equalTo(responseBody.getString("email")))
                            .body("api-version", equalTo(responseBody.getString("api-version")));
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
