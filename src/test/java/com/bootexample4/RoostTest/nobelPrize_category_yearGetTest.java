// Test generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

// RoostTestHash=adfce3f1d2

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.Test;

public class nobelPrize_category_yearGetTest {
  
    @Test  
    public void nobelPrize_category_year_get_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  

        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("nobelPrize_category_year_get.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  

            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  

                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  

                // Get path parameters
                String category = map.get("category");
                String year = map.get("year");

                // Send GET request
                Response response = given().pathParam("category", category).pathParam("year", year)
                                .when().get("/nobelPrize/{category}/{year}").then().extract().response();

                JsonPath jsonPathEvaluator = response.jsonPath();

                if (response.statusCode() == 200) {

                    // Validation of response
                    validateResponse(jsonPathEvaluator);
            
                } else if (response.statusCode() == 400 || response.statusCode() == 404 || response.statusCode() == 422) {

                    // Validation of error
                    MatcherAssert.assertThat(jsonPathEvaluator.getString("code"), instanceOf(String.class));
                    MatcherAssert.assertThat(jsonPathEvaluator.getString("message"), instanceOf(String.class));

                } else {
                    fail("Unexpected status code: " + response.statusCode());
                }
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private void validateResponse(JsonPath jsonPathEvaluator) {
      
        // Here you can add the validations for the response based on the JsonPath evaluator
        // E.g., 
        MatcherAssert.assertThat(jsonPathEvaluator.getInt("nobelPrize.awardYear"), instanceOf(Integer.class));

        // Continue with additional assertions...
    }
}
