// Test generated by RoostGPT for test test-rest-assured using AI Type Open AI and AI Model gpt-4

// Test generated for /nobelPrize/{category}/{year}_get for http method type GET in rest-assured framework

// RoostTestHash=adfce3f1d2

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import org.testng.asserts.SoftAssert;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class nobelPrize_category_yearGetTest {
    SoftAssert softAssert = new SoftAssert();

    @Test
    public void nobelPrize_category_year_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/nobelPrize_category_year_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .contentType(ContentType.JSON)
                        .pathParam("category", map.get("category"))
                        .pathParam("year", map.get("year"))
                        .when()
                        .get("/nobelPrize/{category}/{year}")
                        .then()
                        .extract()
                        .response();

                int statusCode = response.statusCode();

                switch (statusCode) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        softAssert.fail("Invalid Status Code: " + statusCode);
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        softAssert.assertAll();
    }

    private void validateSuccessResponse(Response response) {
        // Asserts for success response (status code 200)
        // Add your assertions here
        softAssert.assertEquals(response.jsonPath().get("nobelPrize.awardYear"), 2021, "Award year is not as expected");
        // Add more assertions as per your response structure
    }

    private void validateErrorResponse(Response response) {
        // Asserts for error response (status code 400)
        // Add your assertions here
        softAssert.assertEquals(response.jsonPath().get("code"), "400", "Error code is not as expected");
        // Add more assertions as per your response structure
    }

    private void validateNotFoundResponse(Response response) {
        // Asserts for not found response (status code 404)
        // Add your assertions here
        softAssert.assertEquals(response.jsonPath().get("code"), "404", "Error code is not as expected");
        // Add more assertions as per your response structure
    }

    private void validateUnprocessableEntityResponse(Response response) {
        // Asserts for unprocessable entity response (status code 422)
        // Add your assertions here
        softAssert.assertEquals(response.jsonPath().get("code"), "422", "Error code is not as expected");
        // Add more assertions as per your response structure
    }
}
