// Test generated by RoostGPT for test credentialwallet-rest-assured using AI Type Open AI and AI Model gpt-4-1106-preview


// Test generated for /login_post for http method type POST in rest-assured framework


// RoostTestHash=3122292ee3


package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class loginPostTest {

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void login_post_Test() {
        String csvFilePath = "src/test/java/com/bootexample4/RoostTest/login_post.csv";
        try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> loginDetails = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    loginDetails.put(headers[i], data[i]);
                }

                Response response = given()
                        .contentType(ContentType.JSON)
                        .body(loginDetails)
                        .when()
                        .post("/login")
                        .then()
                        .extract().response();

                switch (response.statusCode()) {
                    case 201:
                        System.out.println("Description: successful operation");
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        System.out.println("Description: Bad Request");
                        validateErrorResponse(response);
                        break;
                    case 404:
                        System.out.println("Description: Not Found");
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        System.out.println("Description: Unprocessable Entity");
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Test failed due to an IOException: " + e.getMessage());
        }
    }

    private void validateSuccessResponse(Response response) {
        response.then().statusCode(201);
        String token = response.jsonPath().get("token");
        assertNotNull("Token should not be null", token);
        assertThat("Token should be a String", token, instanceOf(String.class));
    }

    private void validateErrorResponse(Response response) {
        response.then().statusCode(400);
        String errorMessage = response.jsonPath().get("error");
        assertNotNull("Error message should not be null", errorMessage);
        assertThat("Error message should be a String", errorMessage, instanceOf(String.class));
    }

    private void validateNotFoundResponse(Response response) {
        response.then().statusCode(404);
        String notFoundMessage = response.jsonPath().get("message");
        assertNotNull("Not Found message should not be null", notFoundMessage);
        assertThat("Not Found message should be a String", notFoundMessage, instanceOf(String.class));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then().statusCode(422);
        String validationError = response.jsonPath().get("validation_error");
        assertNotNull("Validation error should not be null", validationError);
        assertThat("Validation error should be a String", validationError, instanceOf(String.class));
    }
}
