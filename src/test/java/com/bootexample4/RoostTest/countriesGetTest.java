// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /countries_get for http method type GET in rest-assured framework

RoostTestHash=a284482418


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class countriesGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/countriesGetTest.csv");
    }

  
    @Test  
    public void countriesGet_Test() {
        this.setUp();
        for (Map<String, String> map : envList) {
          RestAssured.baseURI = map.get("BASE_URL");  
  
                Response response = given()
				.pathParam("start", map.get("start") != null ? map.get("start") : "")
				.pathParam("max", map.get("max") != null ? map.get("max") : "")
                .when()
                .get("/countries")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: successful operation");
      
              if (response.jsonPath().get("id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(Integer.class));  
          }
      
              if (response.jsonPath().get("version") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("version"), instanceOf(Integer.class));  
          }
      
              if (response.jsonPath().get("isoCode") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("isoCode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("isoCode").length(), lessThanOrEqualTo(2));
  
                MatcherAssert.assertThat(response.jsonPath().getString("isoCode").length(), greaterThanOrEqualTo(2));
  
          }
      
              if (response.jsonPath().get("name") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("name"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("name").length(), lessThanOrEqualTo(80));
  
                MatcherAssert.assertThat(response.jsonPath().getString("name").length(), greaterThanOrEqualTo(2));
  
          }
      
              if (response.jsonPath().get("printableName") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("printableName"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("printableName").length(), lessThanOrEqualTo(80));
  
                MatcherAssert.assertThat(response.jsonPath().getString("printableName").length(), greaterThanOrEqualTo(2));
  
          }
      
              if (response.jsonPath().get("iso3") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("iso3"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("iso3").length(), lessThanOrEqualTo(3));
  
                MatcherAssert.assertThat(response.jsonPath().getString("iso3").length(), greaterThanOrEqualTo(3));
  
          }
      
              if (response.jsonPath().get("numcode") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("numcode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("numcode").length(), lessThanOrEqualTo(3));
  
                MatcherAssert.assertThat(response.jsonPath().getString("numcode").length(), greaterThanOrEqualTo(3));
  
          }
				}
  
            }  
    }
}
