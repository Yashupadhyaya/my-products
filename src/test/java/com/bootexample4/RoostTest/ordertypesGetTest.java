// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /order-report/meta-data/order-types_get for http method type GET in rest-assured framework

RoostTestHash=db4c2c220b


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;

public class ordertypesGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/order-typesGetTest.csv");
    }

  
    @Test  
    public void ordertypesGet_Test() {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = "https:/serverRoot/com/";  
  
                Response response = given()
				.pathParam("X-Trace-Id", testData.get("X-Trace-Id") != null ? testData.get("X-Trace-Id") : "")
				.pathParam("channel", testData.get("channel") != null ? testData.get("channel") : "")
				.pathParam("username", testData.get("username") != null ? testData.get("username") : "")
                .when()
                .get("/order-report/meta-data/order-types")  
                .then() 
                .extract().response(); 
              JSONObject jsonData = null;
              String contentType = response.getContentType();
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                System.out.println("XML content type detected");
                String xmlResponse = response.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                jsonData = jsonResponse.getJSONObject("xml");
        
              } else {
                String jsonString = response.getBody().asString();
                jsonData = new JSONObject(jsonString);
              }
         
                if (response.statusCode() == 200) {
					System.out.println("Description: Success");
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad Request");
				}
if (response.statusCode() == 401) {
					System.out.println("Description: Unauthorized");
				}
if (response.statusCode() == 403) {
					System.out.println("Description: Forbidden");
				}
if (response.statusCode() == 404) {
					System.out.println("Description: Not Found");
				}
if (response.statusCode() == 405) {
					System.out.println("Description: Method Not allowed");
				}
if (response.statusCode() == 409) {
					System.out.println("Description: Conflict");
				}
if (response.statusCode() == 500) {
					System.out.println("Description: Internal Server Error");
				}
  
            }  
    }
}
