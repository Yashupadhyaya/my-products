// ********RoostGPT********
/*
Test generated by RoostGPT for test test-restassured using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /country/{id}_get for http method type GET in rest-assured framework

RoostTestHash=88c8ebb498


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.json.JSONObject;
import org.json.XML;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class CountryIdGetTest {

    private List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        String[] envVarsList = {"id"};
        envList = dataloader.load(
                "src/test/java/com/bootexample4/RoostTest/country_idGetTest.csv", envVarsList);
    }

    @Test
    public void countryIdGet_Test() {
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
            RestAssured.baseURI = testData.getOrDefault("url1_country2_BASE_URL", "http://api.example.com/v1");

            Response responseObj = given()
                    .header("app-identifier", testData.getOrDefault("app-identifier", ""))
                    .header("customer-secret-key", testData.getOrDefault("customer-secret-key", ""))
                    .pathParam("id", testData.get("id"))
                    .when()
                    .get("/country/{id}")
                    .then()
                    .extract().response();

            System.out.printf("Test Case %d: countryIdGet_Test%n", testNumber++);
            System.out.println("Request: GET /country/{id}");
            System.out.println("Status Code: " + responseObj.statusCode());

            validateStatusCode(responseObj, testData);
            validateResponseContentType(responseObj.getContentType());

            if (isJsonOrXmlResponse(responseObj)) {
                JsonPath response = extractResponse(responseObj);
                handleStatus200(responseObj, response);
            }
        }
    }

    private void validateStatusCode(Response responseObj, Map<String, String> testData) {
        if (testData.get("statusCode") != null) {
            String expectedStatusCode = testData.get("statusCode");
            if (expectedStatusCode.contains("X")) {
                assertThat(
                        "Expected status code category " + expectedStatusCode + ", but got " + responseObj.statusCode(),
                        Integer.toString(responseObj.statusCode()).charAt(0), equalTo(expectedStatusCode.charAt(0)));
            } else {
                assertThat(String.valueOf(responseObj.statusCode()), equalTo(expectedStatusCode));
            }
        } else {
            List<Integer> expectedStatusCodes = Arrays.asList(200);
            assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
        }
    }

    private void validateResponseContentType(String contentType) {
        assertThat(
            "Unexpected Content-Type: " + contentType,
            contentType,
            anyOf(containsString("application/json"), containsString("application/xml"), containsString("text/xml"))
        );
    }

    private boolean isJsonOrXmlResponse(Response responseObj) {
        String contentType = responseObj.getContentType();
        return contentType.contains("application/json") || contentType.contains("application/xml") || contentType.contains("text/xml");
    }

    private JsonPath extractResponse(Response responseObj) {
        String contentType = responseObj.getContentType();
        if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
            String xmlResponse = responseObj.asString();
            JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
            return JsonPath.from(jsonResponse.toString());
        } else if (contentType.contains("application/json")) {
            return responseObj.jsonPath();
        }
        throw new UnsupportedOperationException(
                "Unsupported response content type: " + contentType);
    }

    private void handleStatus200(Response responseObj, JsonPath response) {
        if (responseObj.statusCode() == 200) {
            assertThat(responseObj.getContentType(), equalTo("application/json"));
            System.out.println("Description: Success");

            validateJsonKeys(response, "status", String.class);
            validateJsonKeys(response, "message", String.class);
            validateJsonKeys(response, "error_info", String.class);
        }
    }

    private void validateJsonKeys(JsonPath response, String key, Class<?> expectedType) {
        if (response.get(key) != null) {
            assertThat("Expected key '" + key + "' to be of type " + expectedType.getSimpleName(),
                    response.get(key), instanceOf(expectedType));
        }
    }

    private void validateErrorResponse(Response responseObj) {
        // Validation logic for 400 error response
        assertThat("Expected 400 Bad Request", responseObj.statusCode(), equalTo(400));
        JsonPath jsonPath = responseObj.jsonPath();
        assertThat(jsonPath.getString("error"), is(notNullValue()));
    }

    private void validateNotFoundResponse(Response responseObj) {
        // Validation logic for 404 Not Found response
        assertThat("Expected 404 Not Found", responseObj.statusCode(), equalTo(404));
        JsonPath jsonPath = responseObj.jsonPath();
        assertThat(jsonPath.getString("message"), containsString("not found"));
    }

    private void validateUnprocessableEntityResponse(Response responseObj) {
        // Validation logic for 422 Unprocessable Entity response
        assertThat("Expected 422 Unprocessable Entity", responseObj.statusCode(), equalTo(422));
        JsonPath jsonPath = responseObj.jsonPath();
        assertThat(jsonPath.getString("detail"), containsString("Invalid"));
    }
}
