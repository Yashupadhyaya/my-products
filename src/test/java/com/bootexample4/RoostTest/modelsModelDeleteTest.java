// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /models/{model}_delete for http method type DELETE in rest-assured framework

RoostTestHash=25f60041aa


*/

// ********RoostGPT********

package com.bootexample4.RoostTest;

// import TestdataLoader class if it's not in the same package
// import com.somepackage.TestdataLoader;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach; // changed from @Before to @BeforeEach from JUnit 5
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.*; // changed from org.junit.Assert.* to org.junit.jupiter.api.Assertions.*
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class modelsModelDeleteTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @BeforeEach // changed from @Before to @BeforeEach from JUnit 5
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/models_modelDeleteTest.csv"); // ensure the csv file is at this path
    }

  
    @Test  
    public void modelsModelDelete_Test() {
        // removed the manual call to setUp()
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = "https://api.openai.com/v1";  
  
          Response response = given()
				.pathParam("model", testData.get("model") != null ? testData.get("model") : "")
				.header("api_key", testData.get("api_key"))
                .when()
                .delete("/models/{model}")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: OK");
      
              if (response.jsonPath().get("id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("deleted") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("deleted"), instanceOf(Boolean.class));  
          }
      
              if (response.jsonPath().get("object") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("object"), instanceOf(String.class));  
          }
				}
  
            }  
    }
}
