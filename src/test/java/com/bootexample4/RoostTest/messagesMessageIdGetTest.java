// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /threads/{thread_id}/messages/{message_id}_get for http method type GET in rest-assured framework

RoostTestHash=318e33cc23


*/

// ********RoostGPT********

package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class messagesMessageIdGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @BeforeEach   //Changed from @Before to @BeforeEach as we are using Junit 5
    public void setUp() {
      //Ensure that TestdataLoader class and loadData method are properly defined and imported
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/messages_message_idGetTest.csv");
    }

  
    @Test  
    public void messagesMessageIdGet_Test() {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = "https://api.openai.com/v1";  
  
                Response response = given()
				.pathParam("thread_id", testData.get("thread_id") != null ? testData.get("thread_id") : "")
				.pathParam("message_id", testData.get("message_id") != null ? testData.get("message_id") : "")
				.header("api_key", testData.get("api_key"))
                .when()
                .get("/threads/{thread_id}/messages/{message_id}")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: OK");
      
              if (response.jsonPath().get("id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("object") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("object"), instanceOf(String.class));  
                //Ensure that equalTo method is properly imported
                MatcherAssert.assertThat(response.jsonPath().getString("object"), anyOf(equalTo("thread.message")));
  
          }
      
              if (response.jsonPath().get("created_at") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("created_at"), instanceOf(Integer.class));  
          }
      
              if (response.jsonPath().get("thread_id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("thread_id"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("role") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("role"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("role"), anyOf(equalTo("user"), equalTo("assistant")));
  
          }
      
              if (response.jsonPath().get("content") != null) {      
                for (int i = 0; i < response.jsonPath().getList("content").size(); i++) {      
                  }    
                //Ensure that getList method is properly imported and "content" is a List
                MatcherAssert.assertThat(response.jsonPath().getList("content"), instanceOf(List.class));
  
          }
      
              if (response.jsonPath().get("assistant_id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("assistant_id"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("run_id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("run_id"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("file_ids") != null) {      
                for (int i = 0; i < response.jsonPath().getList("file_ids").size(); i++) {      
                  }    
                //Ensure that getList method is properly imported and "file_ids" is a List
                MatcherAssert.assertThat(response.jsonPath().getList("file_ids"), instanceOf(List.class));
  
          }
      
              if (response.jsonPath().get("metadata") != null) {  
          }
				}
  
            }  
    }
}
