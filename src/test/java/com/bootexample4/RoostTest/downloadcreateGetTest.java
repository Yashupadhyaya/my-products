// ********RoostGPT********
/*
Test generated by RoostGPT for test test-postman1 using AI Type Open AI and AI Model gpt-4-1106-preview

Test generated for /order-report/orders/download-create_get for http method type GET in rest-assured framework

RoostTestHash=f47bc38f0a


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class downloadcreateGetTest {
  
    @Test  
    public void downloadcreateGet_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src" + File.separator + "test" + File.separator + "java" + File.separator + "com" + File.separator + "bootexample4" + File.separator + "RoostTest" + File.separator + "download-createGetTest.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
  
                Response response = given()
				.pathParam("X-Trace-Id", map.get("X-Trace-Id") != null ? map.get("X-Trace-Id") : "")
				.pathParam("channel", map.get("channel") != null ? map.get("channel") : "")
				.pathParam("fromDate", map.get("fromDate") != null ? map.get("fromDate") : "")
				.pathParam("toDate", map.get("toDate") != null ? map.get("toDate") : "")
                .when()
                .get("/order-report/orders/download-create")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 201) {
					System.out.println("Description: Created");
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad Request");
				}
if (response.statusCode() == 401) {
					System.out.println("Description: Unauthorized");
				}
if (response.statusCode() == 403) {
					System.out.println("Description: Forbidden");
				}
if (response.statusCode() == 404) {
					System.out.println("Description: Not Found");
				}
if (response.statusCode() == 405) {
					System.out.println("Description: Method Not allowed");
				}
if (response.statusCode() == 409) {
					System.out.println("Description: Conflict");
				}
if (response.statusCode() == 500) {
					System.out.println("Description: Internal Server Error");
				}
  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
}
