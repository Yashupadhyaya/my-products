// ********RoostGPT********
/*
Test generated by RoostGPT for test testingartillerytest using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /nobelPrizes_get for http method type GET in rest-assured framework

RoostTestHash=69dc005d06

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Test a valid request with proper query parameters",
    "Execution": {
      "Arrange": "Prepare valid query params: offset=1, limit=10, sort=asc, nobelPrizeYear=2021, nobelPrizeCategory=phy, format=json",
      "Act": "Send GET request to /2.1/nobelPrizes with provided query parameters",
      "Assert": "Check for status code 200 and validate JSON response containing list of Nobel Prizes"
    },
    "Validation": "Ensures API successfully returns the correct response when provided valid parameters"
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingOptionalQueryParamsReturns200",
    "Description": "Test request with no optional query parameters",
    "Execution": {
      "Arrange": "Do not provide any query parameters",
      "Act": "Send GET request to /2.1/nobelPrizes",
      "Assert": "Check for status code 200 and validate the response contains default pagination results"
    },
    "Validation": "Validates API behavior when optional parameters are excluded"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidOffsetParamReturns400",
    "Description": "Test request with an invalid offset value (negative)",
    "Execution": {
      "Arrange": "Prepare query param: offset=-5",
      "Act": "Send GET request to /2.1/nobelPrizes with invalid offset",
      "Assert": "Check for status code 400 and error message indicating invalid offset parameter"
    },
    "Validation": "Ensures API returns an error for invalid offset input"
  },
  {
    "ScenarioID": "4",
    "TestName": "testInvalidLimitParamReturns400",
    "Description": "Test request with an invalid limit value (zero)",
    "Execution": {
      "Arrange": "Prepare query param: limit=0",
      "Act": "Send GET request to /2.1/nobelPrizes with invalid limit",
      "Assert": "Check for status code 400 and error message indicating invalid limit parameter"
    },
    "Validation": "Ensures API handles invalid limit parameter correctly"
  },
  {
    "ScenarioID": "5",
    "TestName": "testInvalidSortOrderReturns400",
    "Description": "Test request with an invalid sort parameter value",
    "Execution": {
      "Arrange": "Prepare query param: sort=randomString",
      "Act": "Send GET request to /2.1/nobelPrizes with invalid sort value",
      "Assert": "Check for status code 400 and error message indicating invalid sort parameter"
    },
    "Validation": "Ensures API validates enum values for sort parameter"
  },
  {
    "ScenarioID": "6",
    "TestName": "testMissingRequiredParamYearToWithNobelPrizeYearReturns400",
    "Description": "Test request with yearTo parameter but missing required nobelPrizeYear parameter",
    "Execution": {
      "Arrange": "Prepare query param: yearTo=2005 without providing nobelPrizeYear",
      "Act": "Send GET request to /2.1/nobelPrizes",
      "Assert": "Check for status code 400 and error message indicating missing nobelPrizeYear parameter"
    },
    "Validation": "Ensures yearTo parameter requires nobelPrizeYear to be provided"
  },
  {
    "ScenarioID": "7",
    "TestName": "testInvalidYearRangeReturns422",
    "Description": "Test request with a nobelPrizeYear greater than yearTo",
    "Execution": {
      "Arrange": "Prepare query params: nobelPrizeYear=2020, yearTo=2019",
      "Act": "Send GET request to /2.1/nobelPrizes",
      "Assert": "Check for status code 422 and error message indicating invalid year range"
    },
    "Validation": "Ensures the API returns an error for invalid year ranges"
  },
  {
    "ScenarioID": "8",
    "TestName": "testInvalidNobelPrizeCategoryReturns400",
    "Description": "Test request with an invalid nobelPrizeCategory parameter",
    "Execution": {
      "Arrange": "Prepare query param: nobelPrizeCategory=randomCategory",
      "Act": "Send GET request to /2.1/nobelPrizes",
      "Assert": "Check for status code 400 and error message indicating invalid nobelPrizeCategory parameter"
    },
    "Validation": "Ensures API validates enum values for nobelPrizeCategory parameter"
  },
  {
    "ScenarioID": "9",
    "TestName": "testValidCsvFormatReturns200",
    "Description": "Test request with csv format and associated csvLang parameter",
    "Execution": {
      "Arrange": "Prepare query params: format=csv, csvLang=se",
      "Act": "Send GET request to /2.1/nobelPrizes",
      "Assert": "Check for status code 200 and response in CSV format with Swedish language"
    },
    "Validation": "Ensures the API handles csv format and language correctly"
  },
  {
    "ScenarioID": "10",
    "TestName": "testInvalidCsvLangWithoutFormatReturns400",
    "Description": "Test request with csvLang parameter but missing format=csv",
    "Execution": {
      "Arrange": "Prepare query param: csvLang=en without format=csv",
      "Act": "Send GET request to /2.1/nobelPrizes",
      "Assert": "Check for status code 400 and error message indicating misuse of csvLang parameter"
    },
    "Validation": "Ensures csvLang cannot be used without specifying format=csv"
  },
  {
    "ScenarioID": "11",
    "TestName": "testResponseSchemaValidation",
    "Description": "Test response schema matches OpenAPI definition",
    "Execution": {
      "Arrange": "Prepare a valid request with all query parameters",
      "Act": "Send GET request to /2.1/nobelPrizes",
      "Assert": "Validate response against OpenAPI schema definition"
    },
    "Validation": "Ensures response matches API schema"
  }
]

*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class NobelPrizesGetTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/com/bootexample4/RoostTest/nobelPrizesGetTest.JSON");
    }


    @Test
    public void NobelPrizesGet_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "http://api.nobelprize.org/2.1";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/nobelPrizes";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "nobel.json";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("get".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "get");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: NobelPrizesGet_Test\n", testNumber++);
            System.out.println("Request: GET " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
