// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /customers/{id}_get for http method type GET in rest-assured framework

RoostTestHash=adad3d1e7b


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;

public class customersIdGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/customers_idGetTest.csv");
    }

  
    @Test  
    public void customersIdGet_Test() {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = "http://localhost:8080/applicationPetstore/rest";  
  
                Response response = given()
				.pathParam("id", testData.get("id") != null ? testData.get("id") : "")
                .when()
                .get("/customers/{id}")  
                .then() 
                .extract().response(); 
              JSONObject jsonData = null;
              JsonPath jsonPath;
              String contentType = response.getContentType();
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = response.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                jsonPath = new JsonPath(jsonString);
        
              } else {
                jsonPath = response.jsonPath();
              }
         
                if (response.statusCode() == default) {
					System.out.println("Description: successful operation");
				}
  
            }  
    }
}
