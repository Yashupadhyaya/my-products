// Test generated by RoostGPT for test Koreai-restassured using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /UpdateCustomerInfo_put for http method type PUT in rest-assured framework

// RoostTestHash=89ddb90785

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.assertThat;

public class UpdateCustomerInfoPutTest {

    private static final String BASE_URL = System.getenv("BASE_URL");

    @Before
    public void setUp() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void updateCustomerInfoPutTest() {
        String csvFilePath = "src/test/java/com/bootexample4/RoostTest/UpdateCustomerInfo_put.csv";

        try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> customerData = populateDataMap(headers, line.split(","));

                Response response = given()
                        .headers(getHeaders(customerData))
                        .contentType(ContentType.JSON)
                        .body(createRequestBody(customerData))
                        .when()
                        .put("/UpdateCustomerInfo")
                        .then()
                        .extract()
                        .response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> populateDataMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Map<String, Object> getHeaders(Map<String, String> customerData) {
        Map<String, Object> headers = new HashMap<>();
        headers.put("Authorization", customerData.get("Authorization"));
        headers.put("X-Auth-token", customerData.get("X-Auth-token"));
        headers.put("X-CORRELATION-ID", customerData.get("X-CORRELATION-ID"));
        return headers;
    }

    private String createRequestBody(Map<String, String> customerData) {
        return "{\n" +
                "  \"customerId\": \"" + customerData.get("customerId") + "\",\n" +
                "  \"email\": \"" + customerData.get("email") + "\",\n" +
                "  \"alternatePhoneNumber\": \"" + customerData.get("alternatePhoneNumber") + "\",\n" +
                "  \"isAlternateMobileNumber\": \"" + customerData.get("isAlternateMobileNumber") + "\",\n" +
                "  \"phone\": \"" + customerData.get("phone") + "\",\n" +
                "  \"isPrimaryMobileNumber\": \"" + customerData.get("isPrimaryMobileNumber") + "\",\n" +
                "  \"location\": \"" + customerData.get("location") + "\"\n" +
                "}";
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                assertThat("Description: successful operation", response.statusCode(), equalTo(200));
                break;
            case 400:
                validateErrorResponse(response, "Error: Bad Request");
                break;
            case 401:
                validateErrorResponse(response, "Error: Authorization failed");
                break;
            case 404:
                validateNotFoundResponse(response, "Error: Not Found");
                break;
            case 422:
                validateUnprocessableEntityResponse(response, "Error: Unprocessable Entity");
                break;
            default:
                fail("Unexpected status code: " + statusCode);
        }
    }

    private void validateErrorResponse(Response response, String message) {
        assertThat(message, response.statusCode(), equalTo(400));
        assertThat("Error message should not be null", response.jsonPath().get("err.message"), notNullValue());
    }

    private void validateNotFoundResponse(Response response, String message) {
        assertThat(message, response.statusCode(), equalTo(404));
        assertThat("Error message should not be null", response.jsonPath().get("err.message"), notNullValue());
    }

    private void validateUnprocessableEntityResponse(Response response, String message) {
        assertThat(message, response.statusCode(), equalTo(422));
        assertThat("Error message should not be null", response.jsonPath().get("err.message"), notNullValue());
    }
}
