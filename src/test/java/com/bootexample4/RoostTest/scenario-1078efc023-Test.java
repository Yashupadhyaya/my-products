/*
Test generated by RoostGPT for test testing-integration-test using AI Type Open AI and AI Model gpt-4

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Delete authorization\n' +
    '    Given authorization ID\n' +
    '    When the client sends a DELETE request to "/authorizations/ID"\n' +
    '    Then the response status code should be 200 for a successful delete\n' +
    '    And the authorizations should not appear in GET request for "/authorizations"',
  title: 'Delete authorization'
}

*/
package com.bootexample4.RoostTest;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

import org.junit.jupiter.api.Test;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

public class DeleteAuthorizationTest {
    
    @Test
    public void deleteAuthorizationTest() {
        // Given authorization ID
        String authorizationId = "someId";

        // When the client sends a DELETE request to "/authorizations/ID"
        given()
            .baseUri(System.getenv("API_HOST"))
            .contentType(ContentType.JSON)
            .pathParam("ID", authorizationId)
        .when()
            .delete("/authorizations/{ID}")
        .then()
            // Then the response status code should be 200 for a successful delete
            .statusCode(200)
            .body("message", equalTo("Authorization deleted successfully"));

        // And the authorizations should not appear in GET request for "/authorizations"
        Response response = 
        given()
            .baseUri(System.getenv("API_HOST"))
            .contentType(ContentType.JSON)
        .when()
            .get("/authorizations")
        .then()
            .extract()
            .response();
        
        // Assert that the authorization ID does not exist in the response
        response.body().jsonPath().getList("id").forEach(id -> {
            assertNotEquals(authorizationId, id);
        });
    }
}
