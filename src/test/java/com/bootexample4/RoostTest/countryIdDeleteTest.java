// ********RoostGPT********
/*
Test generated by RoostGPT for test test-restassured using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /country/{id}_delete for http method type DELETE in rest-assured framework

RoostTestHash=b8da0c1bf1


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import org.json.JSONException;
import org.json.JSONObject;
import org.json.XML;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class CountryIdDeleteTest {

    private static final String DEFAULT_BASE_URL = "http://api.example.com/v1";

    private List<Map<String, String>> envList;

    @BeforeEach
    public void setUp() {
        TestdataLoader dataLoader = new TestdataLoader();
        String[] envVars = {"id"};
        envList = dataLoader.load("src/test/java/com/bootexample4/RoostTest/country_idDeleteTest.csv", envVars);
    }

    @Test
    public void countryIdDelete_Test() throws JSONException {
        int testNumber = 1;

        for (Map<String, String> testData : envList) {
            RestAssured.baseURI = testData.getOrDefault("url1_country2_BASE_URL", DEFAULT_BASE_URL);

            Response response = executeDeleteRequest(testData);

            printTestCaseDetails(testData, response, testNumber++);
            validateResponseStatus(testData, response);
            validateResponseContent(testData, response);
        }
    }

    private Response executeDeleteRequest(Map<String, String> testData) {
        return given()
                .header("app-identifier", testData.getOrDefault("app-identifier", ""))
                .header("customer-secret-key", testData.getOrDefault("customer-secret-key", ""))
                .pathParam("id", testData.getOrDefault("id", ""))
                .when()
                .delete("/country/{id}")
                .then()
                .extract()
                .response();
    }

    private void printTestCaseDetails(Map<String, String> testData, Response response, int testNumber) {
        System.out.printf("Test Case %d: countryIdDelete_Test%n", testNumber);
        System.out.println("Request: DELETE /country/{id}");
        System.out.println("Status Code: " + response.statusCode());
    }

    private void validateResponseStatus(Map<String, String> testData, Response response) {
        int actualStatusCode = response.statusCode();

        String expectedStatusCodeRaw = testData.get("statusCode");
        if (expectedStatusCodeRaw != null && expectedStatusCodeRaw.contains("X")) {
            char expectedStatusCategory = expectedStatusCodeRaw.charAt(0);
            assertThat("Unexpected status code category.", Character.toString(actualStatusCode).charAt(0), equalTo(expectedStatusCategory));
        } else {
            int expectedStatusCode = expectedStatusCodeRaw != null ? Integer.parseInt(expectedStatusCodeRaw) : 200;
            assertThat("Unexpected status code.", actualStatusCode, equalTo(expectedStatusCode));
        }
    }

    private void validateResponseContent(Map<String, String> testData, Response response) throws JSONException {
        String contentType = response.contentType();

        if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
            JSONObject jsonData = XML.toJSONObject(response.asString()).getJSONObject("xml");
            JsonPath jsonPathResponse = new JsonPath(jsonData.toString());
            validateSuccessResponse(jsonPathResponse);
        } else if (contentType.contains("application/json")) {
            JsonPath jsonPathResponse = response.jsonPath();
            validateSuccessResponse(jsonPathResponse);
        } else {
            System.out.printf("Unsupported content type: %s%n", contentType);
        }
    }

    private void validateSuccessResponse(JsonPath response) {
        if (response.get("status") != null) {
            assertThat(response.get("status"), instanceOf(String.class));
        }
        if (response.get("message") != null) {
            assertThat(response.get("message"), instanceOf(String.class));
        }
        if (response.get("error_info") != null) {
            assertThat(response.get("error_info"), instanceOf(String.class));
        }
    }

    private void validateErrorResponse(Response response) {
        assertThat(response.statusCode(), equalTo(400));
        JsonPath jsonResponse = response.jsonPath();
        assertThat(jsonResponse.getString("error"), notNullValue());
        assertThat(jsonResponse.getString("message"), containsString("Bad Request"));
    }

    private void validateNotFoundResponse(Response response) {
        assertThat(response.statusCode(), equalTo(404));
        JsonPath jsonResponse = response.jsonPath();
        assertThat(jsonResponse.getString("error"), equalTo("Not Found"));
        assertThat(jsonResponse.getString("message"), containsString("Resource not found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.statusCode(), equalTo(422));
        JsonPath jsonResponse = response.jsonPath();
        assertThat(jsonResponse.getString("error"), equalTo("Unprocessable Entity"));
        assertThat(jsonResponse.getString("message"), containsString("Validation failed"));
    }
}
