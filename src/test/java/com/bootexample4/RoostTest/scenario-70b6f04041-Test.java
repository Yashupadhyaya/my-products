/*
Test generated by RoostGPT for test testing-integration-test using AI Type Open AI and AI Model gpt-4

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Grant authorization\n' +
    '    Given an existing account, create another account\n' +
    '    When the client sends a POST request to "/authorizations"\n' +
    '    Then grant access to your account and confirm access via GET request to "/authorizations"',
  title: 'Grant authorization'
}

*/
package com.bootexample4.RoostTest;

import org.junit.Test;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class GrantAuthorizationTest {
    
    @Test
    public void testGrantAuthorization() {

        // Given the base URL is "http://localhost:8080"
        RestAssured.baseURI = System.getenv("API_HOST");

        // Given an existing account, create another account
        String payload = "{ 'account': 'existingAccount'}";

        given()
            .body(payload)
            .contentType(ContentType.JSON)
        .when()
            .post("/accounts")
        .then()
            .assertThat()
            .statusCode(201);

        // When the client sends a POST request to "/authorizations"
        String authorizationPayload = "{ 'account': 'newAccount'}";

        given()
            .body(authorizationPayload)
            .contentType(ContentType.JSON)
        .when()
            .post("/authorizations")
        .then()
            .assertThat()
            .statusCode(201);

        // Then grant access to your account and confirm access via GET request to "/authorizations"
        given()
            .contentType(ContentType.JSON)
        .when()
            .get("/authorizations")
        .then()
            .assertThat()
            .statusCode(200)
            .body("account", equalTo("newAccount"));
    }
}
