// ********RoostGPT********
/*
Test generated by RoostGPT for test postman-test using AI Type Open AI and AI Model gpt-4

Test generated for /employees_get for http method type GET in rest-assured framework

RoostTestHash=ec231a756b


*/

// ********RoostGPT********
package org.springframework.boot.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;
import java.util.Arrays;

public class employeesGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {""};
      envList = dataloader.load("src/test/java/org/springframework/boot/RoostTest/employeesGetTest.csv", envVarsList);
    }

  
    @Test  
    public void employeesGet_Test() throws JSONException {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "https://virtserver.swaggerhub.com/061REB413/employee-service/0.1";  
  
                Response responseObj = given()
				.queryParam("searchString", testData.get("searchString") != null ? testData.get("searchString") : "")
                .when()
                .get("/employees")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();

              if (testData.get("statusCode") != null) {
                MatcherAssert.assertThat(responseObj.statusCode(),
                    equalTo(Integer.parseInt(testData.get("statusCode"))));
              }
             else{
                 List<Integer> expectedStatusCodes = Arrays.asList(200,400);
              MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
                 }
              
        switch(responseObj.statusCode()){
        
          case 200:
         
           MatcherAssert.assertThat(contentType, equalTo("application/json"));
           break;
        
    }
      
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else if(contentType.contains("application/json")){  
                response = responseObj.jsonPath(); 
              } else {
                System.out.println("Response content type found: "+contentType+", but RoostGPT currently only supports the following response content types: application/json,text/xml,application/xml");
                continue;
              }
         
                if (responseObj.statusCode() == 200) {  
            JSONArray respoJsonArray = new JSONArray(responseObj.asString());  
  
            for (int it = 0; it < respoJsonArray.length(); it++) {  
              response = new JsonPath(respoJsonArray.getJSONObject(it).toString());  
                    
              if (response.get("id") != null) {  
                MatcherAssert.assertThat(response.get("id"), instanceOf(String.class));  
          }
      
              if (response.get("jobTitle") != null) {  
                MatcherAssert.assertThat(response.get("jobTitle"), instanceOf(String.class));  
          }
      
              if (response.get("name") != null) {  
                MatcherAssert.assertThat(response.get("name"), instanceOf(String.class));  
          }
      
              if (response.get("email") != null) {  
                MatcherAssert.assertThat(response.get("email"), instanceOf(String.class));  
          }

            }  
          }
if (responseObj.statusCode() == 400) {
					System.out.println("Description: Bad input");
				}
  
            }  
    }
}
