# ********RoostGPT********

# Test generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4
# 
# Test generated for /listener/workOrderAttributeValueChangeEvent_post for http method type POST in artillery framework
# RoostTestHash=9481d96e5e
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: "listener_workOrderAttributeValueChangeEvent_post_success.csv"
    fields: ["id", "name", "timeOccurred", "timeZoneOccurred", "lifeCycleStatus", "associatedDocument", "businessUnit", "operationalPriority", "readyForTechnicalDispatch", "activityType", "category", "appointmentStart", "appointmentFinish", "bookingConfirmed", "technicianName", "addressId", "stateAbbreviation", "city", "description", "customerName", "subscriberId", "phoneNumber"]
    skipHeader: true
    delimiter: "^|^"
  environments:
    staging:
      target: "{{ $processEnvironment.API_HOST }}"
      headers:
        Authorization: "Bearer {{$processEnvironment.AUTH_TOKEN}}"

scenarios:
  - name: "workOrderAttributeValueChangeEvent API Test"
    flow:
      - log: "Starting workOrderAttributeValueChangeEvent API Test"
      - post:
          url: "/listener/workOrderAttributeValueChangeEvent"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer {{$processEnvironment.AUTH_TOKEN}}"
      - json:
            notification:
              event:
                id: "{{ id }}"
                name: "{{ name }}"
                timeOccurred: "{{ timeOccurred }}"
                timeZoneOccurred: "{{ timeZoneOccurred }}"
            workOrder:
              id: "{{ id }}"
              lifeCycleStatus: "{{ lifeCycleStatus }}"
              associatedDocument: "{{ associatedDocument }}"
              businessUnit: "{{ businessUnit }}"
              operationalPriority: "{{ operationalPriority }}"
              readyForTechnicalDispatch: "{{ readyForTechnicalDispatch }}"
              task:
                activityType: "{{ activityType }}"
                category: "{{ category }}"
              appointment:
                appointmentStart: "{{ appointmentStart }}"
                appointmentFinish: "{{ appointmentFinish }}"
                bookingConfirmed: "{{ bookingConfirmed }}"
              technician:
                name: "{{ technicianName }}"
              address:
                id: "{{ addressId }}"
                stateAbbreviation: "{{ stateAbbreviation }}"
                city: "{{ city }}"
                description: "{{ description }}"
              customer:
                name: "{{ customerName }}"
                subscriberId: "{{ subscriberId }}"
                phoneNumber: "{{ phoneNumber }}"
      - expect:
            - statusCode: 200
            - hasProperty: "control"
            - hasProperty: "control.type"
            - equals: ["control.type", "S"]
            - hasProperty: "control.message"
            - equals: ["control.message", "Ok"]
            - hasProperty: "control.code"
            - equals: ["control.code", "200"]
      - think: 1
