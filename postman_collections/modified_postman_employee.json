{
  "item": [
    {
      "id": "df2a1d46-dfde-4960-8120-854f49cf0673",
      "name": "employees",
      "item": [
        {
          "id": "56985b05-2776-4e7e-bd88-8df49cda65fa",
          "name": "Searches employees.",
          "request": {
            "name": "Searches employees.",
            "description": {
              "content": "By passing in the appropriate options you can apply filters to your search operationId: getEmployees\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "employees"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "searchString",
                  "value": "{{searchString}}",
                  "description": "Pass an optional search string for the look up"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "96138bda-5b9c-4392-b47b-7f55b950968f",
              "name": "Search results matching the filter criteria",
              "originalRequest": {
                "url": {
                  "path": [
                    "employees"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchString",
                      "value": "{{searchString}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"email\": \"john.smith@acme-corp.com\",\n    \"jobTitle\": \"System Analyst\",\n    \"name\": \"John Smith\",\n    \"id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\"\n  },\n  {\n    \"email\": \"john.smith@acme-corp.com\",\n    \"jobTitle\": \"System Analyst\",\n    \"name\": \"John Smith\",\n    \"id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b0f8354b-0c80-4f56-8795-5598e18e84a9",
              "name": "Bad input",
              "originalRequest": {
                "url": {
                  "path": [
                    "employees"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchString",
                      "value": "{{searchString}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test new-postman-test using AI Type  and AI Model \n\n\nTest generated for /employees?searchString=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Search results matching the filter criteria\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad input\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        null,
        {
          "id": "f75b34dd-3bd4-4f1d-bff8-9c82ed0bdc55",
          "name": "Gets an employee by ID.",
          "request": {
            "name": "Gets an employee by ID.",
            "description": {
              "content": "Retrieves an employee by the associated ID\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "employees",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) Employee ID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "73000ee9-c3eb-4a81-8cbf-bcc9589e0440",
              "name": "Successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "employees",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) Employee ID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"email\": \"john.smith@acme-corp.com\",\n  \"jobTitle\": \"System Analyst\",\n  \"name\": \"John Smith\",\n  \"id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "95ede0d2-078f-4c52-94ce-02990765254f",
              "name": "Not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "employees",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) Employee ID"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test new-postman-test using AI Type  and AI Model \n\n\nTest generated for /employees/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `jobTitle` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`jobTitle`)){\n                if(pm.expect(ld.get(pm.response.json(), `jobTitle`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `jobTitle`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/061REB413/employee-service/0.1",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "c0b43e7b-19b1-40cd-bcab-1e0c5b3ac3fa",
    "name": "Employee Service",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}