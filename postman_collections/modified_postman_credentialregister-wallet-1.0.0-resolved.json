{
  "item": [
    {
      "id": "0fde9118-bdf8-48ad-af8f-9793465dec79",
      "name": "accounts",
      "item": [
        {
          "id": "da932e5f-8aa6-4bd7-88c1-2d13b722658d",
          "name": "Create new Account",
          "request": {
            "name": "Create new Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "Commit Hash of Client Sowftware",
                "key": "commit-hash",
                "value": "{{commit-hash}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "9d23afbd-93b9-4162-9861-07519c395fe1",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Commit Hash",
                  "key": "commit-hash",
                  "value": "{{commit-hash}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e5b7568e-8281-4a88-bd2f-f58c0b8c1113",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /accounts for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "193af752-713a-4306-8856-1e7db5e4b211",
          "name": "Login to existing Account",
          "request": {
            "name": "Login to existing Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "12ab75d5-6ca4-4d96-a3d5-e2a90dc7a986",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a9dd3d8c-1913-4964-8c86-316a5b3851e6",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /accounts for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "2d220aff-d96f-4f41-b207-ca4b6a8b1e4e",
      "name": "Login using OTP: creates a session",
      "request": {
        "name": "Login using OTP: creates a session",
        "description": {
          "content": "Returned is a token, which is combined the session-uuid and the account-uuid",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "login"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "89c4d497-3ba9-4417-9fd3-a17d3541897d",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"7aa0edf7-92c7-e749-1964-09c8a4cac746:f1eb0bd3-c5d9-ad85-3575-286619da5bf1\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3e68c822-a438-4a81-a756-17ffc559fcdc",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /login for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"token\")){\n          if(responseData.token!=null){\n            pm.expect(typeof _.get(responseData, \"token\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "3a1d5319-9157-4ee8-8d2d-dd118a72b25c",
      "name": "Logout: delete the session",
      "request": {
        "name": "Logout: delete the session",
        "description": {},
        "url": {
          "path": [
            "logout"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "id": "a0c0be8a-c858-4973-8b5b-41fc7b35a698",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "64724a90-6880-4fb6-8a53-876008a14926",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /logout for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "8816323b-8552-43b0-a58e-a7a1e22dddaf",
      "name": "me",
      "item": [
        {
          "id": "ca29b58c-321a-482e-9f06-01bd40fb310a",
          "name": "my account details",
          "request": {
            "name": "my account details",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "d4c46ba1-8541-42b8-954a-e3ec78ef8e03",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1998-02-16T22:10:13.604Z\",\n  \"did\": \"ullamco irure\",\n  \"email\": \"<email>\",\n  \"id\": \"urn:uuid:0d051326-6da7-f0fb-e75e-f3eee81f21e6\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"p L.}''LLL.'{ ''}{L.}L-}.-pp L}}-. 'L  .'''}.}L- {.L}L} -L'  \",\n  \"settings\": {\n    \"commodo_2ca\": true,\n    \"quib\": 65229100,\n    \"nisi_3_\": 7156903,\n    \"in_b8e\": 81554710\n  },\n  \"updatedAt\": \"1994-08-09T15:39:58.642Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0e4669f6-edcc-42e1-b709-bbafbeac1a57",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4aa062d3-baa8-422a-af8a-f632758a7ede",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /me for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"did\")){\n          if(responseData.did!=null){\n            pm.expect(typeof _.get(responseData, \"did\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"image\")){\n          if(responseData.image!=null){\n            pm.expect(typeof _.get(responseData, \"image\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"settings\")){\n          if(responseData.settings!=null){\n            pm.expect(typeof _.get(responseData, \"settings\", \"\")).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "bb35b9e5-f85e-4591-837b-1454eb7c7264",
          "name": "Change my settings or account name",
          "request": {
            "name": "Change my settings or account name",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"irure2\": \"{{irure2}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "54385f30-ae2b-4449-b4b7-6b3968a51d75",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"qui_3\": \"{{qui_3}}\",\n        \"consecteturef\": \"{{consecteturef}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1998-02-16T22:10:13.604Z\",\n  \"did\": \"ullamco irure\",\n  \"email\": \"<email>\",\n  \"id\": \"urn:uuid:0d051326-6da7-f0fb-e75e-f3eee81f21e6\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"p L.}''LLL.'{ ''}{L.}L-}.-pp L}}-. 'L  .'''}.}L- {.L}L} -L'  \",\n  \"settings\": {\n    \"commodo_2ca\": true,\n    \"quib\": 65229100,\n    \"nisi_3_\": 7156903,\n    \"in_b8e\": 81554710\n  },\n  \"updatedAt\": \"1994-08-09T15:39:58.642Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c5e65a97-0eaa-49b2-86bd-5afc3189daae",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"qui_3\": \"{{qui_3}}\",\n        \"consecteturef\": \"{{consecteturef}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f1094452-6618-4b02-ad38-a5b864e02f2a",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"qui_3\": \"{{qui_3}}\",\n        \"consecteturef\": \"{{consecteturef}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /me for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"did\")){\n          if(responseData.did!=null){\n            pm.expect(typeof _.get(responseData, \"did\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"image\")){\n          if(responseData.image!=null){\n            pm.expect(typeof _.get(responseData, \"image\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"settings\")){\n          if(responseData.settings!=null){\n            pm.expect(typeof _.get(responseData, \"settings\", \"\")).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "8081c135-6ffc-4973-bff6-503a12f198a5",
      "name": "credentials",
      "item": [
        {
          "id": "38ecbc51-4f50-43d4-8241-897b17cced58",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "a4982dea-eadb-4513-98bb-b40ae9a705a2",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"1953-07-04T22:38:19.809Z\",\n      \"credential\": \"deserunt laborum\",\n      \"format\": \"ldp_vc\",\n      \"id\": \"ae09d622-2bb1-16a5-d7b7-015e76b19421\",\n      \"status\": \"revoked\",\n      \"statusUpdatedAt\": \"2023-01-23T11:34:08.952Z\"\n    },\n    {\n      \"createdAt\": \"1979-01-31T23:48:30.681Z\",\n      \"credential\": \"magna ut id eiusmod irure\",\n      \"format\": \"jwt_vc_json\",\n      \"id\": \"urn:uuid:f29f57aa-88cb-fe96-c7e2-8653f0fae2e9\",\n      \"status\": \"pending\",\n      \"statusUpdatedAt\": \"2016-03-31T14:03:50.752Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "388e4b79-4f1f-4d5d-bcfe-c1a622a0ca0e",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a3911a05-aec3-411f-b7bd-6734eaa281f0",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /credentials?size=<integer>&offset=<integer> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `credentials` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"credentials\")){\n            if(responseData.credentials!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"credentials\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `credentials` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"credentials\");  \n          let credentialsArray = _.get(responseData, \"credentials\", \"\");  \n          for (let i = 0; i < credentialsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'credentials' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"id\")){\n          if(responseData.credentials[i].id != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('credentials format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'credentials' has 'format' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"format\")){\n          if(responseData.credentials[i].format != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].format`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('credentials to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      pm.test(`${i} element of array 'credentials' has 'credential' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"credential\")){\n          if(responseData.credentials[i].credential != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].credential`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'status' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"status\")){\n          if(responseData.credentials[i].status != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].status`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('credentials to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      pm.test(`${i} element of array 'credentials' has 'statusUpdatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"statusUpdatedAt\")){\n          if(responseData.credentials[i].statusUpdatedAt != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].statusUpdatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('credentials format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'credentials' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.credentials[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('credentials format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "a7cc756d-3ef1-49d6-9c02-c77964274cc7",
          "name": "{id}",
          "item": [
            {
              "id": "c5514168-494e-4be5-8dae-b6aa9cb5c587",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "90c24bf8-931c-4969-adf2-ebf2fab98989",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1960-01-28T08:52:56.105Z\",\n  \"credential\": \"dolor eu ex sed tempor\",\n  \"format\": \"jwt_vc_json-ld\",\n  \"id\": \"urn:uuid:8c3362e7-21f4-e495-694f-de9624dab55d\",\n  \"status\": \"expired\",\n  \"statusUpdatedAt\": \"1982-03-18T23:50:19.399Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7e67f390-60bc-4765-9eba-aa16c52be8c8",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3e2961a8-95a3-401f-bd8f-74d2c872d694",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /credentials/:id for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `credentials` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"credentials\")){\n            if(responseData.credentials!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"credentials\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `credentials` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"credentials\");  \n          let credentialsArray = _.get(responseData, \"credentials\", \"\");  \n          for (let i = 0; i < credentialsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'credentials' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"id\")){\n          if(responseData.credentials[i].id != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('credentials format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'credentials' has 'format' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"format\")){\n          if(responseData.credentials[i].format != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].format`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('credentials to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      pm.test(`${i} element of array 'credentials' has 'credential' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"credential\")){\n          if(responseData.credentials[i].credential != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].credential`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'status' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"status\")){\n          if(responseData.credentials[i].status != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].status`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('credentials to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      pm.test(`${i} element of array 'credentials' has 'statusUpdatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"statusUpdatedAt\")){\n          if(responseData.credentials[i].statusUpdatedAt != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].statusUpdatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('credentials format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'credentials' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.credentials[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.credentials[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`credentials[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('credentials format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "82affa33-7e45-44c5-b4cb-31f4cb5d53bf",
              "name": "Delete one credential from my Wallet",
              "request": {
                "name": "Delete one credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "8f0262e7-686d-4ac3-95e3-15d232f92183",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "a02abb2b-9c17-4026-8a01-df86fdf03263",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "38ae31fe-3090-465a-a7a3-1e5a2147c964",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /credentials/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "49517a94-d1e0-4a10-8c90-4e52f6831c5e",
      "name": "Retrieve accounts with granted access permissions",
      "request": {
        "name": "Retrieve accounts with granted access permissions",
        "description": {},
        "url": {
          "path": [
            "grants"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "b4d08624-3a13-46e0-8eca-b970552922af",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"grants\": [\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"urn:uuid:9f29a1ad-c764-e86c-de95-82711d6e1b12\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"{-''. .{L{p ''L''}pL}p }.' .L-{.}L--.-p'}{{---}. {{ }.pL{{ } L'}LpL }'.\"\n      },\n      \"createdAt\": \"1972-09-03T02:47:12.435Z\",\n      \"id\": \"7be26c47-28a6-2d0f-472c-70d826c35d96\",\n      \"token\": \"113b5332-9473-53f1-483c-ff6a05c4012f:0256e896-d7dd-30cc-4952-aee17e905e61\",\n      \"updatedAt\": \"1970-02-22T18:58:41.012Z\"\n    },\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"urn:uuid:5cda6498-3bfe-7068-aa92-a506311b0966\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"{L.p.}p- L{ ..-.}{- .}''-p{}{L'L 'L {p}{ {}.p{Lp{}p'p {p} ...{-{-p{-'}.L{ppL pp{. {p}..'-{p .\"\n      },\n      \"createdAt\": \"2022-05-23T08:51:47.917Z\",\n      \"id\": \"2ec5992b-bbcf-da16-d01a-29d016bf4783\",\n      \"token\": \"83ccb6fd-ddcb-6230-48c1-5b5a341baa5a:42b25f7d-1d30-8205-c71e-a1ff2ae7336e\",\n      \"updatedAt\": \"1984-12-04T04:40:05.525Z\"\n    }\n  ],\n  \"total\": 1\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "19db8c09-a745-420d-aa6e-28528b4c20c9",
          "name": "Authentication Required",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /grants for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `grants` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"grants\")){\n            if(responseData.grants!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"grants\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `grants` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"grants\");  \n          let grantsArray = _.get(responseData, \"grants\", \"\");  \n          for (let i = 0; i < grantsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'grants' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"id\")){\n          if(responseData.grants[i].id != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('grants format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'grants' has 'token' as 'string'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"token\")){\n          if(responseData.grants[i].token != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].token`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('grants has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"grants\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n      pm.test(`${i} element of array 'grants' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.grants[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('grants format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'grants' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.grants[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('grants format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'grants' has 'account' as 'object'`,function(){ \n        if(pm.expect(responseData.grants[i]).to.have.nested.property(\"account\")){\n          if(responseData.grants[i].account != null){\n            pm.expect(typeof _.get(responseData,`grants[${i}].account`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "d3fc19a1-977a-4811-a677-7a1a7d30d653",
      "name": "authorizations",
      "item": [
        {
          "id": "697aa852-5492-43ff-a6f3-cc6165e0afb4",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "01f013a4-b847-44f5-92b9-2514fa414f91",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"2009-03-14T00:18:58.250Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:33c538a3-45b9-89b3-69a7-34b50ccb6671\",\n      \"name\": \"'L}L'pL}.'.-..''.p.p-Lp{ p.p-p}.{''p-pp-.'{ .{L \",\n      \"updatedAt\": \"1981-10-05T00:58:51.123Z\"\n    },\n    {\n      \"createdAt\": \"1965-10-15T20:03:21.269Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:3795402c-47dd-978a-2d1f-b8bc39ebe741\",\n      \"name\": \"p}L}p'}p-{.{'} -}  '-.-pp'L} }-p\",\n      \"updatedAt\": \"1988-08-13T01:16:32.955Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1e1c6b5f-a496-43fb-b660-cc58ec540b16",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "697b3643-1a21-4605-801d-3e22ae700244",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /authorizations for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `authorizations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"authorizations\")){\n            if(responseData.authorizations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"authorizations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `authorizations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"authorizations\");  \n          let authorizationsArray = _.get(responseData, \"authorizations\", \"\");  \n          for (let i = 0; i < authorizationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'authorizations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"id\")){\n          if(responseData.authorizations[i].id != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('authorizations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'name' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"name\")){\n          if(responseData.authorizations[i].name != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].name`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test(`${i} element of array 'authorizations' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"email\")){\n          if(responseData.authorizations[i].email != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('authorizations has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.authorizations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'authorizations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.authorizations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.authorizations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`authorizations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('authorizations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1ffaef04-bb2e-4cbe-8af2-3d14ca850002",
          "name": "Authorize another existing Account to access my Account",
          "request": {
            "name": "Authorize another existing Account to access my Account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "2452eab1-0e5b-4a0d-9410-b81c551ed9e1",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2003-01-24T09:48:02.338Z\",\n  \"email\": \"<email>\",\n  \"id\": \"4e8f5fdc-0b39-f542-0763-83c28fdded45\",\n  \"name\": \"{'.L {'L-   p}p -{ p.. -LL.{L'.pp.p pL}{.p ''-{. .{LpL-''}}}{L .}L{ p'{p{.p}{{..'-.L {. } \",\n  \"updatedAt\": \"1984-05-09T10:36:40.397Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e15a60d6-ce61-409b-8df2-3e35b97409da",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8454a9a9-7907-4a26-b499-987cb34ffc97",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /authorizations for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "01761e2b-44e0-454f-ab19-e943b42bc931",
          "name": "Remove Authorized Account",
          "request": {
            "name": "Remove Authorized Account",
            "description": {},
            "url": {
              "path": [
                "authorizations",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "9203b057-237c-45e7-938c-5a79df16fd44",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "f84b7725-f506-4181-9801-a7512342ac32",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5af9389a-7893-45ec-ac02-51df8c9b17ef",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /authorizations/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "19aeaecf-5ed7-4867-b057-7e5b6a727595",
      "name": "apikeys",
      "item": [
        {
          "id": "7a95dfd2-ee00-47c3-be57-6d78ae439276",
          "name": "List API Keys you have created (session.type = 4)",
          "request": {
            "name": "List API Keys you have created (session.type = 4)",
            "description": {
              "content": "API keys to access your account via the API. API Keys are a session record with session.type equal to 4.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "e8880639-97e6-4a45-9cd9-1f386c10c5a3",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"apikeys\": [\n    {\n      \"createdAt\": \"1983-06-12T02:35:03.173Z\",\n      \"id\": \"592552df-fd0e-adfe-080c-8d984a6c2eb3\"\n    },\n    {\n      \"createdAt\": \"1952-03-08T01:26:49.095Z\",\n      \"id\": \"urn:uuid:8f21545a-dee1-9570-5645-35a1405618f2\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "35bac9b1-e8b2-4ef4-8021-f0939069e266",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c4451e9f-77a9-42ee-9cb0-5ba46156c042",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /apikeys for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `apikeys` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"apikeys\")){\n            if(responseData.apikeys!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"apikeys\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `apikeys` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"apikeys\");  \n          let apikeysArray = _.get(responseData, \"apikeys\", \"\");  \n          for (let i = 0; i < apikeysArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'apikeys' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.apikeys[i]).to.have.nested.property(\"id\")){\n          if(responseData.apikeys[i].id != null){\n            pm.expect(typeof _.get(responseData,`apikeys[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('apikeys format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"apikeys\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'apikeys' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.apikeys[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.apikeys[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`apikeys[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('apikeys format to be date-time',function(){\n                pm.expect(_.get(responseData, \"apikeys\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fddfc689-82a7-4073-925a-7217edde95aa",
          "name": "Create API Key (Create Session with type = 4)",
          "request": {
            "name": "Create API Key (Create Session with type = 4)",
            "description": {},
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "be602c69-ead0-4d48-82f7-1078eee06eeb",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1946-02-28T16:02:24.030Z\",\n  \"id\": \"urn:uuid:0010b73c-997d-b488-53be-707a45d55a2b\",\n  \"token\": \"c86acb20-2b52-6d66-56ba-ca9d38ca16ff:053ef334-e491-46f1-c67f-550a03f87030\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5236ab44-7561-4a17-a2cc-68fd918b0802",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d54a1247-75fa-4ac6-ab5e-afd3e465ae61",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /apikeys for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"token\")){\n          if(responseData.token!=null){\n            pm.expect(typeof _.get(responseData, \"token\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d6704020-707a-482d-b2a9-25a5c61c73a6",
          "name": "/apikeys/:id",
          "request": {
            "name": "/apikeys/:id",
            "description": {},
            "url": {
              "path": [
                "apikeys",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "e3eebe76-b3c6-4904-8908-93adf7c2b77d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c5531f05-9984-427c-94cb-aa12ca03856b",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1aada4c6-3bc7-4e88-a5f3-5f1c1e647605",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /apikeys/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "cce3c08a-7599-4568-b025-ad5599bd6701",
      "name": "recipients",
      "item": [
        {
          "id": "164af962-505e-4b68-807d-a1b378de502a",
          "name": "branches",
          "item": [
            {
              "id": "08b94dfb-0121-470f-a357-8e35489538d0",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "a737bf59-5267-4438-b4ff-0d1292751d55",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"587258318588\",\n      \"cocNumber\": \"97491532\",\n      \"createdAt\": \"1953-12-16T11:40:16.550Z\",\n      \"deregistrationDate\": \"1974-10-14\",\n      \"eoriNumber\": \"NL460107869\",\n      \"id\": \"3df5b8c0-2471-ea61-6e85-ae076237d45b\",\n      \"tradeName\": \"magna velit\",\n      \"tradeNames\": [\n        \"ipsu\",\n        \"Excepteur pariatur labore nisi\"\n      ],\n      \"updatedAt\": \"1969-01-21T18:09:48.742Z\",\n      \"email\": \"\\\"w,z_F>f\\\"@[2.286.266.447]\",\n      \"phone\": \"veniam tempor dolor consectetur\"\n    },\n    {\n      \"cocBranchNumber\": \"305926264250\",\n      \"cocNumber\": \"47736979\",\n      \"createdAt\": \"1948-08-25T16:05:21.828Z\",\n      \"deregistrationDate\": \"1970-02-15\",\n      \"eoriNumber\": \"NL686582836\",\n      \"id\": \"urn:uuid:f850ac14-f3f5-0925-3ce2-7bb900fc508f\",\n      \"tradeName\": \"laborum amet ipsum reprehenderit\",\n      \"tradeNames\": [\n        \"laboris reprehenderit id Duis\",\n        \"tempor dolore magna\"\n      ],\n      \"updatedAt\": \"2013-06-26T12:13:17.205Z\",\n      \"email\": \"\\\"zo/\\\"@dQ.ftN.wOz5tepZGtl.ars8DI.SFslnUQZG.oq.OYkr.KBOX2mGE.SCgHrUDCrP\",\n      \"phone\": \"Duis officia\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "531e40d9-ae9c-4e99-99fd-1f0fbd6bdf9d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "85cbaec6-fc68-43c4-adb9-943abc39b92d",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/branches?coc-number=<string>&coc-branch-number=<string>&trade-name=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(responseData, \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"id\")){\n          if(responseData.branches[i].id != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('branches format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"email\")){\n          if(responseData.branches[i].email != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"phone\")){\n          if(responseData.branches[i].phone != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(responseData.branches[i].cocNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocBranchNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeName\")){\n          if(responseData.branches[i].tradeName != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].tradeName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(responseData.branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(responseData, `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].eoriNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].deregistrationDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.branches[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.branches[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "694c88cc-18e5-466d-be3a-0a0eecd352d0",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "60f02edd-1286-4dac-b3fd-bcc2e931e1a5",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1973-05-09T09:29:35.579Z\",\n  \"deregistrationDate\": \"2023-12-11\",\n  \"eoriNumber\": \"NL189393828\",\n  \"id\": \"urn:uuid:2a8d2245-2754-1de5-0699-e8150edf8759\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Excepteur dolore qui est\",\n    \"id aute\"\n  ],\n  \"updatedAt\": \"2019-05-27T13:52:07.679Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c3122888-cdda-4f44-98d4-253a6ce379bf",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1973-05-09T09:29:35.579Z\",\n  \"deregistrationDate\": \"2023-12-11\",\n  \"eoriNumber\": \"NL189393828\",\n  \"id\": \"urn:uuid:2a8d2245-2754-1de5-0699-e8150edf8759\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Excepteur dolore qui est\",\n    \"id aute\"\n  ],\n  \"updatedAt\": \"2019-05-27T13:52:07.679Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6e8a7ea8-b2b9-4d47-9bf4-e4f6215fc7f2",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3c2e3f6a-a051-4902-b1cf-21fa80e01ed9",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/branches for http method type put in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "4e6ad409-4333-4653-97e0-3b749c7693b0",
              "name": "{id}",
              "item": [
                {
                  "id": "9f6d99b7-7149-425a-8694-1f292b1086f7",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "74942868-85d1-4686-bace-ede6be08c184",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1973-05-09T09:29:35.579Z\",\n  \"deregistrationDate\": \"2023-12-11\",\n  \"eoriNumber\": \"NL189393828\",\n  \"id\": \"urn:uuid:2a8d2245-2754-1de5-0699-e8150edf8759\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Excepteur dolore qui est\",\n    \"id aute\"\n  ],\n  \"updatedAt\": \"2019-05-27T13:52:07.679Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "7f2f3f51-ab14-4802-b106-53084046808f",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "8c6c0687-3eb7-4443-8381-60ffd64ed209",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/branches/:id for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(responseData, \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"id\")){\n          if(responseData.branches[i].id != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('branches format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"email\")){\n          if(responseData.branches[i].email != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"phone\")){\n          if(responseData.branches[i].phone != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(responseData.branches[i].cocNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocBranchNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeName\")){\n          if(responseData.branches[i].tradeName != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].tradeName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(responseData.branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(responseData, `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].eoriNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].deregistrationDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.branches[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.branches[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "126914ea-abac-4203-b606-8cf9694b9882",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "d9c01ded-96c4-4d8c-90e9-8a3425b2792e",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "bb62eb5f-cf5a-4b05-b962-ffa3b60255bc",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "51bc7dc7-72f5-4069-ab31-824d77d03a8e",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/branches/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "64ea92d2-1e9b-4b37-89ac-411ef16cd4a9",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "ff573807-6637-48e1-a9cc-4db494a26e39",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1973-05-09T09:29:35.579Z\",\n  \"deregistrationDate\": \"2023-12-11\",\n  \"eoriNumber\": \"NL189393828\",\n  \"id\": \"urn:uuid:2a8d2245-2754-1de5-0699-e8150edf8759\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Excepteur dolore qui est\",\n    \"id aute\"\n  ],\n  \"updatedAt\": \"2019-05-27T13:52:07.679Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "c19c3cd2-cbcc-4afd-9861-b6cdf6c9eed2",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "31b27505-8658-4494-a0e3-0211b3a52e36",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/branches/:id for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "3d3cb273-e192-4810-b251-9a6bf0429946",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "72f87fca-077c-443d-9fed-38dc383fd9e0",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "a39cd915-d53f-44b9-b0a2-d8044b5bde9e",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"2007-10-17T16:40:41.503Z\",\n      \"credentialUrl\": \"K9_:/Ch|BM1lB=#\",\n      \"endDate\": \"1984-03-20\",\n      \"id\": \"93641e6d-10fd-015b-d8a2-0930d881e45f\",\n      \"issuedAt\": \"1987-11-29T12:48:57.362Z\",\n      \"reference\": \"la\",\n      \"startDate\": \"1996-07-29\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1965-07-24\",\n      \"updatedAt\": \"2003-03-15T23:03:20.977Z\"\n    },\n    {\n      \"createdAt\": \"1999-06-08T06:35:16.140Z\",\n      \"credentialUrl\": \"0:/w^?u{6t;\",\n      \"endDate\": \"1944-01-17\",\n      \"id\": \"urn:uuid:0c432a29-246e-5497-c66a-00d47266111e\",\n      \"issuedAt\": \"2009-09-23T14:42:27.411Z\",\n      \"reference\": \"ullamco\",\n      \"startDate\": \"1978-12-08\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2019-10-12\",\n      \"updatedAt\": \"1995-01-27T05:42:11.608Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "67b3250d-db69-4ae4-8bbf-4dabb7add0ca",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "74dfdf3a-cfcb-4c27-b171-3b57cdc9a466",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/branches/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(responseData, \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"id\")){\n          if(responseData.branches[i].id != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('branches format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"email\")){\n          if(responseData.branches[i].email != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"phone\")){\n          if(responseData.branches[i].phone != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(responseData.branches[i].cocNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].cocBranchNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeName\")){\n          if(responseData.branches[i].tradeName != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].tradeName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(responseData.branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(responseData.branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(responseData, `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].eoriNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('branches has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].deregistrationDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.branches[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.branches[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`branches[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('branches format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "19060942-98b3-4d46-8c18-2b690082761e",
                      "name": "Create new Registration for the Recipient",
                      "request": {
                        "name": "Create new Registration for the Recipient",
                        "description": {
                          "content": "Create new Registration for the Recipient",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "30e4ff1f-a198-4464-8502-2ada495c1591",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1970-09-11T16:58:05.653Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"a9c81299-d574-2f38-49c9-71dc57406818\",\n  \"issuedAt\": \"1958-06-15T15:41:09.595Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1962-11-11\",\n  \"updatedAt\": \"2019-04-01T10:23:23.615Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "e0bbe520-d2ef-4b98-8cd0-6927e6eafd67",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "c8cc02d8-6287-4097-bfc1-df91dfdeba1c",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/branches/:id/registrations for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"startDate\")){\n          if(responseData.startDate!=null){\n            pm.expect(typeof _.get(responseData, \"startDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"endDate\")){\n          if(responseData.endDate!=null){\n            pm.expect(typeof _.get(responseData, \"endDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.credentialUrl!=null){\n            pm.expect(typeof _.get(responseData, \"credentialUrl\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.suspendedUntil!=null){\n            pm.expect(typeof _.get(responseData, \"suspendedUntil\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"issuedAt\")){\n          if(responseData.issuedAt!=null){\n            pm.expect(typeof _.get(responseData, \"issuedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "d93a2e7a-e684-41e7-bb21-64af280776b6",
          "name": "persons",
          "item": [
            {
              "id": "ad0dd6ea-3a77-4294-a259-6156ce5302ae",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "80ad6b07-be44-4bf7-8772-97d543fc8dfe",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"2004-11-01\",\n      \"birthPlace\": \"L  {pL'..p,.p{..LL L-,p.'pp''-},} }{p{{,{{{{.-{},{,-p. pp.ppL}L},p{-\",\n      \"countryCode\": \"SZ\",\n      \"createdAt\": \"1946-11-20T08:31:14.202Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"{ '.{. L}L L}p{.\",\n      \"houseNumber\": \"0\",\n      \"houseNumberPostfix\": \"RIDW\",\n      \"id\": \"dbfb5d84-17be-8d97-98d3-321f396d33d5\",\n      \"initials\": \"IZJBM\",\n      \"lastName\": \"'p'{p''{.- {'pL -L.'L }'.}-.Lp } }L. p.\",\n      \"middleName\": \"L-L.' .p\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"6596\",\n      \"reference\": \"consectetur dolore\",\n      \"updatedAt\": \"1974-06-27T05:58:22.257Z\"\n    },\n    {\n      \"birthDate\": \"1946-05-14\",\n      \"birthPlace\": \" ,{{L,',,{}-pL'{'}- p'-L}, Lp,p, \",\n      \"countryCode\": \"NE\",\n      \"createdAt\": \"1944-07-27T01:14:21.187Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"}L.p .Lp{-p\",\n      \"houseNumber\": \"99\",\n      \"houseNumberPostfix\": \"PHapsXI\",\n      \"id\": \"e4d316a0-3080-fb66-8f88-5a0b52cfb5dd\",\n      \"initials\": \"MJECI\",\n      \"lastName\": \"{.L }{''' p}'}'-L'p'L LL'L  {'}''{p-.}}-'L'\",\n      \"middleName\": \"'-.}{\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"0188JV\",\n      \"reference\": \"ullamco non labore cillum dolore\",\n      \"updatedAt\": \"1973-03-27T08:49:34.312Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "214f1d80-aca2-4c06-b437-63dd52759041",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e0956492-cb4a-4b84-a0d1-67473a4c5b45",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/persons?size=<integer>&offset=<integer>&name=<string>&birth-date=<date> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(responseData, \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"id\")){\n          if(responseData.persons[i].id != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('persons format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"initials\")){\n          if(responseData.persons[i].initials != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].initials`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"firstName\")){\n          if(responseData.persons[i].firstName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].firstName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"middleName\")){\n          if(responseData.persons[i].middleName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].middleName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"lastName\")){\n          if(responseData.persons[i].lastName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].lastName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthDate\")){\n          if(responseData.persons[i].birthDate != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(responseData.persons[i].birthPlace != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthPlace`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"phone\")){\n          if(responseData.persons[i].phone != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"email\")){\n          if(responseData.persons[i].email != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"postalCode\")){\n          if(responseData.persons[i].postalCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].postalCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(responseData.persons[i].houseNumber != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumberPostfix`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"countryCode\")){\n          if(responseData.persons[i].countryCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].countryCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"reference\")){\n          if(responseData.persons[i].reference != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('persons length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.persons[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.persons[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "26dd7587-fdab-40a7-ad76-ed5dc02bda08",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "7bcb790a-fc7d-4e16-beca-abfa4f5dc968",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1974-10-02T04:45:21.974Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:35025db5-565b-b5e7-7f16-526a456ee48f\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2014-04-21T03:24:34.057Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "def5b0e0-ca76-46df-ac95-361800cd71d3",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "973f3b62-b6ce-4062-9342-be7b2e2a4a26",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/persons for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "547fbcec-f2d8-4c86-acd2-c1b127bbb3a0",
              "name": "{id}",
              "item": [
                {
                  "id": "8b7a2d7c-fce0-4d18-bbad-93c6ee320cf0",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "be209ff2-3a03-4a40-9e7f-d2aab19a76fd",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1974-10-02T04:45:21.974Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:35025db5-565b-b5e7-7f16-526a456ee48f\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2014-04-21T03:24:34.057Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "390e7cc3-e9b2-4b11-b045-3ef85e8a56c5",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "78f55a6c-1b63-4c73-af98-441ee8671fba",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/persons/:id for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(responseData, \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"id\")){\n          if(responseData.persons[i].id != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('persons format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"initials\")){\n          if(responseData.persons[i].initials != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].initials`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"firstName\")){\n          if(responseData.persons[i].firstName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].firstName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"middleName\")){\n          if(responseData.persons[i].middleName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].middleName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"lastName\")){\n          if(responseData.persons[i].lastName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].lastName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthDate\")){\n          if(responseData.persons[i].birthDate != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(responseData.persons[i].birthPlace != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthPlace`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"phone\")){\n          if(responseData.persons[i].phone != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"email\")){\n          if(responseData.persons[i].email != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"postalCode\")){\n          if(responseData.persons[i].postalCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].postalCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(responseData.persons[i].houseNumber != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumberPostfix`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"countryCode\")){\n          if(responseData.persons[i].countryCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].countryCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"reference\")){\n          if(responseData.persons[i].reference != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('persons length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.persons[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.persons[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "41db99e4-4a75-4bc9-b8be-9c5c19dcadd9",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "4e27149e-1b55-44a7-8221-d66b7775f5c2",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "66d9dee4-337c-40d0-9ebb-222ad42fe547",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "c07318c2-abfa-42d7-8c03-ee9fb77ef171",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/persons/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "72babc4a-fb8c-46bc-ac96-4bf00624a73c",
                  "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                  "request": {
                    "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                    "description": {
                      "content": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "5de8251e-902b-45da-aee8-5d1a9440eb31",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1974-10-02T04:45:21.974Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:35025db5-565b-b5e7-7f16-526a456ee48f\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2014-04-21T03:24:34.057Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "3d298f12-0949-4de1-b0cf-98e0f73eed4e",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "669b10df-e5f5-48bc-8ab7-281248fcbd4a",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/persons/:id for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "d8298bd4-c5da-4205-bc0b-89179a2fdb1c",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "fc171137-2b29-4055-9946-8e4e8bff09ac",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "537eaa0b-3f0c-4677-9285-2ee821b401a7",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1990-12-26T13:51:22.555Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:30b05962-2d78-0f31-1a9c-eadf0493892b\",\n      \"issuedAt\": \"1977-11-14T02:11:52.737Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1959-09-02\",\n      \"updatedAt\": \"2004-01-21T06:35:16.349Z\"\n    },\n    {\n      \"createdAt\": \"1952-07-19T01:36:28.414Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"dab35b93-0709-96bf-fcba-720d82b1cba9\",\n      \"issuedAt\": \"2000-05-12T09:01:36.710Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1962-08-13\",\n      \"updatedAt\": \"1985-07-02T04:32:27.606Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "3b5f4bbd-1404-4ba4-995e-b90b90f3ea49",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "620e80ea-62a1-4ec2-9150-679f0999d734",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/persons/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(responseData, \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"id\")){\n          if(responseData.persons[i].id != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('persons format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"initials\")){\n          if(responseData.persons[i].initials != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].initials`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"firstName\")){\n          if(responseData.persons[i].firstName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].firstName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"middleName\")){\n          if(responseData.persons[i].middleName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].middleName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"lastName\")){\n          if(responseData.persons[i].lastName != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].lastName`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthDate\")){\n          if(responseData.persons[i].birthDate != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(responseData.persons[i].birthPlace != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].birthPlace`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"phone\")){\n          if(responseData.persons[i].phone != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].phone`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"email\")){\n          if(responseData.persons[i].email != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].email`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"postalCode\")){\n          if(responseData.persons[i].postalCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].postalCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(responseData.persons[i].houseNumber != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumber`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].houseNumberPostfix`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"countryCode\")){\n          if(responseData.persons[i].countryCode != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].countryCode`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('persons has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"reference\")){\n          if(responseData.persons[i].reference != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('persons length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.persons[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.persons[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`persons[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('persons format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "f0f98c62-ec21-4f20-a0c2-37ecba4013d6",
                      "name": "Create new Registration",
                      "request": {
                        "name": "Create new Registration",
                        "description": {
                          "content": "Create new Registration",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "1ec86a4e-1f4b-4a56-969f-d4e3f3448cce",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1970-09-11T16:58:05.653Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"a9c81299-d574-2f38-49c9-71dc57406818\",\n  \"issuedAt\": \"1958-06-15T15:41:09.595Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1962-11-11\",\n  \"updatedAt\": \"2019-04-01T10:23:23.615Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "9d85c1ec-06cf-45aa-a946-3e9602f829f9",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "93595abf-2bf8-499e-b477-3ca489320e2c",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /recipients/persons/:id/registrations for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "1df5d9b9-e3c9-4467-bded-c6cf613991d8",
      "name": "registrations",
      "item": [
        {
          "id": "c6fe0849-60d6-4355-93e0-ed2c1894c1f9",
          "name": "/registrations",
          "request": {
            "name": "/registrations",
            "description": {},
            "url": {
              "path": [
                "registrations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                },
                {
                  "disabled": false,
                  "key": "recipient-id",
                  "value": "{{recipient-id}}",
                  "description": "Filter results by Recipient ID (UUID)"
                },
                {
                  "disabled": false,
                  "key": "credential-url",
                  "value": "{{credential-url}}",
                  "description": "Filter results on specific Credential (URL)."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "0a21ea6c-bb25-4448-86cf-dab6207bbc4b",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1950-03-14T13:29:54.320Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"7f02915b-802a-4c38-8cc2-b0cbf5b7a349\",\n      \"issuedAt\": \"1969-07-02T07:56:55.452Z\",\n      \"recipient\": {\n        \"id\": \"83694b68-ad02-5f25-f01d-8052b0d46af7\",\n        \"name\": \"L''L{'.'-L.pLL'L'}}{{p.L-p{}}'  -}'L}'p .-.L. pLLp.'}..-p  -.pp-pp}{p{}.- }}L-pp\",\n        \"type\": \"branch\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1989-10-10\",\n      \"updatedAt\": \"1999-06-07T01:07:27.339Z\"\n    },\n    {\n      \"createdAt\": \"1948-07-16T00:51:12.313Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:b10534ce-0e0c-5140-1593-39f1d1727273\",\n      \"issuedAt\": \"1995-10-24T18:13:49.996Z\",\n      \"recipient\": {\n        \"id\": \"59e9de73-28c7-414d-492e-274ce73071e3\",\n        \"name\": \".--L.{-L.{' }}p-LL p-L{L {}{LpL'pLL } }{   -'L.{-L\",\n        \"type\": \"branch\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1977-06-16\",\n      \"updatedAt\": \"1986-04-15T13:59:20.485Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a1e00e1e-371f-4a7e-9625-881005d29354",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8c50711e-18e5-44a6-89af-4e9c81b6118a",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /registrations?size=<integer>&offset=<integer>&recipient-id=<uuid>&credential-url=<string> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `registrations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"registrations\")){\n            if(responseData.registrations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"registrations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `registrations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"registrations\");  \n          let registrationsArray = _.get(responseData, \"registrations\", \"\");  \n          for (let i = 0; i < registrationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'registrations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"id\")){\n          if(responseData.registrations[i].id != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('registrations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"reference\")){\n          if(responseData.registrations[i].reference != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('registrations length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'registrations' has 'startDate' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"startDate\")){\n          if(responseData.registrations[i].startDate != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].startDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'endDate' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"endDate\")){\n          if(responseData.registrations[i].endDate != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].endDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'status' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"status\")){\n          if(responseData.registrations[i].status != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].status`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'credentialUrl' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.registrations[i].credentialUrl != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].credentialUrl`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('registrations has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test(`${i} element of array 'registrations' has 'suspendedUntil' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.registrations[i].suspendedUntil != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].suspendedUntil`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'issuedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"issuedAt\")){\n          if(responseData.registrations[i].issuedAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].issuedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.registrations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.registrations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'recipient' as 'object'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"recipient\")){\n          if(responseData.registrations[i].recipient != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].recipient`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "abde8175-200b-4c45-977a-f6481369e07a",
          "name": "{id}",
          "item": [
            {
              "id": "d07d1ad8-8126-4d5d-881e-9b62fa74a969",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "9eb46002-1704-44a2-bb9b-5be9f20a6632",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1965-11-12T07:55:51.731Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"5b21c88f-6a09-0f57-6c09-03433d8813eb\",\n  \"issuedAt\": \"1977-05-30T00:17:50.570Z\",\n  \"recipient\": {\n    \"id\": \"urn:uuid:71f2f60b-ca3c-1a8a-ee12-ca5a6a1f45f7\",\n    \"name\": \"}{{L.}L'} -}-}'pp. L-}.L{{-}-{-.{-.'{{L{}L}-{L.pp-Lp}{.pL Lp-L}p  }-.pp{p-.\",\n    \"type\": \"person\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1962-07-21\",\n  \"updatedAt\": \"1988-04-08T08:56:06.333Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ad711432-8593-48bd-906e-dc7410e3558a",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "750c75df-1109-4d5e-974b-65729dd5d3c8",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /registrations/:id for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `registrations` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"registrations\")){\n            if(responseData.registrations!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"registrations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `registrations` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"registrations\");  \n          let registrationsArray = _.get(responseData, \"registrations\", \"\");  \n          for (let i = 0; i < registrationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'registrations' has 'id' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"id\")){\n          if(responseData.registrations[i].id != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].id`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n            pm.test('registrations format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'reference' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"reference\")){\n          if(responseData.registrations[i].reference != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].reference`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.test('registrations length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test(`${i} element of array 'registrations' has 'startDate' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"startDate\")){\n          if(responseData.registrations[i].startDate != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].startDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'endDate' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"endDate\")){\n          if(responseData.registrations[i].endDate != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].endDate`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'status' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"status\")){\n          if(responseData.registrations[i].status != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].status`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'credentialUrl' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.registrations[i].credentialUrl != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].credentialUrl`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n \n        pm.test('registrations has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test(`${i} element of array 'registrations' has 'suspendedUntil' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.registrations[i].suspendedUntil != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].suspendedUntil`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'issuedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"issuedAt\")){\n          if(responseData.registrations[i].issuedAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].issuedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"createdAt\")){\n          if(responseData.registrations[i].createdAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].createdAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"updatedAt\")){\n          if(responseData.registrations[i].updatedAt != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].updatedAt`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n            pm.test('registrations format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test(`${i} element of array 'registrations' has 'recipient' as 'object'`,function(){ \n        if(pm.expect(responseData.registrations[i]).to.have.nested.property(\"recipient\")){\n          if(responseData.registrations[i].recipient != null){\n            pm.expect(typeof _.get(responseData,`registrations[${i}].recipient`, \"\")).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "20b4c0d6-158a-4fce-ad4b-f1f53459db90",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "15832f30-3b81-4095-925f-9b1bec625807",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "58a2983e-5b50-4302-91cc-f40b3eb7fb34",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8914d68a-30b7-4916-87ec-70b3951d38c8",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /registrations/:id for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "cfa0e7fa-1103-42df-98aa-17aab4d58bcf",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "54f3edaa-b49e-448a-aaba-23c2553e7501",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1998-05-02T11:47:57.428Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"663ff0bf-668f-8cc1-8081-91ac595039b7\",\n  \"issuedAt\": \"2011-04-02T15:09:43.226Z\",\n  \"recipient\": {\n    \"id\": \"6a6e228b-277f-83bc-5304-f6a4591947b7\",\n    \"name\": \"-.L. -  .{'{{{p}\",\n    \"type\": \"branch\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"<date>\",\n  \"updatedAt\": \"1956-03-04T19:07:32.979Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "f1ea7905-d759-4bf9-b108-5ec0f95fbd69",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "53db8634-b2a2-4199-b4a7-663a9cdd2fb5",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /registrations/:id for http method type patch in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"startDate\")){\n          if(responseData.startDate!=null){\n            pm.expect(typeof _.get(responseData, \"startDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"endDate\")){\n          if(responseData.endDate!=null){\n            pm.expect(typeof _.get(responseData, \"endDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.credentialUrl!=null){\n            pm.expect(typeof _.get(responseData, \"credentialUrl\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.suspendedUntil!=null){\n            pm.expect(typeof _.get(responseData, \"suspendedUntil\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"issuedAt\")){\n          if(responseData.issuedAt!=null){\n            pm.expect(typeof _.get(responseData, \"issuedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"recipient\")){\n          if(responseData.recipient!=null){\n            pm.expect(typeof _.get(responseData, \"recipient\", \"\")).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.id\")){\n          if(responseData.recipient.id!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.id\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n            pm.test('recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.name\")){\n          if(responseData.recipient.name!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.type\")){\n          if(responseData.recipient.type!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.type\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "29faed68-fe31-478d-acf5-b2184d5c8035",
      "name": "/errors",
      "request": {
        "name": "/errors",
        "description": {},
        "url": {
          "path": [
            "errors"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "4cf3d137-42a0-4d63-a1c4-9b63d277be27",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "errors"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  },\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /errors for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "7c42e64e-8db3-4d2f-8ee2-0930d2d99ab5",
      "name": "/kvk/zoeken",
      "request": {
        "name": "/kvk/zoeken",
        "description": {},
        "url": {
          "path": [
            "kvk",
            "zoeken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "kvkNummer",
              "value": "{{kvkNummer}}"
            },
            {
              "disabled": false,
              "key": "vestigingsnummer",
              "value": "{{vestigingsnummer}}",
              "description": "Filter results based on reference"
            },
            {
              "disabled": false,
              "key": "handelsnaam",
              "value": "{{handelsnaam}}",
              "description": "Filter results based on reference"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "5d9c619d-6b8c-4672-890c-d0d3a62552cd",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "kvk",
                "zoeken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "kvkNummer",
                  "value": "{{kvkNummer}}"
                },
                {
                  "key": "vestigingsnummer",
                  "value": "{{vestigingsnummer}}"
                },
                {
                  "key": "handelsnaam",
                  "value": "{{handelsnaam}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "\"See kvk OAS specs\"",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /kvk/zoeken?kvkNummer=<string>&vestigingsnummer=<string>&handelsnaam=<string> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "2d048d9a-c573-4611-b45e-1a14f777600a",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}