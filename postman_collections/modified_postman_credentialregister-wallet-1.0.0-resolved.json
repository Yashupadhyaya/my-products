{
  "item": [
    {
      "id": "0b7bb8a0-2d49-4317-82c5-c9c6ed4fea8c",
      "name": "accounts",
      "item": [
        {
          "id": "fcf49214-1350-4107-86a6-5679d2065fa3",
          "name": "Create new Account",
          "request": {
            "name": "Create new Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "Commit Hash of Client Sowftware",
                "key": "commit-hash",
                "value": "{{commit-hash}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "94b16919-3194-4a72-8341-e3afac3fad5f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Commit Hash",
                  "key": "commit-hash",
                  "value": "{{commit-hash}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e1b6671a-09f9-4517-9305-9ab8cbdc38ef",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /accounts for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fc2c5f23-34fa-4369-bd17-e26fdb415ca9",
          "name": "Login to existing Account",
          "request": {
            "name": "Login to existing Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "1779be45-c628-45bb-b8b9-4a1192ea7d84",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "dcb53f17-2d90-4636-bd20-d873788f9314",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /accounts for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "488299f1-f49c-4f87-8342-fa7e429f41c1",
      "name": "Login using OTP: creates a session",
      "request": {
        "name": "Login using OTP: creates a session",
        "description": {
          "content": "Returned is a token, which is combined the session-uuid and the account-uuid",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "login"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "57a0270e-f13f-44f9-b76b-5d3aa5c1a38b",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"e562b92f-ea07-bcef-b29a-6aef6a13ee3f:d932f072-f326-f20f-d8dd-a06b5973e095\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "27d246ac-6b34-4270-84b9-30caf49a3d45",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /login for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `token` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n                if(pm.expect(ld.get(pm.response.json(), `token`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(ld.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "9d9aaf29-b1a7-490a-aaa9-3126e06d12bb",
      "name": "Logout: delete the session",
      "request": {
        "name": "Logout: delete the session",
        "description": {},
        "url": {
          "path": [
            "logout"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "99297592-2b33-4d1f-ab87-537d45b3ff01",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "c671d42d-073b-42e2-8724-7d973b4f0204",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /logout for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "0cd85000-faa2-463d-b495-717313ab95a3",
      "name": "me",
      "item": [
        {
          "id": "f3e913cc-4cdc-41eb-8d7d-78b8f015d9e7",
          "name": "my account details",
          "request": {
            "name": "my account details",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "5d278600-bba8-49ed-995e-baadd1349228",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1996-06-24T21:00:27.836Z\",\n  \"did\": \"Ut nisi cillum\",\n  \"email\": \"<email>\",\n  \"id\": \"d384e9b3-0301-028c-037f-d3c555a53292\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"' '. 'p{p}p}.{p'-p{-L''L..{-p}L{-' {pL.'L}p- -ppL.\",\n  \"settings\": {\n    \"consequat_fad\": -66110915,\n    \"id_5e\": true\n  },\n  \"updatedAt\": \"1981-05-05T17:33:44.925Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fcbd9ecc-6da3-4e84-b893-99316b6496c1",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a865bf44-cf73-4c2b-a4e4-28961c65ddb1",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /me for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `did` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n                if(pm.expect(ld.get(pm.response.json(), `did`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(ld.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `settings` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n                if(pm.expect(ld.get(pm.response.json(), `settings`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "63c7d4b3-23a8-48dd-b2cc-fb19ecfc7085",
          "name": "Change my settings or account name",
          "request": {
            "name": "Change my settings or account name",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"laborum4\": \"{{laborum4}}\",\n        \"dolord\": \"{{dolord}}\",\n        \"magna_7\": \"{{magna_7}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "516faf4c-401d-46ea-b4c8-837fcb4bffc2",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"dolor_c4\": \"{{dolor_c4}}\",\n        \"dolore9b\": \"{{dolore9b}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1996-06-24T21:00:27.836Z\",\n  \"did\": \"Ut nisi cillum\",\n  \"email\": \"<email>\",\n  \"id\": \"d384e9b3-0301-028c-037f-d3c555a53292\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"' '. 'p{p}p}.{p'-p{-L''L..{-p}L{-' {pL.'L}p- -ppL.\",\n  \"settings\": {\n    \"consequat_fad\": -66110915,\n    \"id_5e\": true\n  },\n  \"updatedAt\": \"1981-05-05T17:33:44.925Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a69559a3-51f9-472c-a89f-0daaaf5756b2",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"dolor_c4\": \"{{dolor_c4}}\",\n        \"dolore9b\": \"{{dolore9b}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "605cfebb-f334-429a-ad38-86390ba863aa",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"dolor_c4\": \"{{dolor_c4}}\",\n        \"dolore9b\": \"{{dolore9b}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /me for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `did` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n                if(pm.expect(ld.get(pm.response.json(), `did`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(ld.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `settings` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n                if(pm.expect(ld.get(pm.response.json(), `settings`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "3452f6ed-792d-463b-88f6-0b0566644d53",
      "name": "credentials",
      "item": [
        {
          "id": "bee21e6a-faa5-4441-b151-54daed515c6b",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "9095921f-8257-4abe-9098-ad31fd58d9b4",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"1992-05-30T17:17:27.355Z\",\n      \"credential\": \"deserunt\",\n      \"format\": \"ldp_vc\",\n      \"id\": \"urn:uuid:d58e16c9-a4f2-8432-16ff-526b0bb324fb\",\n      \"status\": \"expired\",\n      \"statusUpdatedAt\": \"2017-04-24T16:26:40.504Z\"\n    },\n    {\n      \"createdAt\": \"2010-10-22T07:16:55.208Z\",\n      \"credential\": \"pariatur eu\",\n      \"format\": \"jwt_vc_json-ld\",\n      \"id\": \"urn:uuid:44dc0e97-2ad3-097a-1ac6-9347ed089dfc\",\n      \"status\": \"active\",\n      \"statusUpdatedAt\": \"2012-03-05T19:10:36.879Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f98248ce-a01b-45ac-be1e-0887c0e619ea",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c6ad8643-aee2-46d6-a959-f0e0af849f5d",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /credentials?size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `credentials` field',function(){\n            pm.expect(responseData.credentials).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `total` field',function(){\n            pm.expect(responseData.total).to.exist.and.to.be.a(\"number\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "0ce4562b-2915-48a3-a2ed-d5df23008ce5",
          "name": "{id}",
          "item": [
            {
              "id": "64b22b89-3c18-4b05-91bd-6d6959d4a33b",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "609e1a53-24ca-4c68-b54b-607aa752e92a",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1958-11-25T05:02:35.657Z\",\n  \"credential\": \"cu\",\n  \"format\": \"jwt_vc_json\",\n  \"id\": \"7419daf6-e48e-1682-138a-1e1ee428600a\",\n  \"status\": \"pending\",\n  \"statusUpdatedAt\": \"2000-01-21T10:52:43.178Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a43de758-312f-4544-8a8c-db228ebcf31b",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0793e745-d818-4886-a9c6-2ec2707b9ef0",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /credentials/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `format` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`format`)){\n                if(pm.expect(ld.get(pm.response.json(), `format`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `format`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('format to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n        pm.test('Response has the `credential` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credential`)){\n                if(pm.expect(ld.get(pm.response.json(), `credential`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `credential`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n        pm.test('Response has the `statusUpdatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`statusUpdatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `statusUpdatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `statusUpdatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('statusUpdatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "c7d91c62-bd83-4cc5-8ebd-6686d12ef69b",
              "name": "Delete one credential from my Wallet",
              "request": {
                "name": "Delete one credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "e328c629-bd64-44cd-9792-986612ec0d12",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "1982c27f-6581-44ac-a405-3dcf6169cbdc",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2d784110-0004-4467-86c8-8cf1bf385a6a",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /credentials/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "9afd9a1e-fa11-4e3a-905e-9a3f442626e8",
      "name": "Retrieve accounts with granted access permissions",
      "request": {
        "name": "Retrieve accounts with granted access permissions",
        "description": {},
        "url": {
          "path": [
            "grants"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "22d64265-833e-4371-b85a-1b3389e84131",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"grants\": [\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"a3341058-0827-646b-dd38-b7d09d4320c9\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"{-LL -p{ '}L..'.--LL ''}'.-'L.p'L'-L ..{' '--. L}-{'{'''}} }{L'-p'{}}{-}}}'.{{.L'-}}}p}pL'}{'pp}'}'-\"\n      },\n      \"createdAt\": \"2014-03-30T21:52:21.660Z\",\n      \"id\": \"792ba619-2e40-0161-45e2-85e2efcfd347\",\n      \"token\": \"31417c3d-aef6-b341-680e-c56ec0af1f26:ffc80832-a9cb-babc-746c-f21b123f8a02\",\n      \"updatedAt\": \"1947-08-12T14:51:47.394Z\"\n    },\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"a9dd983d-2632-99b5-9251-24809f535c3e\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"-L-L'-L-p'}. -'.''.pp {{.'}{p-  -.L{ -Lpp.}}-p.{.-pL-LL'}{}'.L.''}'.''L}}{' .L'}{-}-\"\n      },\n      \"createdAt\": \"1980-09-08T01:23:50.216Z\",\n      \"id\": \"urn:uuid:324b9324-f620-c7a5-1889-613e8163eb47\",\n      \"token\": \"d3a325b6-9af3-26b9-9a6d-a6d8df6c6c75:71f8a9be-a34b-a77e-f923-d23375021739\",\n      \"updatedAt\": \"1983-08-09T02:28:34.295Z\"\n    }\n  ],\n  \"total\": 1\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ba994945-3b9c-4924-9014-6db2440ebb87",
          "name": "Authentication Required",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /grants for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(ld.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `grants` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`grants`)){\n                if(pm.expect(ld.get(pm.response.json(), `grants`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `grants`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the grants field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`grants`);\n            let grantsArray = ld.get(pm.response.json(), `grants`, \"\");\n            for (let grants_it = 0; grants_it < grantsArray.length; grants_it++) {\n                let iterator = grants_it;\n                \t\n        pm.test(`${iterator} element of array 'grants[${grants_it}].id' has 'id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test('grants[${grants_it}].id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"grants[${grants_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test(`${iterator} element of array 'grants[${grants_it}].token' has 'token' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].token`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].token`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('grants[${grants_it}].token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(ld.get(responseData, \"grants[${grants_it}].token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n        pm.test(`${iterator} element of array 'grants[${grants_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].createdAt`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('grants[${grants_it}].createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"grants[${grants_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'grants[${grants_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].updatedAt`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('grants[${grants_it}].updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"grants[${grants_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'grants[${grants_it}].account' has 'account' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].account`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].account`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.id' has 'id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].account.id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test('grants[${grants_it}].account.id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"grants[${grants_it}].account.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].account.name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('grants[${grants_it}].account.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"grants[${grants_it}].account.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.image' has 'image' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].account.image`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `grants[${grants_it}].account.email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('grants[${grants_it}].account.email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('grants[${grants_it}].account.email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "b38b936f-1d75-43e4-a714-4fd58b92b395",
      "name": "authorizations",
      "item": [
        {
          "id": "e0d2d902-1c22-41be-9bf2-3d3d080ea73f",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "2089b43f-111a-4e89-ba3f-5e301b315165",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"1972-10-09T06:05:33.815Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:9eb40e4d-e092-75bc-c2ea-0e49d19a0add\",\n      \"name\": \"'  Lpp-Lp}L.-'-}' {  ' .p' --'.-p }}L}}'L'.{ -} {'Lp{}{' --{{Lp--{Lp.}\",\n      \"updatedAt\": \"1992-11-02T13:03:42.915Z\"\n    },\n    {\n      \"createdAt\": \"2003-12-25T02:42:02.838Z\",\n      \"email\": \"<email>\",\n      \"id\": \"39b54d85-e785-44db-5e3d-4830ee550424\",\n      \"name\": \"}LL-'.-{'. ---L L-{LLL'{}p- '.{ . -p-pL pL  L{p}.L{\",\n      \"updatedAt\": \"2014-01-10T00:05:18.246Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "92065d97-9447-4cd4-876e-15305606f27d",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "829989c1-55ea-48f4-b682-e37e7764be8d",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /authorizations for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(ld.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`authorizations`)){\n                if(pm.expect(ld.get(pm.response.json(), `authorizations`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `authorizations`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the authorizations field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`authorizations`);\n            let authorizationsArray = ld.get(pm.response.json(), `authorizations`, \"\");\n            for (let authorizations_it = 0; authorizations_it < authorizationsArray.length; authorizations_it++) {\n                let iterator = authorizations_it;\n                \t\n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].id' has 'id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `authorizations[${authorizations_it}].id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test('authorizations[${authorizations_it}].id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"authorizations[${authorizations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `authorizations[${authorizations_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('authorizations[${authorizations_it}].name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"authorizations[${authorizations_it}].name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `authorizations[${authorizations_it}].email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('authorizations[${authorizations_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('authorizations[${authorizations_it}].email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('authorizations[${authorizations_it}].createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"authorizations[${authorizations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('authorizations[${authorizations_it}].updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"authorizations[${authorizations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "dc852bb5-ea0f-4b00-8190-eae1f868b3cf",
          "name": "Authorize another existing Account to access my Account",
          "request": {
            "name": "Authorize another existing Account to access my Account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "54fd57e9-a745-47ac-8eca-a9c5e094c686",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2009-02-10T16:25:26.866Z\",\n  \"email\": \"<email>\",\n  \"id\": \"9a30c3b0-d792-edf0-3d54-a0da3563471f\",\n  \"name\": \"}p . '.- { }}--}}p.p.'-{'-.-.{}-{{. p{. }L{}'}p{L.\",\n  \"updatedAt\": \"2011-07-27T01:16:56.670Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "949de327-e1e1-4ea4-ab96-26a638cbc6c5",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1d0ff43e-da26-41b2-854e-4ffc30b57e3a",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /authorizations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8ee8f82c-df47-49aa-9fcc-a482245cf85c",
          "name": "Remove Authorized Account",
          "request": {
            "name": "Remove Authorized Account",
            "description": {},
            "url": {
              "path": [
                "authorizations",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "50af6d3f-c8a5-4054-a566-30974098f33a",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2c2b26b4-8dcf-41f4-878d-9277b14c53ee",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fda99be3-9754-49df-902a-fbec86a7cd6a",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /authorizations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "6affd463-6546-4f81-a649-28a5cbd9e975",
      "name": "apikeys",
      "item": [
        {
          "id": "1c20f93a-8272-4d16-afa1-1677c7182e38",
          "name": "List API Keys you have created (session.type = 4)",
          "request": {
            "name": "List API Keys you have created (session.type = 4)",
            "description": {
              "content": "API keys to access your account via the API. API Keys are a session record with session.type equal to 4.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "df6d2512-ed8a-466e-94e4-123308e633c2",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"apikeys\": [\n    {\n      \"createdAt\": \"2006-07-16T20:45:43.735Z\",\n      \"id\": \"1f6d8bd6-174c-4fc1-e5cb-d810b38c3bf0\"\n    },\n    {\n      \"createdAt\": \"1982-06-21T16:37:13.886Z\",\n      \"id\": \"urn:uuid:b9470ae3-3e9e-d542-2c67-fa7faa37c16c\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0ad84a4d-3abb-4eb3-906d-ce8be4dd678e",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a7430f84-3d15-4fc0-a284-0fa41fe06106",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /apikeys for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(ld.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`apikeys`)){\n                if(pm.expect(ld.get(pm.response.json(), `apikeys`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `apikeys`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the apikeys field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`apikeys`);\n            let apikeysArray = ld.get(pm.response.json(), `apikeys`, \"\");\n            for (let apikeys_it = 0; apikeys_it < apikeysArray.length; apikeys_it++) {\n                let iterator = apikeys_it;\n                \t\n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].id' has 'id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `apikeys[${apikeys_it}].id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test('apikeys[${apikeys_it}].id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"apikeys[${apikeys_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('apikeys[${apikeys_it}].createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"apikeys[${apikeys_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "5ebb115b-8a50-4c39-a29d-700ca236c5cf",
          "name": "Create API Key (Create Session with type = 4)",
          "request": {
            "name": "Create API Key (Create Session with type = 4)",
            "description": {},
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "f9a6e215-89b0-4df8-a873-e91ef829b321",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1964-03-19T00:21:39.794Z\",\n  \"id\": \"urn:uuid:1cf71310-84ec-601c-af25-8fb0dc948d6f\",\n  \"token\": \"d36bc54e-5985-b635-7312-0283c33e5075:38b51c16-53c5-ddfe-d909-c623cecab4e0\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "cbe71195-206b-4d1c-a7fa-76672bf5ad78",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a5d70bb8-1f7d-4cad-b0ef-538d7748c9ec",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /apikeys for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `token` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n                if(pm.expect(ld.get(pm.response.json(), `token`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(ld.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8674aaa7-0962-47a1-b6ab-c874345013fd",
          "name": "/apikeys/:id",
          "request": {
            "name": "/apikeys/:id",
            "description": {},
            "url": {
              "path": [
                "apikeys",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "9c752385-3ba9-4b95-8671-fa71553c8fc3",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4680710f-8495-4aa5-8616-6654e880524e",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "86793829-fb33-4ab0-b39f-5a5cd2bcf46c",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /apikeys/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "a1308362-8e3e-4111-a228-e1fa168b3eb3",
      "name": "recipients",
      "item": [
        {
          "id": "6ab64b2d-51ac-4c70-914e-09aafea00151",
          "name": "branches",
          "item": [
            {
              "id": "7b1b385e-5d51-4d98-b228-23c62e2e5126",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "879343c5-7886-4459-a12b-a3f70c8b600f",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"934973925311\",\n      \"cocNumber\": \"14851088\",\n      \"createdAt\": \"2000-06-12T01:23:35.678Z\",\n      \"deregistrationDate\": \"1968-05-14\",\n      \"eoriNumber\": \"NL983222013\",\n      \"id\": \"a6483ccc-62fc-7582-5b49-310bb1c7dc19\",\n      \"tradeName\": \"consectetur eius\",\n      \"tradeNames\": [\n        \"in consectetur aute adipisicing\",\n        \"commodo nostrud enim\"\n      ],\n      \"updatedAt\": \"2022-06-15T15:33:18.524Z\",\n      \"email\": \"\\\";\\\"@[0.3.5.79]\",\n      \"phone\": \"mollit Excepteur ut reprehenderit\"\n    },\n    {\n      \"cocBranchNumber\": \"632501748513\",\n      \"cocNumber\": \"07118941\",\n      \"createdAt\": \"1986-02-06T13:36:45.824Z\",\n      \"deregistrationDate\": \"2008-12-13\",\n      \"eoriNumber\": \"NL285299819\",\n      \"id\": \"urn:uuid:3f5705ee-24de-0496-eb43-08efd750d0fc\",\n      \"tradeName\": \"enim dolore\",\n      \"tradeNames\": [\n        \"\",\n        \"Ut\"\n      ],\n      \"updatedAt\": \"2000-09-13T20:23:29.439Z\",\n      \"email\": \"\\\"Lz'_5sTsPn\\\"@[318.0.696.6]\",\n      \"phone\": \"consectetur nisi qui consequat\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "08c346c9-3b3b-4eca-ac76-ca83557d3f5d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "9776a20e-091a-46e6-bafe-a489796a6784",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/branches?coc-number=<string>&coc-branch-number=<string>&trade-name=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `branches` field',function(){\n            pm.expect(responseData.branches).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `total` field',function(){\n            pm.expect(responseData.total).to.exist.and.to.be.a(\"number\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "46a00258-3b12-4818-ab97-dab93f8e9bb6",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "df7d88b7-143b-4256-b4ab-ae265eb2c0bc",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2006-05-26T07:25:47.599Z\",\n  \"deregistrationDate\": \"1954-10-12\",\n  \"eoriNumber\": \"NL919783192\",\n  \"id\": \"urn:uuid:f2987e31-de87-1230-e31e-91fa459a6416\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"cupidatat dolore ipsum sunt dolor\",\n    \"Duis\"\n  ],\n  \"updatedAt\": \"1989-06-04T10:55:40.524Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "24b87012-88fe-4d5c-b1e8-cc331ab7d973",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2006-05-26T07:25:47.599Z\",\n  \"deregistrationDate\": \"1954-10-12\",\n  \"eoriNumber\": \"NL919783192\",\n  \"id\": \"urn:uuid:f2987e31-de87-1230-e31e-91fa459a6416\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"cupidatat dolore ipsum sunt dolor\",\n    \"Duis\"\n  ],\n  \"updatedAt\": \"1989-06-04T10:55:40.524Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "1215e152-b807-4219-99a5-9058f60e9864",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8c5324a8-092c-4eb6-ba69-6ab398925cc3",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/branches for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cocNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cocNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(ld.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n        pm.test('Response has the `cocBranchNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(ld.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n        pm.test('Response has the `tradeName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n                if(pm.expect(ld.get(pm.response.json(), `tradeName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n                if(pm.expect(ld.get(pm.response.json(), `tradeNames`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `tradeNames`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `eoriNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(ld.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n        pm.test('Response has the `deregistrationDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('deregistrationDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cocNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cocNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(ld.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n        pm.test('Response has the `cocBranchNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(ld.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n        pm.test('Response has the `tradeName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n                if(pm.expect(ld.get(pm.response.json(), `tradeName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n                if(pm.expect(ld.get(pm.response.json(), `tradeNames`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `tradeNames`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `eoriNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(ld.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n        pm.test('Response has the `deregistrationDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('deregistrationDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a8a9b431-2730-4058-af98-dd683e62d5be",
              "name": "{id}",
              "item": [
                {
                  "id": "260df28b-0061-4392-a892-ddde283231d6",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "1d9464de-58fd-4e5f-be93-08fed645fd3c",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2006-05-26T07:25:47.599Z\",\n  \"deregistrationDate\": \"1954-10-12\",\n  \"eoriNumber\": \"NL919783192\",\n  \"id\": \"urn:uuid:f2987e31-de87-1230-e31e-91fa459a6416\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"cupidatat dolore ipsum sunt dolor\",\n    \"Duis\"\n  ],\n  \"updatedAt\": \"1989-06-04T10:55:40.524Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "ee8a81ff-539b-4501-980f-dc0f88d758c9",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "d6983b29-16e3-4dcc-b949-1fcdf8c10681",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/branches/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cocNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cocNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(ld.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n        pm.test('Response has the `cocBranchNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(ld.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n        pm.test('Response has the `tradeName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n                if(pm.expect(ld.get(pm.response.json(), `tradeName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n                if(pm.expect(ld.get(pm.response.json(), `tradeNames`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `tradeNames`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `eoriNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(ld.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n        pm.test('Response has the `deregistrationDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('deregistrationDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "1409971c-7fcb-45de-8c59-3251c18ede58",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "234fa75f-dffa-4cb7-ba15-4ee5180f4479",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "5e1fca72-1e0a-44fa-9804-867197608a17",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "f7041664-f3a6-41f2-ad21-c90fb8b8ecbb",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/branches/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "6e2235ac-f7fc-4ad1-a53f-9b6819649906",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "db63cbb6-65b3-441f-a32c-0ca14dd42018",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2006-05-26T07:25:47.599Z\",\n  \"deregistrationDate\": \"1954-10-12\",\n  \"eoriNumber\": \"NL919783192\",\n  \"id\": \"urn:uuid:f2987e31-de87-1230-e31e-91fa459a6416\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"cupidatat dolore ipsum sunt dolor\",\n    \"Duis\"\n  ],\n  \"updatedAt\": \"1989-06-04T10:55:40.524Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "ecf42476-37ca-4ad2-a1eb-8ee57cc17f01",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "472ae2f3-7f6c-40e1-878e-462c9dd3a376",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/branches/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cocNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cocNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(ld.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n        pm.test('Response has the `cocBranchNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(ld.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n        pm.test('Response has the `tradeName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n                if(pm.expect(ld.get(pm.response.json(), `tradeName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n                if(pm.expect(ld.get(pm.response.json(), `tradeNames`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `tradeNames`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `eoriNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(ld.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n        pm.test('Response has the `deregistrationDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('deregistrationDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "c95b39e7-7a40-4e34-8e8e-32c9b24df537",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "5fdde2c0-ed98-4dca-a93e-044448f14e6a",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "cd852186-e9a5-4775-855b-c52b1735b06a",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1986-08-09T22:05:01.774Z\",\n      \"credentialUrl\": \"BBqnu3FtT:)m,xJVk@l{\",\n      \"endDate\": \"1975-04-07\",\n      \"id\": \"ea8bc642-9808-8a70-3631-05d8d4f59769\",\n      \"issuedAt\": \"1969-11-09T19:48:48.151Z\",\n      \"reference\": \"pariatur\",\n      \"startDate\": \"1992-11-10\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1982-10-18\",\n      \"updatedAt\": \"2023-03-13T10:55:04.790Z\"\n    },\n    {\n      \"createdAt\": \"1960-02-28T11:52:25.433Z\",\n      \"credentialUrl\": \"96myC4oK:/xakz\",\n      \"endDate\": \"2016-11-27\",\n      \"id\": \"1ef2add4-8baf-441b-c9da-6afc9668873e\",\n      \"issuedAt\": \"1987-10-14T15:04:07.888Z\",\n      \"reference\": \"aliqua repre\",\n      \"startDate\": \"1982-05-20\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1966-11-27\",\n      \"updatedAt\": \"2002-05-02T11:50:40.089Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "d1edfdcc-d182-4fa2-8c06-09f5e4115bf8",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "18620ad3-5384-454d-9033-c7b6880e5a6c",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/branches/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `registrations` field',function(){\n            pm.expect(responseData.registrations).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `total` field',function(){\n            pm.expect(responseData.total).to.exist.and.to.be.a(\"number\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "0cf10792-2b52-4196-9114-58f27a1e060f",
                      "name": "Create new Registration for the Recipient",
                      "request": {
                        "name": "Create new Registration for the Recipient",
                        "description": {
                          "content": "Create new Registration for the Recipient",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "139194e6-8ef2-4bdf-91f3-a2b62bb0fa56",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"2000-08-23T12:47:06.669Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:1b95bb53-7d36-b45b-1430-6694e2cfb9bd\",\n  \"issuedAt\": \"1945-06-19T15:30:28.618Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"2002-04-23\",\n  \"updatedAt\": \"1999-11-15T06:37:02.561Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "3ae10f37-a9d1-45ee-bb58-1ee23278a8e6",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "6389cc0e-5641-4b26-96b4-fd0673f29d47",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/branches/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('reference length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `startDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `startDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('startDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `endDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `endDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('endDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `credentialUrl` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n                if(pm.expect(ld.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(ld.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n        pm.test('Response has the `suspendedUntil` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n                if(pm.expect(ld.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('suspendedUntil format to be date',function(){\n            pm.expect(ld.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `issuedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `issuedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('issuedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "9e090be7-e4a3-4c95-8841-190e22c09aee",
          "name": "persons",
          "item": [
            {
              "id": "eabc622c-dbd6-494a-9b4d-fe8e86ef9cad",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "d9207310-a93c-4100-8048-89db3bf4430a",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"1995-02-20\",\n      \"birthPlace\": \"{  , Lp{'..{}.-'\",\n      \"countryCode\": \"DN\",\n      \"createdAt\": \"1983-03-09T10:21:49.661Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \".'{ 'L-'L}.\",\n      \"houseNumber\": \"260\",\n      \"houseNumberPostfix\": \"uigfbVdQh-XgYqk\",\n      \"id\": \"urn:uuid:6d096cb6-8779-5a5a-7811-816e1f1f915d\",\n      \"initials\": \"CE\",\n      \"lastName\": \"}' {}pL}L'pL. }pLp{-p'-- LpL..L{L-p.{}--}{{}L\",\n      \"middleName\": \"{  p}L .}} '\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"12674\",\n      \"reference\": \"ipsum\",\n      \"updatedAt\": \"2018-06-18T00:18:39.240Z\"\n    },\n    {\n      \"birthDate\": \"1981-08-20\",\n      \"birthPlace\": \"},{,L-{p'  L Lp,-L,..-}},,,pL{{L, L- , \",\n      \"countryCode\": \"YY\",\n      \"createdAt\": \"1981-09-11T22:14:18.391Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"{{L'.{  pLL.LLLp'-..''\",\n      \"houseNumber\": \"1\",\n      \"houseNumberPostfix\": \",l-WSzmuhlKEksLz,A\",\n      \"id\": \"urn:uuid:dfdff8f7-f5ef-83c9-42c1-b2eed5abcbd6\",\n      \"initials\": \"YBXMW\",\n      \"lastName\": \"-}p-p'}L'ppp}{ .  pL{ {-.}'{{L L'}}\",\n      \"middleName\": \"-L}p{''pp}L\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"5555ZO\",\n      \"reference\": \"adipisicing anim occaecat sint\",\n      \"updatedAt\": \"1993-02-13T13:54:56.292Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e4ce6e04-aae3-4dd1-a7f0-a3c658d7b34d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3f0de288-3621-4568-aabb-bcbf7ec0ae4a",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/persons?size=<integer>&offset=<integer>&name=<string>&birth-date=<date> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `persons` field',function(){\n            pm.expect(responseData.persons).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `total` field',function(){\n            pm.expect(responseData.total).to.exist.and.to.be.a(\"number\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "329149a3-8691-406c-ac2a-bc38b21aefc4",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "1da5fab4-eea7-4ac3-a202-b781c17173f9",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2002-06-26T20:42:03.670Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"b80a2df1-b6cc-e247-49a3-a90b431b8590\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2010-07-02T17:56:15.232Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "fc33bcca-b523-436d-9de1-4d603515c91c",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7742ebe0-d278-43c0-ac8f-52331be56b04",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/persons for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `initials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n                if(pm.expect(ld.get(pm.response.json(), `initials`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(ld.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n        pm.test('Response has the `firstName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n                if(pm.expect(ld.get(pm.response.json(), `firstName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(ld.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n        pm.test('Response has the `middleName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n                if(pm.expect(ld.get(pm.response.json(), `middleName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(ld.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n        pm.test('Response has the `lastName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n                if(pm.expect(ld.get(pm.response.json(), `lastName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(ld.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n        pm.test('Response has the `birthDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `birthDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('birthDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `birthPlace` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n                if(pm.expect(ld.get(pm.response.json(), `birthPlace`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `postalCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `postalCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(ld.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n        pm.test('Response has the `houseNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `houseNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(ld.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n        pm.test('Response has the `houseNumberPostfix` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n                if(pm.expect(ld.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(ld.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n        pm.test('Response has the `countryCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `countryCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(ld.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('reference length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "9c4ef30c-568b-47b6-ad82-f8aea0cbbf14",
              "name": "{id}",
              "item": [
                {
                  "id": "1e0189d5-ce51-4472-a1f7-db0092dd598e",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "365f6ea5-5140-41ff-957a-d75cc94ab08a",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2002-06-26T20:42:03.670Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"b80a2df1-b6cc-e247-49a3-a90b431b8590\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2010-07-02T17:56:15.232Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "94208627-cf2c-4bfa-b20b-3d6e7634db64",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "4b0341cd-10f3-4ddd-bbfc-9fbbd71634aa",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/persons/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `initials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n                if(pm.expect(ld.get(pm.response.json(), `initials`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(ld.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n        pm.test('Response has the `firstName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n                if(pm.expect(ld.get(pm.response.json(), `firstName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(ld.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n        pm.test('Response has the `middleName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n                if(pm.expect(ld.get(pm.response.json(), `middleName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(ld.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n        pm.test('Response has the `lastName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n                if(pm.expect(ld.get(pm.response.json(), `lastName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(ld.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n        pm.test('Response has the `birthDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `birthDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('birthDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `birthPlace` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n                if(pm.expect(ld.get(pm.response.json(), `birthPlace`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `postalCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `postalCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(ld.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n        pm.test('Response has the `houseNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `houseNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(ld.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n        pm.test('Response has the `houseNumberPostfix` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n                if(pm.expect(ld.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(ld.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n        pm.test('Response has the `countryCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `countryCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(ld.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('reference length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "0dc0e2e7-679f-4224-bf59-398f39734d74",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "36fd4028-8dbe-4604-9034-5d00c7cd5149",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "a7a82595-46b6-4d17-8c34-70167bc1e3c9",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "02e7eff6-1ca7-486d-adc9-7363a8161087",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/persons/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "59fab458-14a7-49b6-8108-a6a3f66b2cfe",
                  "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                  "request": {
                    "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                    "description": {
                      "content": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "36e14d8f-0cf1-4584-9d3f-6a483c3e07f4",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2002-06-26T20:42:03.670Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"b80a2df1-b6cc-e247-49a3-a90b431b8590\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2010-07-02T17:56:15.232Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "fd0b2805-bd9d-467f-8a03-ea72f8d847f8",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "cca943a5-601e-4922-b251-efdfcf6cae45",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/persons/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `initials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n                if(pm.expect(ld.get(pm.response.json(), `initials`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(ld.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n        pm.test('Response has the `firstName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n                if(pm.expect(ld.get(pm.response.json(), `firstName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(ld.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n        pm.test('Response has the `middleName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n                if(pm.expect(ld.get(pm.response.json(), `middleName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(ld.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n        pm.test('Response has the `lastName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n                if(pm.expect(ld.get(pm.response.json(), `lastName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(ld.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n        pm.test('Response has the `birthDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `birthDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('birthDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `birthPlace` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n                if(pm.expect(ld.get(pm.response.json(), `birthPlace`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n        pm.test('email format to be email',function(){ \n            pm.expect(ld.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n        })\n\n        pm.test('Response has the `postalCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `postalCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(ld.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n        pm.test('Response has the `houseNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `houseNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(ld.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n        pm.test('Response has the `houseNumberPostfix` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n                if(pm.expect(ld.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(ld.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n        pm.test('Response has the `countryCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `countryCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(ld.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('reference length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "dbda0511-7cf6-44f1-95fe-a8aa7dad25a2",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "a579ac34-c254-419f-b27c-c55bdea641b6",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "96e901bb-7c9b-4d42-b4eb-ef81d0a95c72",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1968-06-17T02:40:42.133Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:00e27e14-83bc-e487-d8b8-7e4808978ae7\",\n      \"issuedAt\": \"1998-04-22T11:37:33.386Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2007-10-17\",\n      \"updatedAt\": \"2005-11-20T08:17:04.506Z\"\n    },\n    {\n      \"createdAt\": \"1997-06-27T11:08:29.672Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:9eba4822-8b86-5260-0046-9619811fb919\",\n      \"issuedAt\": \"1983-04-12T05:52:40.920Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1948-01-03\",\n      \"updatedAt\": \"1967-02-09T19:47:42.542Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "2f66f4d1-4c0f-479a-9f76-948da9d1eecf",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "1ab7eac3-dea8-4f2e-8120-153aa6606280",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/persons/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `registrations` field',function(){\n            pm.expect(responseData.registrations).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `total` field',function(){\n            pm.expect(responseData.total).to.exist.and.to.be.a(\"number\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "c807dace-0fde-43e6-96a0-163cbc4fab7c",
                      "name": "Create new Registration",
                      "request": {
                        "name": "Create new Registration",
                        "description": {
                          "content": "Create new Registration",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "35a18a32-578d-495d-ad12-20c4527fd137",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"2000-08-23T12:47:06.669Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:1b95bb53-7d36-b45b-1430-6694e2cfb9bd\",\n  \"issuedAt\": \"1945-06-19T15:30:28.618Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"2002-04-23\",\n  \"updatedAt\": \"1999-11-15T06:37:02.561Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "112f8568-07e4-4947-b8af-4f3cabb5236c",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "fdb528c5-651f-46d9-a536-5c3889bb98a9",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /recipients/persons/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('reference length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `startDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `startDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('startDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `endDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `endDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('endDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `credentialUrl` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n                if(pm.expect(ld.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(ld.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n        pm.test('Response has the `suspendedUntil` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n                if(pm.expect(ld.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('suspendedUntil format to be date',function(){\n            pm.expect(ld.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `issuedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `issuedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('issuedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "a77432de-9c2f-4343-b1df-875164ddbbf0",
      "name": "registrations",
      "item": [
        {
          "id": "62789bd5-773d-4185-8bfe-56cb306d2c12",
          "name": "/registrations",
          "request": {
            "name": "/registrations",
            "description": {},
            "url": {
              "path": [
                "registrations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                },
                {
                  "disabled": false,
                  "key": "recipient-id",
                  "value": "{{recipient-id}}",
                  "description": "Filter results by Recipient ID (UUID)"
                },
                {
                  "disabled": false,
                  "key": "credential-url",
                  "value": "{{credential-url}}",
                  "description": "Filter results on specific Credential (URL)."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "ea8161b0-1750-43c4-af40-eeef1b12d075",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"2014-12-22T14:59:48.468Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"a94b2e06-d26f-263c-ae93-b6011bf61462\",\n      \"issuedAt\": \"1958-09-20T07:17:37.952Z\",\n      \"recipient\": {\n        \"id\": \"urn:uuid:99acfeff-8d15-77a3-91c5-4701276f5abd\",\n        \"name\": \" . -{-{'' p{.} \",\n        \"type\": \"employee\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1952-07-23\",\n      \"updatedAt\": \"2000-06-24T08:05:15.313Z\"\n    },\n    {\n      \"createdAt\": \"1951-02-10T18:19:08.159Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"5048c753-4d6c-b7a0-67f9-c37b84911871\",\n      \"issuedAt\": \"2023-09-03T07:01:28.050Z\",\n      \"recipient\": {\n        \"id\": \"41073fc8-bb95-f6f5-c567-beff7bc5b0d7\",\n        \"name\": \".p. { {.L.p'. . L . {{L} L. .'-.LL-'{-} --L.'L{p -.{L-{L}-}pp}.p.}.'{--p-L'{}}L{'}p.}L.p{{.-{- '{ p\",\n        \"type\": \"employee\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1969-05-23\",\n      \"updatedAt\": \"1982-04-27T00:07:50.895Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9c87fd74-2e57-42ee-9134-c5c27412ca40",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7735043f-6ccf-4a7e-9741-17a2161b138f",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /registrations?size=<integer>&offset=<integer>&recipient-id=<uuid>&credential-url=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `registrations` field',function(){\n            pm.expect(responseData.registrations).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `total` field',function(){\n            pm.expect(responseData.total).to.exist.and.to.be.a(\"number\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `description` field',function(){\n            pm.expect(responseData.description).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `error` field',function(){\n            pm.expect(responseData.error).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8455a619-a63c-46ec-97a9-b788e93e2d1c",
          "name": "{id}",
          "item": [
            {
              "id": "0bf3a9c4-3555-4703-b901-689caec8170d",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "013cbb2d-e24d-442b-bda6-5da9dc14e556",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1951-01-09T05:29:52.809Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:2d34d123-98d5-7665-ccff-e0a30595c514\",\n  \"issuedAt\": \"1978-01-29T10:52:26.191Z\",\n  \"recipient\": {\n    \"id\": \"urn:uuid:d9fd0ef6-2231-153c-138d-027b3e1883c5\",\n    \"name\": \"p{{pL}p}L'L}.ppL'p'L{}.'} L. '{ -p}{}L{}-}\",\n    \"type\": \"branch\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1974-09-09\",\n  \"updatedAt\": \"2015-11-16T10:20:47.491Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2634df09-37e6-4d15-bac0-7bdb2e173a8a",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "90076880-7fe9-4dfe-9d88-3cf2c819f0b9",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /registrations/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('reference length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `startDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `startDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('startDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `endDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `endDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('endDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `credentialUrl` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n                if(pm.expect(ld.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(ld.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n        pm.test('Response has the `suspendedUntil` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n                if(pm.expect(ld.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('suspendedUntil format to be date',function(){\n            pm.expect(ld.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `issuedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `issuedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('issuedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `recipient` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recipient`)){\n                if(pm.expect(ld.get(pm.response.json(), `recipient`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recipient`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `recipient.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `recipient.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recipient.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('recipient.id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `recipient.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `recipient.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recipient.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n        pm.test('Response has the `recipient.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `recipient.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recipient.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('recipient.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "17778187-17b5-4db0-9652-2db7a95c6c78",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "21d31791-9333-463b-853a-a0f0a47eac9f",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "67eebddc-148e-457b-9c4b-8f8de059423a",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "5a5a0bc4-95f5-4820-b11c-26d20d4b64ec",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /registrations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "223111f3-7251-434c-8861-e014ad1bb224",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "933c4093-2575-49ae-8b53-63b04028755b",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"2024-06-13T09:22:56.548Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:8cae309a-d7b6-3150-0f40-37fa16c1e1c1\",\n  \"issuedAt\": \"1972-05-08T15:41:03.108Z\",\n  \"recipient\": {\n    \"id\": \"b6a26e91-6313-20d0-c5b1-e4b3fb3f3914\",\n    \"name\": \"p.p--.-'-''{L-'-}-.'pL -}.. }..}{-LpL{}p''ppL.  - }LLpL.LL.\",\n    \"type\": \"employee\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"<date>\",\n  \"updatedAt\": \"2019-04-04T11:06:37.058Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3315dd36-2386-4188-804d-f2505bfea3cc",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "449f0354-ec5c-4352-89bc-8a26c1fc0400",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /registrations/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('reference length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `startDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `startDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('startDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `endDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `endDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('endDate format to be date',function(){\n            pm.expect(ld.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `credentialUrl` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n                if(pm.expect(ld.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(ld.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n        pm.test('Response has the `suspendedUntil` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n                if(pm.expect(ld.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('suspendedUntil format to be date',function(){\n            pm.expect(ld.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n        })\n\n        pm.test('Response has the `issuedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `issuedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('issuedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `createdAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `createdAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('createdAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `updatedAt` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n                if(pm.expect(ld.get(pm.response.json(), `updatedAt`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('updatedAt format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `recipient` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recipient`)){\n                if(pm.expect(ld.get(pm.response.json(), `recipient`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recipient`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `recipient.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `recipient.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recipient.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('recipient.id format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n        pm.test('Response has the `recipient.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `recipient.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recipient.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(ld.get(responseData, \"recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n        pm.test('Response has the `recipient.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `recipient.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recipient.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('recipient.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "caece508-8bd5-45aa-9b54-e71d9d199033",
      "name": "/errors",
      "request": {
        "name": "/errors",
        "description": {},
        "url": {
          "path": [
            "errors"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "abbbb0de-8221-46bf-ad43-51a68e87074b",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "errors"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  },\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /errors for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "16656f22-c08c-4e26-a26a-dbaf33332aad",
      "name": "/kvk/zoeken",
      "request": {
        "name": "/kvk/zoeken",
        "description": {},
        "url": {
          "path": [
            "kvk",
            "zoeken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "kvkNummer",
              "value": "{{kvkNummer}}"
            },
            {
              "disabled": false,
              "key": "vestigingsnummer",
              "value": "{{vestigingsnummer}}",
              "description": "Filter results based on reference"
            },
            {
              "disabled": false,
              "key": "handelsnaam",
              "value": "{{handelsnaam}}",
              "description": "Filter results based on reference"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "f8229037-1b87-4da7-8773-926f20cfd458",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "kvk",
                "zoeken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "kvkNummer",
                  "value": "{{kvkNummer}}"
                },
                {
                  "key": "vestigingsnummer",
                  "value": "{{vestigingsnummer}}"
                },
                {
                  "key": "handelsnaam",
                  "value": "{{handelsnaam}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "\"See kvk OAS specs\"",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-spec-test-v1 using AI Type  and AI Model \n\n\nTest generated for /kvk/zoeken?kvkNummer=<string>&vestigingsnummer=<string>&handelsnaam=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          });\n\n        }\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "9ce12c2c-b23c-44a0-b4af-76dcc759ebda",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}