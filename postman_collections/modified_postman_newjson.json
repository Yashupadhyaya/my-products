{
  "item": [
    {
      "id": "bdac3c83-901e-4a3d-82a4-db1c813d9bc7",
      "name": "forms",
      "item": [
        {
          "id": "3cbb3c0d-9947-4c47-98fe-58c46d77fab0",
          "name": "{form-type}",
          "item": [
            {
              "id": "8ff2fe77-ab58-446d-83e1-b195e3ee6ea6",
              "name": "Start conversation - creates new application",
              "request": {
                "name": "Start conversation - creates new application",
                "description": {},
                "url": {
                  "path": [
                    "forms",
                    ":form-type"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{form-type}}",
                      "key": "form-type",
                      "description": "(Required) form type identifier\n"
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Correlation Id",
                    "key": "X-HSBC-Request-Correlation-Id",
                    "value": "{{X-HSBC-Request-Correlation-Id}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "2a80521b-047c-4b14-8f62-05c3fc781ed5",
                  "name": "Successful Evaluation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "forms",
                        ":form-type"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-type}}",
                          "key": "form-type",
                          "description": "(Required) form type identifier\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) Authorization Header",
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "disabled": false,
                        "description": "(Required) Correlation Id",
                        "key": "X-HSBC-Request-Correlation-Id",
                        "value": "{{X-HSBC-Request-Correlation-Id}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"encryptedResponseBase64\": \"U2VlIHRoZSB1bmVuY3J5cHRlZCBleGFtcGxlcyBmb3IgcmVzcG9uc2UgYm9keQ==\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "27b2c32f-2be5-4e1c-80a6-9f9e79f5c8fe",
                  "name": "Bad Request Response",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "forms",
                        ":form-type"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-type}}",
                          "key": "form-type",
                          "description": "(Required) form type identifier\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) Authorization Header",
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "disabled": false,
                        "description": "(Required) Correlation Id",
                        "key": "X-HSBC-Request-Correlation-Id",
                        "value": "{{X-HSBC-Request-Correlation-Id}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"type\": \"/problem-details/types/client-id-missing\",\n  \"title\": \"Client Id missing\",\n  \"status\": \"400\",\n  \"detail\": \"Client Id is missing. Request header not set.\",\n  \"instance\": \"d72b7d9b-ccd9-4f98-8fb8-dbb3067effc3\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "48267186-be48-4d96-971a-1c4b6015fb36",
                  "name": "Internal Server Error Response",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "forms",
                        ":form-type"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-type}}",
                          "key": "form-type",
                          "description": "(Required) form type identifier\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) Authorization Header",
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "disabled": false,
                        "description": "(Required) Correlation Id",
                        "key": "X-HSBC-Request-Correlation-Id",
                        "value": "{{X-HSBC-Request-Correlation-Id}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"type\": \"/problem-details/types/internal-server-error\",\n  \"title\": \"Internal Server Error\",\n  \"status\": \"500\",\n  \"detail\": \"Internal Server Error.\",\n  \"instance\": \"1d9294e7-20ea-4c34-9a89-c18a47254e8e\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Test-5619 using AI Type  and AI Model \n\n\nTest generated for /forms/:form-type for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful Evaluation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.information` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.information`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.information`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.information`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.warning` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.warning`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.warning`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.warning`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.error` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.error`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.error`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.error`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.generalError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.generalError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.generalError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.generalError`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.questionsError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.questionsError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.questionsError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.questionsError`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currentViewId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currentViewId`)){\n                if(pm.expect(ld.get(pm.response.json(), `currentViewId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currentViewId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `nextViewId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`nextViewId`)){\n                if(pm.expect(ld.get(pm.response.json(), `nextViewId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `nextViewId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `domainSessionId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`domainSessionId`)){\n                if(pm.expect(ld.get(pm.response.json(), `domainSessionId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `domainSessionId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `views` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`views`)){\n                if(pm.expect(ld.get(pm.response.json(), `views`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `views`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the views field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views`);\n            let viewsArray = ld.get(pm.response.json(), `views`, \"\");\n            for (let views_it = 0; views_it < viewsArray.length; views_it++) {\n                let iterator = views_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].form-instance-id' has 'form-instance-id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].form-instance-id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].form-instance-id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].mode' has 'mode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].mode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].mode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].nextViewId' has 'nextViewId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].nextViewId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].nextViewId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].title' has 'title' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].title`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].title`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].completed' has 'completed' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].completed`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].completed`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].errors' has 'errors' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].errors`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].errors`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].nextViewIdRule' has 'nextViewIdRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].nextViewIdRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].nextViewIdRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'viewsArray' has 'items' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items.empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items.empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items.empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items`);\n            let itemsArray = ld.get(pm.response.json(), `views[${views_it}].items`, \"\");\n            for (let items_it = 0; items_it < itemsArray.length; items_it++) {\n                let iterator = items_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].form-instance-id' has 'form-instance-id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].form-instance-id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].form-instance-id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('views[${views_it}].items[${items_it}].type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"views[${views_it}].items[${items_it}].type\", \"\")).to.include.oneOf([\"QUESTION\",\"LEFT_NAV_MENU\",\"SECTION\",\"TEXT\",\"ACTIONS\",\"NOTIFICATION\",\"PROCESS_COMPLETE\",\"INVALID\"]);\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props' has 'props' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.tooltip' has 'tooltip' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.tooltip`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.tooltip`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.readOnlyRule' has 'readOnlyRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.readOnlyRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.readOnlyRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.valueRule' has 'valueRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.valueRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.valueRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.visible' has 'visible' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.visible`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.visible`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.readOnly' has 'readOnly' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.readOnly`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.readOnly`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'validations' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.validations field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.validations`);\n            let validationsArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`, \"\");\n            for (let validations_it = 0; validations_it < validationsArray.length; validations_it++) {\n                let iterator = validations_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule' has 'rule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].message' has 'message' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].message`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].message`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'menuItems' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.menuItems field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.menuItems`);\n            let menuItemsArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`, \"\");\n            for (let menuItems_it = 0; menuItems_it < menuItemsArray.length; menuItems_it++) {\n                let iterator = menuItems_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId' has 'viewId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule' has 'nextViewIdRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options' has 'options' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.view' has 'view' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.view`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.view`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'choices' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.options.choices field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.options.choices`);\n            let choicesArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`, \"\");\n            for (let choices_it = 0; choices_it < choicesArray.length; choices_it++) {\n                let iterator = choices_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value' has 'value' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].visibleRule' has 'visibleRule' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].visibleRule`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].links' has 'links' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].links`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].links`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].parentId' has 'parentId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].parentId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].parentId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].links' has 'links' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].links`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].links`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].parentId' has 'parentId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].parentId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].parentId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `count` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`count`)){\n                if(pm.expect(ld.get(responseData, `count`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `count`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cause` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cause`)){\n                if(pm.expect(ld.get(pm.response.json(), `cause`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cause`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "01211734-d297-4b88-9d92-ed29c0232860",
              "name": "{form-instance-id}",
              "item": [
                {
                  "id": "08a72b79-39b2-4eea-923e-4f001cfdd7dd",
                  "name": "Restart conversation - reads existing application data",
                  "request": {
                    "name": "Restart conversation - reads existing application data",
                    "description": {},
                    "url": {
                      "path": [
                        "forms",
                        ":form-type",
                        ":form-instance-id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-type}}",
                          "key": "form-type",
                          "description": "(Required) form type identifier\n"
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-instance-id}}",
                          "key": "form-instance-id",
                          "description": "(Required) form identifier\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) Correlation Id",
                        "key": "X-HSBC-Request-Correlation-Id",
                        "value": "{{X-HSBC-Request-Correlation-Id}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "dc6ea5f5-e207-478c-9525-0cdac66b6834",
                      "name": "Successful Evaluation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"encryptedResponseBase64\": \"U2VlIHRoZSB1bmVuY3J5cHRlZCBleGFtcGxlcyBmb3IgcmVzcG9uc2UgYm9keQ==\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "82e54385-1688-4125-ab3c-2bb3227958ce",
                      "name": "Bad Request Response",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"type\": \"/problem-details/types/client-id-missing\",\n  \"title\": \"Client Id missing\",\n  \"status\": \"400\",\n  \"detail\": \"Client Id is missing. Request header not set.\",\n  \"instance\": \"d72b7d9b-ccd9-4f98-8fb8-dbb3067effc3\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "200a5ccd-b91b-4a9c-9223-8482834f950a",
                      "name": "Internal Server Error Response",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"type\": \"/problem-details/types/internal-server-error\",\n  \"title\": \"Internal Server Error\",\n  \"status\": \"500\",\n  \"detail\": \"Internal Server Error.\",\n  \"instance\": \"1d9294e7-20ea-4c34-9a89-c18a47254e8e\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Test-5619 using AI Type  and AI Model \n\n\nTest generated for /forms/:form-type/:form-instance-id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful Evaluation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.information` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.information`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.information`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.information`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.warning` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.warning`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.warning`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.warning`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.error` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.error`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.error`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.error`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.generalError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.generalError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.generalError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.generalError`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.questionsError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.questionsError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.questionsError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.questionsError`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currentViewId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currentViewId`)){\n                if(pm.expect(ld.get(pm.response.json(), `currentViewId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currentViewId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `nextViewId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`nextViewId`)){\n                if(pm.expect(ld.get(pm.response.json(), `nextViewId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `nextViewId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `domainSessionId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`domainSessionId`)){\n                if(pm.expect(ld.get(pm.response.json(), `domainSessionId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `domainSessionId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `views` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`views`)){\n                if(pm.expect(ld.get(pm.response.json(), `views`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `views`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the views field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views`);\n            let viewsArray = ld.get(pm.response.json(), `views`, \"\");\n            for (let views_it = 0; views_it < viewsArray.length; views_it++) {\n                let iterator = views_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].form-instance-id' has 'form-instance-id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].form-instance-id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].form-instance-id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].mode' has 'mode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].mode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].mode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].nextViewId' has 'nextViewId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].nextViewId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].nextViewId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].title' has 'title' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].title`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].title`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].completed' has 'completed' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].completed`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].completed`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].errors' has 'errors' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].errors`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].errors`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].nextViewIdRule' has 'nextViewIdRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].nextViewIdRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].nextViewIdRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'viewsArray' has 'items' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items.empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items.empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items.empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items`);\n            let itemsArray = ld.get(pm.response.json(), `views[${views_it}].items`, \"\");\n            for (let items_it = 0; items_it < itemsArray.length; items_it++) {\n                let iterator = items_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].form-instance-id' has 'form-instance-id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].form-instance-id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].form-instance-id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('views[${views_it}].items[${items_it}].type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"views[${views_it}].items[${items_it}].type\", \"\")).to.include.oneOf([\"QUESTION\",\"LEFT_NAV_MENU\",\"SECTION\",\"TEXT\",\"ACTIONS\",\"NOTIFICATION\",\"PROCESS_COMPLETE\",\"INVALID\"]);\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props' has 'props' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.tooltip' has 'tooltip' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.tooltip`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.tooltip`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.readOnlyRule' has 'readOnlyRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.readOnlyRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.readOnlyRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.valueRule' has 'valueRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.valueRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.valueRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.visible' has 'visible' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.visible`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.visible`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.readOnly' has 'readOnly' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.readOnly`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.readOnly`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'validations' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.validations field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.validations`);\n            let validationsArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`, \"\");\n            for (let validations_it = 0; validations_it < validationsArray.length; validations_it++) {\n                let iterator = validations_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule' has 'rule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].message' has 'message' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].message`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].message`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'menuItems' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.menuItems field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.menuItems`);\n            let menuItemsArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`, \"\");\n            for (let menuItems_it = 0; menuItems_it < menuItemsArray.length; menuItems_it++) {\n                let iterator = menuItems_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId' has 'viewId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule' has 'nextViewIdRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options' has 'options' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.view' has 'view' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.view`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.view`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'choices' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.options.choices field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.options.choices`);\n            let choicesArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`, \"\");\n            for (let choices_it = 0; choices_it < choicesArray.length; choices_it++) {\n                let iterator = choices_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value' has 'value' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].visibleRule' has 'visibleRule' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].visibleRule`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].links' has 'links' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].links`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].links`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].parentId' has 'parentId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].parentId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].parentId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].links' has 'links' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].links`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].links`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].parentId' has 'parentId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].parentId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].parentId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `count` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`count`)){\n                if(pm.expect(ld.get(responseData, `count`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `count`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cause` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cause`)){\n                if(pm.expect(ld.get(pm.response.json(), `cause`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cause`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "8a98e906-80f1-4e34-af1d-d00e17f6f387",
                  "name": "Continue conversation - updates existing application data",
                  "request": {
                    "name": "Continue conversation - updates existing application data",
                    "description": {
                      "content": "Continue conversation - updates existing application data",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "forms",
                        ":form-type",
                        ":form-instance-id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-type}}",
                          "key": "form-type",
                          "description": "(Required) form type identifier\n"
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-instance-id}}",
                          "key": "form-instance-id",
                          "description": "(Required) form identifier\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) Correlation Id",
                        "key": "X-HSBC-Request-Correlation-Id",
                        "value": "{{X-HSBC-Request-Correlation-Id}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "auth": null,
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"form-instance-id\": \"{{form-instance-id}}\",\n    \"type\": \"{{type}}\",\n    \"status\": \"{{status}}\",\n    \"currentViewId\": \"{{currentViewId}}\",\n    \"nextViewId\": \"{{nextViewId}}\",\n    \"data\": {\n        \"legalEntityName\": \"{{legalEntityName}}\",\n        \"isPubliclyListed\": \"{{isPubliclyListed}}\",\n        \"hsbcApprovedExchange\": \"{{hsbcApprovedExchange}}\",\n        \"stockExchangeTicker\": \"{{stockExchangeTicker}}\",\n        \"customerIdentificationNumber\": \"{{customerIdentificationNumber}}\",\n        \"grid\": \"{{grid}}\",\n        \"masterGroupName\": \"{{masterGroupName}}\",\n        \"referringRelationshipManager\": \"{{referringRelationshipManager}}\",\n        \"caseManager\": \"{{caseManager}}\",\n        \"associateRelationshipManager\": \"{{associateRelationshipManager}}\",\n        \"isRequestingCreditApproval\": \"{{isRequestingCreditApproval}}\",\n        \"companyTaxObligations\": {\n            \"taxIdentificationCountry\": \"{{taxIdentificationCountry}}\",\n            \"taxIdentificationNumber\": \"{{taxIdentificationNumber}}\",\n            \"pendingTinCheckbox\": \"{{pendingTinCheckbox}}\",\n            \"reasonForNoTaxIdentification\": \"{{reasonForNoTaxIdentification}}\"\n        },\n        \"additionalManagers\": {\n            \"partyType\": \"{{partyType}}\",\n            \"managerFirstName\": \"{{managerFirstName}}\",\n            \"managerLastName\": \"{{managerLastName}}\"\n        },\n        \"contactInfoFirstName\": \"{{contactInfoFirstName}}\",\n        \"contactInfoLastName\": \"{{contactInfoLastName}}\",\n        \"email\": \"{{email}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"role\": \"{{role}}\",\n        \"legalEntityIdentifier\": \"{{legalEntityIdentifier}}\",\n        \"tradingNames\": {\n            \"tradingName\": \"{{tradingName}}\"\n        },\n        \"incorporationCountry\": \"{{incorporationCountry}}\",\n        \"incorporationState\": \"{{incorporationState}}\",\n        \"incorporationDate\": \"{{incorporationDate}}\",\n        \"entityType\": \"{{entityType}}\",\n        \"companyIndustryDescription\": \"{{companyIndustryDescription}}\",\n        \"isNBFI\": \"{{isNBFI}}\",\n        \"businessAddress\": \"{{businessAddress}}\",\n        \"registeredAddressDifferent\": \"{{registeredAddressDifferent}}\",\n        \"registeredAddress\": \"{{registeredAddress}}\",\n        \"mailingAddressDifferent\": \"{{mailingAddressDifferent}}\",\n        \"mailingAddress\": \"{{mailingAddress}}\",\n        \"annualRevenue\": \"{{annualRevenue}}\",\n        \"customerSegments\": \"{{customerSegments}}\",\n        \"initialSourceOfWealth\": \"{{initialSourceOfWealth}}\",\n        \"ongoingSourceOfWealth\": \"{{ongoingSourceOfWealth}}\",\n        \"companyTinApplicationDocument\": \"{{companyTinApplicationDocument}}\",\n        \"anyBusinessOutsideOfUS\": \"{{anyBusinessOutsideOfUS}}\",\n        \"physicalAssetsCountry\": \"{{physicalAssetsCountry}}\",\n        \"revenueCountries\": \"{{revenueCountries}}\",\n        \"revenueCountriesNone\": \"{{revenueCountriesNone}}\",\n        \"purchaseCountries\": \"{{purchaseCountries}}\",\n        \"purchaseCountriesNone\": \"{{purchaseCountriesNone}}\",\n        \"paymentsOnbehalfOfClients\": \"{{paymentsOnbehalfOfClients}}\",\n        \"beneficialOwnerThreshold\": \"{{beneficialOwnerThreshold}}\",\n        \"ownersControllersTable\": {\n            \"individualOrEntity\": \"{{individualOrEntity}}\",\n            \"individualRelationshipType\": \"{{individualRelationshipType}}\",\n            \"entityRelationshipType\": \"{{entityRelationshipType}}\",\n            \"ownersFirstName\": \"{{ownersFirstName}}\",\n            \"ownersMiddleName\": \"{{ownersMiddleName}}\",\n            \"ownersLastName\": \"{{ownersLastName}}\",\n            \"companyLegalName\": \"{{companyLegalName}}\",\n            \"legalEntityType\": \"{{legalEntityType}}\",\n            \"mostInfluential\": \"{{mostInfluential}}\",\n            \"ownershipPercent\": \"{{ownershipPercent}}\",\n            \"incorporateCountry\": \"{{incorporateCountry}}\",\n            \"incorporateState\": \"{{incorporateState}}\",\n            \"companyRole\": \"{{companyRole}}\",\n            \"dateOfBirth\": \"{{dateOfBirth}}\",\n            \"ownerTaxIdentificationCountry\": \"{{ownerTaxIdentificationCountry}}\",\n            \"ownersTaxIdentificationNumber\": \"{{ownersTaxIdentificationNumber}}\",\n            \"ownersPendingTinCheckbox\": \"{{ownersPendingTinCheckbox}}\",\n            \"ownersReasonForNoTaxIdentification\": \"{{ownersReasonForNoTaxIdentification}}\",\n            \"citizenship\": \"{{citizenship}}\",\n            \"ownersResidencyStatus\": \"{{ownersResidencyStatus}}\",\n            \"address\": \"{{address}}\",\n            \"identificationProofChkBox\": \"{{identificationProofChkBox}}\",\n            \"proofOfIdentification\": \"{{proofOfIdentification}}\",\n            \"idNumberOrDescription\": \"{{idNumberOrDescription}}\",\n            \"countryIssued\": \"{{countryIssued}}\",\n            \"stateIssued\": \"{{stateIssued}}\",\n            \"issuedDate\": \"{{issuedDate}}\",\n            \"expirationDate\": \"{{expirationDate}}\",\n            \"ownersTinApplicationDocument\": \"{{ownersTinApplicationDocument}}\"\n        },\n        \"directOrIntermediate\": \"{{directOrIntermediate}}\",\n        \"companyOwnershipStructure\": \"{{companyOwnershipStructure}}\",\n        \"disregardedEntity\": \"{{disregardedEntity}}\",\n        \"regardedOwnerCIN\": \"{{regardedOwnerCIN}}\",\n        \"regardedOwnerLegalName\": \"{{regardedOwnerLegalName}}\",\n        \"exemptionReasonCode\": \"{{exemptionReasonCode}}\",\n        \"taxform-type\": \"{{taxform-type}}\",\n        \"taxFormDate\": \"{{taxFormDate}}\",\n        \"productsAndServicesTable\": {\n            \"productType\": \"{{productType}}\",\n            \"selectedDepositProduct\": \"{{selectedDepositProduct}}\",\n            \"selectedLendingProduct\": \"{{selectedLendingProduct}}\",\n            \"selectedGlobalMarketsProduct\": \"{{selectedGlobalMarketsProduct}}\",\n            \"selectedGLCMServiceProduct\": \"{{selectedGLCMServiceProduct}}\",\n            \"selectedGlobalTradeFinanceProduct\": \"{{selectedGlobalTradeFinanceProduct}}\",\n            \"selectedIssuerServiceProduct\": \"{{selectedIssuerServiceProduct}}\",\n            \"depositCheckingAccountType\": \"{{depositCheckingAccountType}}\",\n            \"depositSavingsAccountType\": \"{{depositSavingsAccountType}}\",\n            \"depositGlobalMoneyAccountType\": \"{{depositGlobalMoneyAccountType}}\",\n            \"wholesaleDepositAccountType\": \"{{wholesaleDepositAccountType}}\",\n            \"globalAssetManagementDepositAccountType\": \"{{globalAssetManagementDepositAccountType}}\",\n            \"globalMarketForeignExAccountType\": \"{{globalMarketForeignExAccountType}}\",\n            \"globalMarketDerivativeAccountType\": \"{{globalMarketDerivativeAccountType}}\",\n            \"globalMarketEquityAccountType\": \"{{globalMarketEquityAccountType}}\",\n            \"globalMarketFixedIncomeAccountType\": \"{{globalMarketFixedIncomeAccountType}}\",\n            \"globalMarketMetalsAccountType\": \"{{globalMarketMetalsAccountType}}\",\n            \"globalMarketCapitalFinanceAccountType\": \"{{globalMarketCapitalFinanceAccountType}}\",\n            \"typeOfRemoteDepositCapture\": \"{{typeOfRemoteDepositCapture}}\",\n            \"clientUnderlyingNeed\": \"{{clientUnderlyingNeed}}\",\n            \"relevanceOfMultipleProduct\": \"{{relevanceOfMultipleProduct}}\",\n            \"multipleProductNames\": \"{{multipleProductNames}}\",\n            \"selectedSolutionWithReason\": \"{{selectedSolutionWithReason}}\",\n            \"hsbcNetProfile\": \"{{hsbcNetProfile}}\",\n            \"hsbcNetEChannelId\": \"{{hsbcNetEChannelId}}\",\n            \"serviceInterestRate\": \"{{serviceInterestRate}}\",\n            \"accountCombinedWithStatement\": \"{{accountCombinedWithStatement}}\",\n            \"linkWithDisbursementAccount\": \"{{linkWithDisbursementAccount}}\",\n            \"existingClientAccountNumber\": \"{{existingClientAccountNumber}}\",\n            \"conjunction\": \"{{conjunction}}\",\n            \"descriptionLine\": \"{{descriptionLine}}\",\n            \"greenLimit\": \"{{greenLimit}}\",\n            \"globalWalletCurrencies\": \"{{globalWalletCurrencies}}\",\n            \"securedCorporateCard\": \"{{securedCorporateCard}}\",\n            \"typeOfDocumentation\": \"{{typeOfDocumentation}}\"\n        },\n        \"specialPurposeVehichle\": \"{{specialPurposeVehichle}}\",\n        \"siteVisitConducted\": \"{{siteVisitConducted}}\",\n        \"siteVisitExceptionReason\": \"{{siteVisitExceptionReason}}\",\n        \"siteVisitDate\": \"{{siteVisitDate}}\",\n        \"siteVisitAddress\": \"{{siteVisitAddress}}\",\n        \"siteVisitCompanyPerson\": \"{{siteVisitCompanyPerson}}\",\n        \"siteVisitAccesssor\": \"{{siteVisitAccesssor}}\",\n        \"siteVisitObservations\": \"{{siteVisitObservations}}\",\n        \"accountActivityTable\": {\n            \"selectedDepositProduct\": \"{{accountActivityTable.selectedDepositProduct}}\",\n            \"purposeOfAccount\": \"{{purposeOfAccount}}\",\n            \"accountInitialDeposit\": \"{{accountInitialDeposit}}\",\n            \"initialDepositSourceOfFunds\": \"{{initialDepositSourceOfFunds}}\",\n            \"activityCash\": \"{{activityCash}}\",\n            \"transactionalActivityCash\": {\n                \"numOfDepositsCash\": \"{{numOfDepositsCash}}\",\n                \"valueOfDepositsCash\": \"{{valueOfDepositsCash}}\",\n                \"numOfWithdrawalsCash\": \"{{numOfWithdrawalsCash}}\",\n                \"valueOfWithdrawalsCash\": \"{{valueOfWithdrawalsCash}}\"\n            },\n            \"activityUSWire\": \"{{activityUSWire}}\",\n            \"transactionalActivityUSWire\": {\n                \"numOfDepositsUSWire\": \"{{numOfDepositsUSWire}}\",\n                \"valueOfDepositsUSWire\": \"{{valueOfDepositsUSWire}}\",\n                \"numOfWithdrawalsUSWire\": \"{{numOfWithdrawalsUSWire}}\",\n                \"valueOfWithdrawalsUSWire\": \"{{valueOfWithdrawalsUSWire}}\"\n            },\n            \"activityChecks\": \"{{activityChecks}}\",\n            \"transactionalActivityChecks\": {\n                \"numOfDepositsChecks\": \"{{numOfDepositsChecks}}\",\n                \"valueOfDepositsChecks\": \"{{valueOfDepositsChecks}}\",\n                \"numOfWithdrawalsChecks\": \"{{numOfWithdrawalsChecks}}\",\n                \"valueOfWithdrawalsChecks\": \"{{valueOfWithdrawalsChecks}}\"\n            },\n            \"activityACH\": \"{{activityACH}}\",\n            \"transactionalActivityACH\": {\n                \"numOfDepositsACH\": \"{{numOfDepositsACH}}\",\n                \"valueOfDepositsACH\": \"{{valueOfDepositsACH}}\",\n                \"numOfWithdrawalsACH\": \"{{numOfWithdrawalsACH}}\",\n                \"valueOfWithdrawalsACH\": \"{{valueOfWithdrawalsACH}}\"\n            },\n            \"activityIntWire\": \"{{activityIntWire}}\",\n            \"transactionalActivityIntWire\": {\n                \"numOfDepositsIntWire\": \"{{numOfDepositsIntWire}}\",\n                \"valueOfDepositsIntWire\": \"{{valueOfDepositsIntWire}}\",\n                \"numOfWithdrawalsIntWire\": \"{{numOfWithdrawalsIntWire}}\",\n                \"valueOfWithdrawalsIntWire\": \"{{valueOfWithdrawalsIntWire}}\",\n                \"sourceDestinationCountry\": \"{{sourceDestinationCountry}}\"\n            }\n        },\n        \"hsbcNetBillingAccount\": \"{{hsbcNetBillingAccount}}\",\n        \"hsbcNetSystemAdminControl\": \"{{hsbcNetSystemAdminControl}}\",\n        \"hsbcNetTable\": {\n            \"hsbcNetFirstName\": \"{{hsbcNetFirstName}}\",\n            \"hsbcNetLastName\": \"{{hsbcNetLastName}}\",\n            \"hsbcNetPhCtryCde\": \"{{hsbcNetPhCtryCde}}\",\n            \"hsbcNetPhNumber\": \"{{hsbcNetPhNumber}}\",\n            \"hsbcNetEmailId\": \"{{hsbcNetEmailId}}\",\n            \"hsbcNetDOB\": \"{{hsbcNetDOB}}\"\n        },\n        \"soleSigner\": \"{{soleSigner}}\",\n        \"signersTable\": {\n            \"signerFirstName\": \"{{signerFirstName}}\",\n            \"signerLastName\": \"{{signerLastName}}\",\n            \"signerRole\": \"{{signerRole}}\",\n            \"signerType\": \"{{signerType}}\",\n            \"signerEmail\": \"{{signerEmail}}\",\n            \"signerCountryCode\": \"{{signerCountryCode}}\",\n            \"signerMobNumber\": \"{{signerMobNumber}}\"\n        },\n        \"attestationBearerShares\": \"{{attestationBearerShares}}\",\n        \"bearerSharesIssued\": \"{{bearerSharesIssued}}\",\n        \"articlesOfAssociationDocument\": \"{{articlesOfAssociationDocument}}\",\n        \"attestationSixthFilterAndSanctions\": \"{{attestationSixthFilterAndSanctions}}\",\n        \"nonComplianceSixthFilterAndSanctions\": \"{{nonComplianceSixthFilterAndSanctions}}\",\n        \"attestationBusinessActivities\": \"{{attestationBusinessActivities}}\",\n        \"nonComplianceBusinessActivities\": \"{{nonComplianceBusinessActivities}}\",\n        \"attestorFirstName\": \"{{attestorFirstName}}\",\n        \"attestorLastName\": \"{{attestorLastName}}\",\n        \"attestorEmailAddress\": \"{{attestorEmailAddress}}\",\n        \"attestorRole\": \"{{attestorRole}}\",\n        \"documentsUpload\": \"{{documentsUpload}}\",\n        \"documentsTable\": {\n            \"documentType\": \"{{documentType}}\",\n            \"documentDescription\": \"{{documentDescription}}\"\n        }\n    },\n    \"links\": {\n        \"commodoad\": [\n            \"{{commodoad}}\"\n        ],\n        \"dolore7\": [\n            \"{{dolore7}}\"\n        ],\n        \"Duis47c\": [\n            \"{{Duis47c}}\"\n        ]\n    },\n    \"parentId\": \"{{parentId}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "6ae2ce05-cbce-474f-be9f-143492e85fca",
                      "name": "Successful Evaluation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"encryptedRequestBase64\": \"{{encryptedRequestBase64}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"encryptedResponseBase64\": \"U2VlIHRoZSB1bmVuY3J5cHRlZCBleGFtcGxlcyBmb3IgcmVzcG9uc2UgYm9keQ==\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "94d1b021-8e5f-4156-9d06-df48103efb26",
                      "name": "Bad Request Response",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"encryptedRequestBase64\": \"{{encryptedRequestBase64}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"type\": \"/problem-details/types/client-id-missing\",\n  \"title\": \"Client Id missing\",\n  \"status\": \"400\",\n  \"detail\": \"Client Id is missing. Request header not set.\",\n  \"instance\": \"d72b7d9b-ccd9-4f98-8fb8-dbb3067effc3\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "af8d1000-5553-4ffa-a57b-e5ed83e1956d",
                      "name": "Internal Server Error Response",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"encryptedRequestBase64\": \"{{encryptedRequestBase64}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"type\": \"/problem-details/types/internal-server-error\",\n  \"title\": \"Internal Server Error\",\n  \"status\": \"500\",\n  \"detail\": \"Internal Server Error.\",\n  \"instance\": \"1d9294e7-20ea-4c34-9a89-c18a47254e8e\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Test-5619 using AI Type  and AI Model \n\n\nTest generated for /forms/:form-type/:form-instance-id for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful Evaluation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.information` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.information`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.information`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.information`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.warning` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.warning`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.warning`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.warning`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.error` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.error`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.error`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.error`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.generalError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.generalError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.generalError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.generalError`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.questionsError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.questionsError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.questionsError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.questionsError`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currentViewId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currentViewId`)){\n                if(pm.expect(ld.get(pm.response.json(), `currentViewId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currentViewId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `nextViewId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`nextViewId`)){\n                if(pm.expect(ld.get(pm.response.json(), `nextViewId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `nextViewId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `domainSessionId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`domainSessionId`)){\n                if(pm.expect(ld.get(pm.response.json(), `domainSessionId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `domainSessionId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `views` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`views`)){\n                if(pm.expect(ld.get(pm.response.json(), `views`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `views`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the views field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views`);\n            let viewsArray = ld.get(pm.response.json(), `views`, \"\");\n            for (let views_it = 0; views_it < viewsArray.length; views_it++) {\n                let iterator = views_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].form-instance-id' has 'form-instance-id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].form-instance-id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].form-instance-id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].mode' has 'mode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].mode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].mode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].nextViewId' has 'nextViewId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].nextViewId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].nextViewId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].title' has 'title' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].title`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].title`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].completed' has 'completed' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].completed`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].completed`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].errors' has 'errors' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].errors`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].errors`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].nextViewIdRule' has 'nextViewIdRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].nextViewIdRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].nextViewIdRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'viewsArray' has 'items' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items.empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items.empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items.empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items`);\n            let itemsArray = ld.get(pm.response.json(), `views[${views_it}].items`, \"\");\n            for (let items_it = 0; items_it < itemsArray.length; items_it++) {\n                let iterator = items_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].form-instance-id' has 'form-instance-id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].form-instance-id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].form-instance-id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('views[${views_it}].items[${items_it}].type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"views[${views_it}].items[${items_it}].type\", \"\")).to.include.oneOf([\"QUESTION\",\"LEFT_NAV_MENU\",\"SECTION\",\"TEXT\",\"ACTIONS\",\"NOTIFICATION\",\"PROCESS_COMPLETE\",\"INVALID\"]);\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props' has 'props' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.tooltip' has 'tooltip' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.tooltip`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.tooltip`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.readOnlyRule' has 'readOnlyRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.readOnlyRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.readOnlyRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.valueRule' has 'valueRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.valueRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.valueRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.visible' has 'visible' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.visible`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.visible`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.readOnly' has 'readOnly' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.readOnly`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.readOnly`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'validations' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.validations field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.validations`);\n            let validationsArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`, \"\");\n            for (let validations_it = 0; validations_it < validationsArray.length; validations_it++) {\n                let iterator = validations_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule' has 'rule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].message' has 'message' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].message`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].message`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'menuItems' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.menuItems field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.menuItems`);\n            let menuItemsArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`, \"\");\n            for (let menuItems_it = 0; menuItems_it < menuItemsArray.length; menuItems_it++) {\n                let iterator = menuItems_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId' has 'viewId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule' has 'nextViewIdRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options' has 'options' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.view' has 'view' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.view`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.view`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'choices' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.options.choices field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.options.choices`);\n            let choicesArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`, \"\");\n            for (let choices_it = 0; choices_it < choicesArray.length; choices_it++) {\n                let iterator = choices_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value' has 'value' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].visibleRule' has 'visibleRule' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].visibleRule`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].links' has 'links' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].links`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].links`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].parentId' has 'parentId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].parentId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].parentId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].links' has 'links' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].links`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].links`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].parentId' has 'parentId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].parentId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].parentId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `count` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`count`)){\n                if(pm.expect(ld.get(responseData, `count`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `count`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cause` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cause`)){\n                if(pm.expect(ld.get(pm.response.json(), `cause`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cause`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "eda39dbb-ca9f-4d27-b72e-25cc0b696fb5",
                  "name": "Continue conversation - submits existing application data",
                  "request": {
                    "name": "Continue conversation - submits existing application data",
                    "description": {
                      "content": "Continue conversation - submits existing application data",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "forms",
                        ":form-type",
                        ":form-instance-id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-type}}",
                          "key": "form-type",
                          "description": "(Required) form type identifier\n"
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-instance-id}}",
                          "key": "form-instance-id",
                          "description": "(Required) form identifier\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) Correlation Id",
                        "key": "X-HSBC-Request-Correlation-Id",
                        "value": "{{X-HSBC-Request-Correlation-Id}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "auth": null,
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"form-instance-id\": \"{{form-instance-id}}\",\n    \"type\": \"{{type}}\",\n    \"status\": \"{{status}}\",\n    \"currentViewId\": \"{{currentViewId}}\",\n    \"nextViewId\": \"{{nextViewId}}\",\n    \"data\": {\n        \"legalEntityName\": \"{{legalEntityName}}\",\n        \"isPubliclyListed\": \"{{isPubliclyListed}}\",\n        \"hsbcApprovedExchange\": \"{{hsbcApprovedExchange}}\",\n        \"stockExchangeTicker\": \"{{stockExchangeTicker}}\",\n        \"customerIdentificationNumber\": \"{{customerIdentificationNumber}}\",\n        \"grid\": \"{{grid}}\",\n        \"masterGroupName\": \"{{masterGroupName}}\",\n        \"referringRelationshipManager\": \"{{referringRelationshipManager}}\",\n        \"caseManager\": \"{{caseManager}}\",\n        \"associateRelationshipManager\": \"{{associateRelationshipManager}}\",\n        \"isRequestingCreditApproval\": \"{{isRequestingCreditApproval}}\",\n        \"companyTaxObligations\": {\n            \"taxIdentificationCountry\": \"{{taxIdentificationCountry}}\",\n            \"taxIdentificationNumber\": \"{{taxIdentificationNumber}}\",\n            \"pendingTinCheckbox\": \"{{pendingTinCheckbox}}\",\n            \"reasonForNoTaxIdentification\": \"{{reasonForNoTaxIdentification}}\"\n        },\n        \"additionalManagers\": {\n            \"partyType\": \"{{partyType}}\",\n            \"managerFirstName\": \"{{managerFirstName}}\",\n            \"managerLastName\": \"{{managerLastName}}\"\n        },\n        \"contactInfoFirstName\": \"{{contactInfoFirstName}}\",\n        \"contactInfoLastName\": \"{{contactInfoLastName}}\",\n        \"email\": \"{{email}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"role\": \"{{role}}\",\n        \"legalEntityIdentifier\": \"{{legalEntityIdentifier}}\",\n        \"tradingNames\": {\n            \"tradingName\": \"{{tradingName}}\"\n        },\n        \"incorporationCountry\": \"{{incorporationCountry}}\",\n        \"incorporationState\": \"{{incorporationState}}\",\n        \"incorporationDate\": \"{{incorporationDate}}\",\n        \"entityType\": \"{{entityType}}\",\n        \"companyIndustryDescription\": \"{{companyIndustryDescription}}\",\n        \"isNBFI\": \"{{isNBFI}}\",\n        \"businessAddress\": \"{{businessAddress}}\",\n        \"registeredAddressDifferent\": \"{{registeredAddressDifferent}}\",\n        \"registeredAddress\": \"{{registeredAddress}}\",\n        \"mailingAddressDifferent\": \"{{mailingAddressDifferent}}\",\n        \"mailingAddress\": \"{{mailingAddress}}\",\n        \"annualRevenue\": \"{{annualRevenue}}\",\n        \"customerSegments\": \"{{customerSegments}}\",\n        \"initialSourceOfWealth\": \"{{initialSourceOfWealth}}\",\n        \"ongoingSourceOfWealth\": \"{{ongoingSourceOfWealth}}\",\n        \"companyTinApplicationDocument\": \"{{companyTinApplicationDocument}}\",\n        \"anyBusinessOutsideOfUS\": \"{{anyBusinessOutsideOfUS}}\",\n        \"physicalAssetsCountry\": \"{{physicalAssetsCountry}}\",\n        \"revenueCountries\": \"{{revenueCountries}}\",\n        \"revenueCountriesNone\": \"{{revenueCountriesNone}}\",\n        \"purchaseCountries\": \"{{purchaseCountries}}\",\n        \"purchaseCountriesNone\": \"{{purchaseCountriesNone}}\",\n        \"paymentsOnbehalfOfClients\": \"{{paymentsOnbehalfOfClients}}\",\n        \"beneficialOwnerThreshold\": \"{{beneficialOwnerThreshold}}\",\n        \"ownersControllersTable\": {\n            \"individualOrEntity\": \"{{individualOrEntity}}\",\n            \"individualRelationshipType\": \"{{individualRelationshipType}}\",\n            \"entityRelationshipType\": \"{{entityRelationshipType}}\",\n            \"ownersFirstName\": \"{{ownersFirstName}}\",\n            \"ownersMiddleName\": \"{{ownersMiddleName}}\",\n            \"ownersLastName\": \"{{ownersLastName}}\",\n            \"companyLegalName\": \"{{companyLegalName}}\",\n            \"legalEntityType\": \"{{legalEntityType}}\",\n            \"mostInfluential\": \"{{mostInfluential}}\",\n            \"ownershipPercent\": \"{{ownershipPercent}}\",\n            \"incorporateCountry\": \"{{incorporateCountry}}\",\n            \"incorporateState\": \"{{incorporateState}}\",\n            \"companyRole\": \"{{companyRole}}\",\n            \"dateOfBirth\": \"{{dateOfBirth}}\",\n            \"ownerTaxIdentificationCountry\": \"{{ownerTaxIdentificationCountry}}\",\n            \"ownersTaxIdentificationNumber\": \"{{ownersTaxIdentificationNumber}}\",\n            \"ownersPendingTinCheckbox\": \"{{ownersPendingTinCheckbox}}\",\n            \"ownersReasonForNoTaxIdentification\": \"{{ownersReasonForNoTaxIdentification}}\",\n            \"citizenship\": \"{{citizenship}}\",\n            \"ownersResidencyStatus\": \"{{ownersResidencyStatus}}\",\n            \"address\": \"{{address}}\",\n            \"identificationProofChkBox\": \"{{identificationProofChkBox}}\",\n            \"proofOfIdentification\": \"{{proofOfIdentification}}\",\n            \"idNumberOrDescription\": \"{{idNumberOrDescription}}\",\n            \"countryIssued\": \"{{countryIssued}}\",\n            \"stateIssued\": \"{{stateIssued}}\",\n            \"issuedDate\": \"{{issuedDate}}\",\n            \"expirationDate\": \"{{expirationDate}}\",\n            \"ownersTinApplicationDocument\": \"{{ownersTinApplicationDocument}}\"\n        },\n        \"directOrIntermediate\": \"{{directOrIntermediate}}\",\n        \"companyOwnershipStructure\": \"{{companyOwnershipStructure}}\",\n        \"disregardedEntity\": \"{{disregardedEntity}}\",\n        \"regardedOwnerCIN\": \"{{regardedOwnerCIN}}\",\n        \"regardedOwnerLegalName\": \"{{regardedOwnerLegalName}}\",\n        \"exemptionReasonCode\": \"{{exemptionReasonCode}}\",\n        \"taxform-type\": \"{{taxform-type}}\",\n        \"taxFormDate\": \"{{taxFormDate}}\",\n        \"productsAndServicesTable\": {\n            \"productType\": \"{{productType}}\",\n            \"selectedDepositProduct\": \"{{selectedDepositProduct}}\",\n            \"selectedLendingProduct\": \"{{selectedLendingProduct}}\",\n            \"selectedGlobalMarketsProduct\": \"{{selectedGlobalMarketsProduct}}\",\n            \"selectedGLCMServiceProduct\": \"{{selectedGLCMServiceProduct}}\",\n            \"selectedGlobalTradeFinanceProduct\": \"{{selectedGlobalTradeFinanceProduct}}\",\n            \"selectedIssuerServiceProduct\": \"{{selectedIssuerServiceProduct}}\",\n            \"depositCheckingAccountType\": \"{{depositCheckingAccountType}}\",\n            \"depositSavingsAccountType\": \"{{depositSavingsAccountType}}\",\n            \"depositGlobalMoneyAccountType\": \"{{depositGlobalMoneyAccountType}}\",\n            \"wholesaleDepositAccountType\": \"{{wholesaleDepositAccountType}}\",\n            \"globalAssetManagementDepositAccountType\": \"{{globalAssetManagementDepositAccountType}}\",\n            \"globalMarketForeignExAccountType\": \"{{globalMarketForeignExAccountType}}\",\n            \"globalMarketDerivativeAccountType\": \"{{globalMarketDerivativeAccountType}}\",\n            \"globalMarketEquityAccountType\": \"{{globalMarketEquityAccountType}}\",\n            \"globalMarketFixedIncomeAccountType\": \"{{globalMarketFixedIncomeAccountType}}\",\n            \"globalMarketMetalsAccountType\": \"{{globalMarketMetalsAccountType}}\",\n            \"globalMarketCapitalFinanceAccountType\": \"{{globalMarketCapitalFinanceAccountType}}\",\n            \"typeOfRemoteDepositCapture\": \"{{typeOfRemoteDepositCapture}}\",\n            \"clientUnderlyingNeed\": \"{{clientUnderlyingNeed}}\",\n            \"relevanceOfMultipleProduct\": \"{{relevanceOfMultipleProduct}}\",\n            \"multipleProductNames\": \"{{multipleProductNames}}\",\n            \"selectedSolutionWithReason\": \"{{selectedSolutionWithReason}}\",\n            \"hsbcNetProfile\": \"{{hsbcNetProfile}}\",\n            \"hsbcNetEChannelId\": \"{{hsbcNetEChannelId}}\",\n            \"serviceInterestRate\": \"{{serviceInterestRate}}\",\n            \"accountCombinedWithStatement\": \"{{accountCombinedWithStatement}}\",\n            \"linkWithDisbursementAccount\": \"{{linkWithDisbursementAccount}}\",\n            \"existingClientAccountNumber\": \"{{existingClientAccountNumber}}\",\n            \"conjunction\": \"{{conjunction}}\",\n            \"descriptionLine\": \"{{descriptionLine}}\",\n            \"greenLimit\": \"{{greenLimit}}\",\n            \"globalWalletCurrencies\": \"{{globalWalletCurrencies}}\",\n            \"securedCorporateCard\": \"{{securedCorporateCard}}\",\n            \"typeOfDocumentation\": \"{{typeOfDocumentation}}\"\n        },\n        \"specialPurposeVehichle\": \"{{specialPurposeVehichle}}\",\n        \"siteVisitConducted\": \"{{siteVisitConducted}}\",\n        \"siteVisitExceptionReason\": \"{{siteVisitExceptionReason}}\",\n        \"siteVisitDate\": \"{{siteVisitDate}}\",\n        \"siteVisitAddress\": \"{{siteVisitAddress}}\",\n        \"siteVisitCompanyPerson\": \"{{siteVisitCompanyPerson}}\",\n        \"siteVisitAccesssor\": \"{{siteVisitAccesssor}}\",\n        \"siteVisitObservations\": \"{{siteVisitObservations}}\",\n        \"accountActivityTable\": {\n            \"selectedDepositProduct\": \"{{accountActivityTable.selectedDepositProduct}}\",\n            \"purposeOfAccount\": \"{{purposeOfAccount}}\",\n            \"accountInitialDeposit\": \"{{accountInitialDeposit}}\",\n            \"initialDepositSourceOfFunds\": \"{{initialDepositSourceOfFunds}}\",\n            \"activityCash\": \"{{activityCash}}\",\n            \"transactionalActivityCash\": {\n                \"numOfDepositsCash\": \"{{numOfDepositsCash}}\",\n                \"valueOfDepositsCash\": \"{{valueOfDepositsCash}}\",\n                \"numOfWithdrawalsCash\": \"{{numOfWithdrawalsCash}}\",\n                \"valueOfWithdrawalsCash\": \"{{valueOfWithdrawalsCash}}\"\n            },\n            \"activityUSWire\": \"{{activityUSWire}}\",\n            \"transactionalActivityUSWire\": {\n                \"numOfDepositsUSWire\": \"{{numOfDepositsUSWire}}\",\n                \"valueOfDepositsUSWire\": \"{{valueOfDepositsUSWire}}\",\n                \"numOfWithdrawalsUSWire\": \"{{numOfWithdrawalsUSWire}}\",\n                \"valueOfWithdrawalsUSWire\": \"{{valueOfWithdrawalsUSWire}}\"\n            },\n            \"activityChecks\": \"{{activityChecks}}\",\n            \"transactionalActivityChecks\": {\n                \"numOfDepositsChecks\": \"{{numOfDepositsChecks}}\",\n                \"valueOfDepositsChecks\": \"{{valueOfDepositsChecks}}\",\n                \"numOfWithdrawalsChecks\": \"{{numOfWithdrawalsChecks}}\",\n                \"valueOfWithdrawalsChecks\": \"{{valueOfWithdrawalsChecks}}\"\n            },\n            \"activityACH\": \"{{activityACH}}\",\n            \"transactionalActivityACH\": {\n                \"numOfDepositsACH\": \"{{numOfDepositsACH}}\",\n                \"valueOfDepositsACH\": \"{{valueOfDepositsACH}}\",\n                \"numOfWithdrawalsACH\": \"{{numOfWithdrawalsACH}}\",\n                \"valueOfWithdrawalsACH\": \"{{valueOfWithdrawalsACH}}\"\n            },\n            \"activityIntWire\": \"{{activityIntWire}}\",\n            \"transactionalActivityIntWire\": {\n                \"numOfDepositsIntWire\": \"{{numOfDepositsIntWire}}\",\n                \"valueOfDepositsIntWire\": \"{{valueOfDepositsIntWire}}\",\n                \"numOfWithdrawalsIntWire\": \"{{numOfWithdrawalsIntWire}}\",\n                \"valueOfWithdrawalsIntWire\": \"{{valueOfWithdrawalsIntWire}}\",\n                \"sourceDestinationCountry\": \"{{sourceDestinationCountry}}\"\n            }\n        },\n        \"hsbcNetBillingAccount\": \"{{hsbcNetBillingAccount}}\",\n        \"hsbcNetSystemAdminControl\": \"{{hsbcNetSystemAdminControl}}\",\n        \"hsbcNetTable\": {\n            \"hsbcNetFirstName\": \"{{hsbcNetFirstName}}\",\n            \"hsbcNetLastName\": \"{{hsbcNetLastName}}\",\n            \"hsbcNetPhCtryCde\": \"{{hsbcNetPhCtryCde}}\",\n            \"hsbcNetPhNumber\": \"{{hsbcNetPhNumber}}\",\n            \"hsbcNetEmailId\": \"{{hsbcNetEmailId}}\",\n            \"hsbcNetDOB\": \"{{hsbcNetDOB}}\"\n        },\n        \"soleSigner\": \"{{soleSigner}}\",\n        \"signersTable\": {\n            \"signerFirstName\": \"{{signerFirstName}}\",\n            \"signerLastName\": \"{{signerLastName}}\",\n            \"signerRole\": \"{{signerRole}}\",\n            \"signerType\": \"{{signerType}}\",\n            \"signerEmail\": \"{{signerEmail}}\",\n            \"signerCountryCode\": \"{{signerCountryCode}}\",\n            \"signerMobNumber\": \"{{signerMobNumber}}\"\n        },\n        \"attestationBearerShares\": \"{{attestationBearerShares}}\",\n        \"bearerSharesIssued\": \"{{bearerSharesIssued}}\",\n        \"articlesOfAssociationDocument\": \"{{articlesOfAssociationDocument}}\",\n        \"attestationSixthFilterAndSanctions\": \"{{attestationSixthFilterAndSanctions}}\",\n        \"nonComplianceSixthFilterAndSanctions\": \"{{nonComplianceSixthFilterAndSanctions}}\",\n        \"attestationBusinessActivities\": \"{{attestationBusinessActivities}}\",\n        \"nonComplianceBusinessActivities\": \"{{nonComplianceBusinessActivities}}\",\n        \"attestorFirstName\": \"{{attestorFirstName}}\",\n        \"attestorLastName\": \"{{attestorLastName}}\",\n        \"attestorEmailAddress\": \"{{attestorEmailAddress}}\",\n        \"attestorRole\": \"{{attestorRole}}\",\n        \"documentsUpload\": \"{{documentsUpload}}\",\n        \"documentsTable\": {\n            \"documentType\": \"{{documentType}}\",\n            \"documentDescription\": \"{{documentDescription}}\"\n        }\n    },\n    \"links\": {\n        \"nullaa\": [\n            \"{{nullaa}}\"\n        ],\n        \"in_c0\": [\n            \"{{in_c0}}\"\n        ],\n        \"dolore_d31\": [\n            \"{{dolore_d31}}\"\n        ]\n    },\n    \"parentId\": \"{{parentId}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "e5142024-679a-4b76-8eae-be0b04f0a2c7",
                      "name": "Successful Evaluation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"encryptedRequestBase64\": \"{{encryptedRequestBase64}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"encryptedResponseBase64\": \"U2VlIHRoZSB1bmVuY3J5cHRlZCBleGFtcGxlcyBmb3IgcmVzcG9uc2UgYm9keQ==\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "faf33a10-5c0b-4114-80e8-5985c2f3aa04",
                      "name": "Bad Request Response",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"encryptedRequestBase64\": \"{{encryptedRequestBase64}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"type\": \"/problem-details/types/client-id-missing\",\n  \"title\": \"Client Id missing\",\n  \"status\": \"400\",\n  \"detail\": \"Client Id is missing. Request header not set.\",\n  \"instance\": \"d72b7d9b-ccd9-4f98-8fb8-dbb3067effc3\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "3b416bf3-4b97-468d-becb-dc6942f6f1fe",
                      "name": "Internal Server Error Response",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"encryptedRequestBase64\": \"{{encryptedRequestBase64}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"type\": \"/problem-details/types/internal-server-error\",\n  \"title\": \"Internal Server Error\",\n  \"status\": \"500\",\n  \"detail\": \"Internal Server Error.\",\n  \"instance\": \"1d9294e7-20ea-4c34-9a89-c18a47254e8e\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Test-5619 using AI Type  and AI Model \n\n\nTest generated for /forms/:form-type/:form-instance-id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful Evaluation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.information` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.information`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.information`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.information`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.warning` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.warning`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.warning`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.warning`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.error` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.error`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.error`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.error`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.generalError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.generalError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.generalError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.generalError`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.questionsError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.questionsError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.questionsError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.questionsError`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currentViewId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currentViewId`)){\n                if(pm.expect(ld.get(pm.response.json(), `currentViewId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currentViewId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `nextViewId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`nextViewId`)){\n                if(pm.expect(ld.get(pm.response.json(), `nextViewId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `nextViewId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `domainSessionId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`domainSessionId`)){\n                if(pm.expect(ld.get(pm.response.json(), `domainSessionId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `domainSessionId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `views` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`views`)){\n                if(pm.expect(ld.get(pm.response.json(), `views`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `views`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the views field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views`);\n            let viewsArray = ld.get(pm.response.json(), `views`, \"\");\n            for (let views_it = 0; views_it < viewsArray.length; views_it++) {\n                let iterator = views_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].form-instance-id' has 'form-instance-id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].form-instance-id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].form-instance-id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].mode' has 'mode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].mode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].mode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].nextViewId' has 'nextViewId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].nextViewId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].nextViewId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].title' has 'title' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].title`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].title`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].completed' has 'completed' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].completed`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].completed`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].errors' has 'errors' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].errors`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].errors`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].nextViewIdRule' has 'nextViewIdRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].nextViewIdRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].nextViewIdRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'viewsArray' has 'items' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items.empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items.empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items.empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items`);\n            let itemsArray = ld.get(pm.response.json(), `views[${views_it}].items`, \"\");\n            for (let items_it = 0; items_it < itemsArray.length; items_it++) {\n                let iterator = items_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].form-instance-id' has 'form-instance-id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].form-instance-id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].form-instance-id`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('views[${views_it}].items[${items_it}].type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"views[${views_it}].items[${items_it}].type\", \"\")).to.include.oneOf([\"QUESTION\",\"LEFT_NAV_MENU\",\"SECTION\",\"TEXT\",\"ACTIONS\",\"NOTIFICATION\",\"PROCESS_COMPLETE\",\"INVALID\"]);\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props' has 'props' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.tooltip' has 'tooltip' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.tooltip`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.tooltip`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.readOnlyRule' has 'readOnlyRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.readOnlyRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.readOnlyRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.valueRule' has 'valueRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.valueRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.valueRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.visible' has 'visible' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.visible`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.visible`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.readOnly' has 'readOnly' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.readOnly`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.readOnly`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'validations' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.validations field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.validations`);\n            let validationsArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations`, \"\");\n            for (let validations_it = 0; validations_it < validationsArray.length; validations_it++) {\n                let iterator = validations_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule' has 'rule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].rule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].message' has 'message' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].message`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].message`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.validations[${validations_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'menuItems' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.menuItems field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.menuItems`);\n            let menuItemsArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems`, \"\");\n            for (let menuItems_it = 0; menuItems_it < menuItemsArray.length; menuItems_it++) {\n                let iterator = menuItems_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId' has 'viewId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].viewId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule' has 'visibleRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].visibleRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule' has 'nextViewIdRule' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].nextViewIdRule`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.menuItems[${menuItems_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options' has 'options' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.view' has 'view' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.view`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.view`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'itemsArray' has 'choices' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the views[${views_it}].items[${items_it}].props.options.choices field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`views[${views_it}].items[${items_it}].props.options.choices`);\n            let choicesArray = ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices`, \"\");\n            for (let choices_it = 0; choices_it < choicesArray.length; choices_it++) {\n                let iterator = choices_it;\n                \t\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value' has 'value' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].value`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.options.choices[${choices_it}].empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].props.empty' has 'empty' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].props.empty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].props.empty`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].visibleRule' has 'visibleRule' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].visibleRule`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].visibleRule`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].links' has 'links' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].links`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].links`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].items[${items_it}].parentId' has 'parentId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].items[${items_it}].parentId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].items[${items_it}].parentId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'views[${views_it}].links' has 'links' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].links`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].links`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'views[${views_it}].parentId' has 'parentId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `views[${views_it}].parentId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`views[${views_it}].parentId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `count` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`count`)){\n                if(pm.expect(ld.get(responseData, `count`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `count`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cause` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cause`)){\n                if(pm.expect(ld.get(pm.response.json(), `cause`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cause`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "4f2080e6-d0c4-4b28-9d43-7036f6b0c516",
                  "name": "Application status - reads existing application data",
                  "request": {
                    "name": "Application status - reads existing application data",
                    "description": {},
                    "url": {
                      "path": [
                        "forms",
                        ":form-type",
                        ":form-instance-id",
                        "status"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-type}}",
                          "key": "form-type",
                          "description": "(Required) form type identifier\n"
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{form-instance-id}}",
                          "key": "form-instance-id",
                          "description": "(Required) form identifier\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) Correlation Id",
                        "key": "X-HSBC-Request-Correlation-Id",
                        "value": "{{X-HSBC-Request-Correlation-Id}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "164c76d0-5e1c-4805-b494-173d3d3cf795",
                      "name": "Successful Evaluation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id",
                            "status"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"encryptedResponseBase64\": \"U2VlIHRoZSB1bmVuY3J5cHRlZCBleGFtcGxlcyBmb3IgcmVzcG9uc2UgYm9keQ==\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "7411c540-edc7-4f6e-b9c0-bb2f6a488db4",
                      "name": "Bad Request Response",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id",
                            "status"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"type\": \"/problem-details/types/client-id-missing\",\n  \"title\": \"Client Id missing\",\n  \"status\": \"400\",\n  \"detail\": \"Client Id is missing. Request header not set.\",\n  \"instance\": \"d72b7d9b-ccd9-4f98-8fb8-dbb3067effc3\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "fcd0f3c8-8510-437d-8d00-1e6f313763f4",
                      "name": "Internal Server Error Response",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "forms",
                            ":form-type",
                            ":form-instance-id",
                            "status"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-type}}",
                              "key": "form-type",
                              "description": "(Required) form type identifier\n"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{form-instance-id}}",
                              "key": "form-instance-id",
                              "description": "(Required) form identifier\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "disabled": false,
                            "description": "(Required) Authorization Header",
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "disabled": false,
                            "description": "(Required) Correlation Id",
                            "key": "X-HSBC-Request-Correlation-Id",
                            "value": "{{X-HSBC-Request-Correlation-Id}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"type\": \"/problem-details/types/internal-server-error\",\n  \"title\": \"Internal Server Error\",\n  \"status\": \"500\",\n  \"detail\": \"Internal Server Error.\",\n  \"instance\": \"1d9294e7-20ea-4c34-9a89-c18a47254e8e\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Test-5619 using AI Type  and AI Model \n\n\nTest generated for /forms/:form-type/:form-instance-id/status for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful Evaluation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.information` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.information`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.information`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.information`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.warning` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.warning`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.warning`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.warning`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.error` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.error`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.error`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `messages.error`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.generalError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.generalError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.generalError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.generalError`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `messages.questionsError` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`messages.questionsError`)){\n                if(pm.expect(ld.get(pm.response.json(), `messages.questionsError`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `messages.questionsError`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `count` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`count`)){\n                if(pm.expect(ld.get(responseData, `count`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `count`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cause` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cause`)){\n                if(pm.expect(ld.get(pm.response.json(), `cause`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cause`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "3289b826-5923-4900-b2f9-b588eb3e761c",
          "name": "Returns function list of rules as JavaScript",
          "request": {
            "name": "Returns function list of rules as JavaScript",
            "description": {},
            "url": {
              "path": [
                "forms",
                "functions",
                ":file-id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{file-id}}",
                  "key": "file-id",
                  "description": "(Required) file identifier\n"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) Correlation Id",
                "key": "X-HSBC-Request-Correlation-Id",
                "value": "{{X-HSBC-Request-Correlation-Id}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "267be23a-a411-4830-9a3c-129dc90fb604",
              "name": "Returns function list of rules as JavaScript",
              "originalRequest": {
                "url": {
                  "path": [
                    "forms",
                    "functions",
                    ":file-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{file-id}}",
                      "key": "file-id",
                      "description": "(Required) file identifier\n"
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Authorization Header",
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) Correlation Id",
                    "key": "X-HSBC-Request-Correlation-Id",
                    "value": "{{X-HSBC-Request-Correlation-Id}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"encryptedResponseBase64\": \"U2VlIHRoZSB1bmVuY3J5cHRlZCBleGFtcGxlcyBmb3IgcmVzcG9uc2UgYm9keQ==\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4e6105f1-d290-4007-9701-61acb20e746a",
              "name": "Bad Request Response",
              "originalRequest": {
                "url": {
                  "path": [
                    "forms",
                    "functions",
                    ":file-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{file-id}}",
                      "key": "file-id",
                      "description": "(Required) file identifier\n"
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Authorization Header",
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) Correlation Id",
                    "key": "X-HSBC-Request-Correlation-Id",
                    "value": "{{X-HSBC-Request-Correlation-Id}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"type\": \"/problem-details/types/client-id-missing\",\n  \"title\": \"Client Id missing\",\n  \"status\": \"400\",\n  \"detail\": \"Client Id is missing. Request header not set.\",\n  \"instance\": \"d72b7d9b-ccd9-4f98-8fb8-dbb3067effc3\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "222a3932-132f-470b-b8a4-d8f14e657a69",
              "name": "File Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "forms",
                    "functions",
                    ":file-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{file-id}}",
                      "key": "file-id",
                      "description": "(Required) file identifier\n"
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Authorization Header",
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) Correlation Id",
                    "key": "X-HSBC-Request-Correlation-Id",
                    "value": "{{X-HSBC-Request-Correlation-Id}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"type\": \"/problem-details/types/file-not-found\",\n  \"title\": \"File not found\",\n  \"status\": \"404\",\n  \"detail\": \"File not found.\",\n  \"instance\": \"d72b7d9b-ccd9-4f98-8fb8-dbb3067effc3\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "58d9cbbc-8f03-4515-9512-f475d2d7ea12",
              "name": "Internal Server Error Response",
              "originalRequest": {
                "url": {
                  "path": [
                    "forms",
                    "functions",
                    ":file-id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{file-id}}",
                      "key": "file-id",
                      "description": "(Required) file identifier\n"
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Authorization Header",
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) Correlation Id",
                    "key": "X-HSBC-Request-Correlation-Id",
                    "value": "{{X-HSBC-Request-Correlation-Id}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"type\": \"/problem-details/types/internal-server-error\",\n  \"title\": \"Internal Server Error\",\n  \"status\": \"500\",\n  \"detail\": \"Internal Server Error.\",\n  \"instance\": \"1d9294e7-20ea-4c34-9a89-c18a47254e8e\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Test-5619 using AI Type  and AI Model \n\n\nTest generated for /forms/functions/:file-id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Returns function list of rules as JavaScript\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"File Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "c02aa40f-b511-4b41-bcc4-35dbde6c31d5",
      "name": "Health check",
      "request": {
        "name": "Health check",
        "description": {},
        "url": {
          "path": [
            ".well-known",
            "health"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "description": "(Required) Correlation Id",
            "key": "X-HSBC-Request-Correlation-Id",
            "value": "{{X-HSBC-Request-Correlation-Id}}"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "94ab1e9b-441b-49a9-a675-074522ae15bd",
          "name": "Health Response",
          "originalRequest": {
            "url": {
              "path": [
                ".well-known",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) Authorization Header",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) Correlation Id",
                "key": "X-HSBC-Request-Correlation-Id",
                "value": "{{X-HSBC-Request-Correlation-Id}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"apiVersion\": \"1.0\",\n  \"status\": \"PASS\",\n  \"datetime\": \"2021-09-29T11:42:52.332Z\",\n  \"hostInstanceId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "626d9072-6bc9-4f3c-b15a-3019aa47bc94",
          "name": "Bad Request Response",
          "originalRequest": {
            "url": {
              "path": [
                ".well-known",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) Authorization Header",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) Correlation Id",
                "key": "X-HSBC-Request-Correlation-Id",
                "value": "{{X-HSBC-Request-Correlation-Id}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"type\": \"/problem-details/types/client-id-missing\",\n  \"title\": \"Client Id missing\",\n  \"status\": \"400\",\n  \"detail\": \"Client Id is missing. Request header not set.\",\n  \"instance\": \"d72b7d9b-ccd9-4f98-8fb8-dbb3067effc3\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a64ccc1b-0182-4dfe-9c7a-658f09eb4c20",
          "name": "Internal Server Error Response",
          "originalRequest": {
            "url": {
              "path": [
                ".well-known",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) Authorization Header",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) Correlation Id",
                "key": "X-HSBC-Request-Correlation-Id",
                "value": "{{X-HSBC-Request-Correlation-Id}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"type\": \"/problem-details/types/internal-server-error\",\n  \"title\": \"Internal Server Error\",\n  \"status\": \"500\",\n  \"detail\": \"Internal Server Error.\",\n  \"instance\": \"1d9294e7-20ea-4c34-9a89-c18a47254e8e\",\n  \"errorDateTime\": \"2021-09-29T11:42:52.332Z\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Test-5619 using AI Type  and AI Model \n\n\nTest generated for /.well-known/health for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Health Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `apiVersion` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`apiVersion`)){\n                if(pm.expect(ld.get(pm.response.json(), `apiVersion`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `apiVersion`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"PASS\",\"FAIL\",\"WARN\"]);\n        })\n\n        pm.test('Response has the `additionalInfo` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`additionalInfo`)){\n                if(pm.expect(ld.get(pm.response.json(), `additionalInfo`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `additionalInfo`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `artifactVersion` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`artifactVersion`)){\n                if(pm.expect(ld.get(pm.response.json(), `artifactVersion`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `artifactVersion`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `datetime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`datetime`)){\n                if(pm.expect(ld.get(pm.response.json(), `datetime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `datetime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('datetime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"datetime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `hostInstanceId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`hostInstanceId`)){\n                if(pm.expect(ld.get(pm.response.json(), `hostInstanceId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `hostInstanceId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('hostInstanceId format to be uuid',function(){  \n            pm.expect(ld.get(responseData, \"hostInstanceId\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errors` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errors`)){\n                if(pm.expect(ld.get(pm.response.json(), `errors`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `errors`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the errors field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`errors`);\n            let errorsArray = ld.get(pm.response.json(), `errors`, \"\");\n            for (let errors_it = 0; errors_it < errorsArray.length; errors_it++) {\n                let iterator = errors_it;\n                \t\n        pm.test(`${iterator} element of array 'errors[${errors_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'errors[${errors_it}].detail' has 'detail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `errors[${errors_it}].detail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`errors[${errors_it}].detail`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `instance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`instance`)){\n                if(pm.expect(ld.get(pm.response.json(), `instance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `instance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `errorDateTime` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`errorDateTime`)){\n                if(pm.expect(ld.get(pm.response.json(), `errorDateTime`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `errorDateTime`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('errorDateTime format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"errorDateTime\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://stoplight.io/mocks/hsbc/sandbox/43741497",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "6b023a25-890c-4373-9a9b-42c8c10b14d0",
    "name": "Compass Onboarding API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "cmb-digital-onboarding-ddapi - 20220127-1508",
      "type": "text/plain"
    }
  }
}