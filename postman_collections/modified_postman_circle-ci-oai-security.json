{
  "item": [
    {
      "name": "context",
      "item": [
        null,
        null,
        {
          "name": "{context-id}",
          "item": [
            null,
            null,
            {
              "name": "environment-variable",
              "item": [
                {
                  "name": "List environment variables",
                  "request": {
                    "name": "List environment variables",
                    "description": {
                      "content": "List information about environment variables in a context, not including their values.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "context",
                        ":context-id",
                        "environment-variable"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "disabled": false,
                          "key": "page-token",
                          "value": "{{page-token}}",
                          "description": "A token to retrieve the next page of results."
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{context-id}}",
                          "key": "context-id",
                          "description": "(Required) ID of the context (UUID)"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "basic",
                      "basic": [
                        {
                          "key": "username",
                          "value": "{{basicAuthUsername}}"
                        },
                        {
                          "key": "password",
                          "value": "{{basicAuthPassword}}"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "name": "A paginated list of environment variables",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "context",
                            ":context-id",
                            "environment-variable"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "page-token",
                              "value": "{{page-token}}"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{context-id}}",
                              "key": "context-id",
                              "description": "(Required) ID of the context (UUID)"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"items\": [\n    {\n      \"variable\": \"POSTGRES_USER\",\n      \"created_at\": \"2015-09-21T17:29:21.042Z\",\n      \"updated_at\": \"2015-09-21T17:29:21.042Z\",\n      \"context_id\": \"urn:uuid:235b2fcd-11c0-d1e3-24d4-4b293bea513b\"\n    },\n    {\n      \"variable\": \"POSTGRES_USER\",\n      \"created_at\": \"2015-09-21T17:29:21.042Z\",\n      \"updated_at\": \"2015-09-21T17:29:21.042Z\",\n      \"context_id\": \"urn:uuid:632716db-cd87-8baa-7c5b-01bb0854f169\"\n    }\n  ],\n  \"next_page_token\": \"veniam dolor irure Ut non\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "name": "Error response.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "context",
                            ":context-id",
                            "environment-variable"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "page-token",
                              "value": "{{page-token}}"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{context-id}}",
                              "key": "context-id",
                              "description": "(Required) ID of the context (UUID)"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"message\": \"non ex fugiat ea\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test new-circlepostman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for context/{context-id}/environment-variable?page-token={{page-token}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"A paginated list of environment variables\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `items` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`items`)){\n                if(pm.expect(ld.get(pm.response.json(), `items`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `items`))).to.equal(true);\n                }\n\n            }\n\n        })\n  \n        pm.test(`items length to be atmost '100'`,function(){\n            pm.expect(ld.get(responseData, `items`, \"\").length).to.be.at.most(100);\n        })\n  \n        pm.test(`items length to be atleast '100'`,function(){\n          pm.expect(ld.get(responseData, `items`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`Each object in the items field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`items`);\n            let itemsArray = ld.get(pm.response.json(), `items`, \"\");\n            for (let items_it = 0; items_it < itemsArray.length; items_it++) {\n                let iterator = items_it;\n                \t\n        pm.test(`${iterator} element of array 'items[${items_it}].variable' has 'variable' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `items[${items_it}].variable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`items[${items_it}].variable`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`items[${items_it}].variable length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].variable`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`items[${items_it}].variable length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].variable`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`${iterator} element of array 'items[${items_it}].created_at' has 'created_at' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `items[${items_it}].created_at`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`items[${items_it}].created_at`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`items[${items_it}].created_at length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].created_at`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`items[${items_it}].created_at length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].created_at`, \"\").length).to.be.at.least(0);\n        })\n  \n        pm.test('items[${items_it}].created_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].created_at`, \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'items[${items_it}].updated_at' has 'updated_at' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `items[${items_it}].updated_at`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`items[${items_it}].updated_at`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`items[${items_it}].updated_at length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].updated_at`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`items[${items_it}].updated_at length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].updated_at`, \"\").length).to.be.at.least(0);\n        })\n  \n        pm.test('items[${items_it}].updated_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].updated_at`, \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'items[${items_it}].context_id' has 'context_id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `items[${items_it}].context_id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`items[${items_it}].context_id`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`items[${items_it}].context_id length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].context_id`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`items[${items_it}].context_id length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].context_id`, \"\").length).to.be.at.least(0);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `next_page_token` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`next_page_token`)){\n                if(pm.expect(ld.get(pm.response.json(), `next_page_token`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `next_page_token`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`next_page_token length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `next_page_token`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`next_page_token length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `next_page_token`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Error response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`message length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `message`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`message length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `message`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "name": "{env-var-name}",
                  "item": [
                    {
                      "name": "Remove an environment variable",
                      "request": {
                        "name": "Remove an environment variable",
                        "description": {
                          "content": "Delete an environment variable from a context.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "context",
                            ":context-id",
                            "environment-variable",
                            ":env-var-name"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{env-var-name}}",
                              "key": "env-var-name",
                              "description": "(Required) The name of the environment variable"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{context-id}}",
                              "key": "context-id",
                              "description": "(Required) ID of the context (UUID)"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "auth": null
                      },
                      "response": [
                        {
                          "name": "A confirmation message",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "context",
                                ":context-id",
                                "environment-variable",
                                ":env-var-name"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{env-var-name}}",
                                  "key": "env-var-name",
                                  "description": "(Required) The name of the environment variable"
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{context-id}}",
                                  "key": "context-id",
                                  "description": "(Required) ID of the context (UUID)"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"message\": \"ut est proident incididunt nostrud\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "name": "Error response.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "context",
                                ":context-id",
                                "environment-variable",
                                ":env-var-name"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{env-var-name}}",
                                  "key": "env-var-name",
                                  "description": "(Required) The name of the environment variable"
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{context-id}}",
                                  "key": "context-id",
                                  "description": "(Required) ID of the context (UUID)"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "Internal Server Error",
                          "code": 500,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"message\": \"non ex fugiat ea\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test new-circlepostman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for context/{context-id}/environment-variable/{env-var-name} for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"A confirmation message\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Error response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "name": "Add or update an environment variable",
                      "request": {
                        "name": "Add or update an environment variable",
                        "description": {
                          "content": "Create or update an environment variable within a context. Returns information about the environment variable, not including its value.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "context",
                            ":context-id",
                            "environment-variable",
                            ":env-var-name"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{context-id}}",
                              "key": "context-id",
                              "description": "(Required) ID of the context (UUID)"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{env-var-name}}",
                              "key": "env-var-name",
                              "description": "(Required) The name of the environment variable"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "auth": null,
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"value\": \"{{value_*string}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "name": "The new environment variable",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "context",
                                ":context-id",
                                "environment-variable",
                                ":env-var-name"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{context-id}}",
                                  "key": "context-id",
                                  "description": "(Required) ID of the context (UUID)"
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{env-var-name}}",
                                  "key": "env-var-name",
                                  "description": "(Required) The name of the environment variable"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"value\": \"{{value_*string}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"variable\": \"POSTGRES_USER\",\n  \"created_at\": \"2015-09-21T17:29:21.042Z\",\n  \"updated_at\": \"2015-09-21T17:29:21.042Z\",\n  \"context_id\": \"urn:uuid:6fd337fc-398c-2c4f-e489-ae9e4e969232\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "name": "Error response.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "context",
                                ":context-id",
                                "environment-variable",
                                ":env-var-name"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{context-id}}",
                                  "key": "context-id",
                                  "description": "(Required) ID of the context (UUID)"
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{env-var-name}}",
                                  "key": "env-var-name",
                                  "description": "(Required) The name of the environment variable"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"value\": \"{{value_*string}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Internal Server Error",
                          "code": 500,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"message\": \"non ex fugiat ea\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test new-circlepostman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for context/{context-id}/environment-variable/{env-var-name} for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"The new environment variable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Error response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "name": "{context_id}/restrictions",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "insights",
      "item": [
        null,
        null,
        null,
        {
          "name": "{project-slug}",
          "item": [
            null,
            null,
            {
              "name": "workflows",
              "item": [
                null,
                {
                  "name": "{workflow-name}",
                  "item": [
                    null,
                    null,
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    {
      "name": "me",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "name": "organization",
      "item": [
        null,
        {
          "name": "{org-slug-or-id}",
          "item": [
            null,
            null,
            {
              "name": "url-orb-allow-list",
              "item": [
                null,
                null,
                null
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "pipeline",
      "item": [
        null,
        null,
        {
          "name": "{pipeline-id}",
          "item": [
            null,
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "project",
      "item": [
        {
          "name": "{project-slug}",
          "item": [
            null,
            null,
            {
              "name": "checkout-key",
              "item": [
                null,
                null,
                {
                  "name": "{fingerprint}",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "name": "envvar",
              "item": [
                null,
                null,
                {
                  "name": "{name}",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "name": "job/{job-number}",
              "item": [
                null,
                null
              ],
              "event": []
            },
            {
              "name": "pipeline",
              "item": [
                null,
                null,
                null,
                null
              ],
              "event": []
            },
            {
              "name": "schedule",
              "item": [
                null,
                null
              ],
              "event": []
            },
            {
              "name": "{job-number}",
              "item": [
                null,
                null
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "name": "{provider}/{organization}/{project}",
          "item": [
            null,
            {
              "name": "settings",
              "item": [
                null,
                null
              ],
              "event": []
            },
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "schedule/{schedule-id}",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    null,
    {
      "name": "webhook",
      "item": [
        null,
        null,
        {
          "name": "{webhook-id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "workflow/{id}",
      "item": [
        null,
        null,
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "name": "org/{orgID}",
      "item": [
        {
          "name": "oidc-custom-claims",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        },
        {
          "name": "project/{projectID}/oidc-custom-claims",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "owner/{ownerID}/context/{context}",
      "item": [
        {
          "name": "decision",
          "item": [
            null,
            null,
            {
              "name": "settings",
              "item": [
                null,
                null
              ],
              "event": []
            },
            {
              "name": "{decisionID}",
              "item": [
                null,
                null
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "name": "policy-bundle",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "organizations/{org_id}/usage_export_job",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "name": "projects/{project_id}",
      "item": [
        {
          "name": "pipeline-definitions",
          "item": [
            null,
            null,
            {
              "name": "{pipeline_definition_id}",
              "item": [
                null,
                null,
                null,
                {
                  "name": "triggers",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "name": "triggers/{trigger_id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        },
        null
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://circleci.com/api/v2",
      "key": "baseUrl"
    },
    {
      "type": "number",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "Circle-Token"
      },
      {
        "key": "value",
        "value": "{{apiKey}}"
      },
      {
        "key": "in",
        "value": "header"
      }
    ]
  },
  "info": {
    "_postman_id": "a4c3d0eb-0917-44a4-a75d-aeb1fd585d03",
    "name": "CircleCI API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "This describes the resources that make up the CircleCI API v2.",
      "type": "text/plain"
    }
  }
}