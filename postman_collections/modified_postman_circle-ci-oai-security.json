{
  "item": [
    {
      "name": "context",
      "item": [
        null,
        null,
        {
          "name": "{context-id}",
          "item": [
            null,
            null,
            {
              "name": "environment-variable",
              "item": [
                {
                  "name": "List environment variables",
                  "request": {
                    "name": "List environment variables",
                    "description": {
                      "content": "List information about environment variables in a context, not including their values.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "context",
                        ":context-id",
                        "environment-variable"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "disabled": false,
                          "key": "page-token",
                          "value": "{{page-token}}",
                          "description": "A token to retrieve the next page of results."
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{context-id}}",
                          "key": "context-id",
                          "description": "(Required) ID of the context (UUID)"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "basic",
                      "basic": [
                        {
                          "key": "username",
                          "value": "{{basicAuthUsername}}"
                        },
                        {
                          "key": "password",
                          "value": "{{basicAuthPassword}}"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "name": "A paginated list of environment variables",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "context",
                            ":context-id",
                            "environment-variable"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "page-token",
                              "value": "{{page-token}}"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{context-id}}",
                              "key": "context-id",
                              "description": "(Required) ID of the context (UUID)"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"items\": [\n    {\n      \"variable\": \"POSTGRES_USER\",\n      \"created_at\": \"2015-09-21T17:29:21.042Z\",\n      \"updated_at\": \"2015-09-21T17:29:21.042Z\",\n      \"context_id\": \"urn:uuid:8dc95db7-570d-d4a1-3e1b-964e724ef70b\"\n    },\n    {\n      \"variable\": \"POSTGRES_USER\",\n      \"created_at\": \"2015-09-21T17:29:21.042Z\",\n      \"updated_at\": \"2015-09-21T17:29:21.042Z\",\n      \"context_id\": \"22784ba6-9343-847e-0257-19c0b6a34530\"\n    }\n  ],\n  \"next_page_token\": \"in et reprehenderit\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "name": "Error response.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "context",
                            ":context-id",
                            "environment-variable"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "page-token",
                              "value": "{{page-token}}"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{context-id}}",
                              "key": "context-id",
                              "description": "(Required) ID of the context (UUID)"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"message\": \"tempor ut ipsum deserunt anim\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test test-postman_circle using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for context/{context-id}/environment-variable?page-token={{page-token}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"A paginated list of environment variables\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `items` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`items`)){\n                if(pm.expect(ld.get(pm.response.json(), `items`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `items`))).to.equal(true);\n                }\n\n            }\n\n        })\n  \n        pm.test(`items length to be atmost '100'`,function(){\n            pm.expect(ld.get(responseData, `items`, \"\").length).to.be.at.most(100);\n        })\n  \n        pm.test(`items length to be atleast '100'`,function(){\n          pm.expect(ld.get(responseData, `items`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`Each object in the items field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`items`);\n            let itemsArray = ld.get(pm.response.json(), `items`, \"\");\n            for (let items_it = 0; items_it < itemsArray.length; items_it++) {\n                let iterator = items_it;\n                \t\n        pm.test(`${iterator} element of array 'items[${items_it}].variable' has 'variable' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `items[${items_it}].variable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`items[${items_it}].variable`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`items[${items_it}].variable length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].variable`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`items[${items_it}].variable length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].variable`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`${iterator} element of array 'items[${items_it}].created_at' has 'created_at' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `items[${items_it}].created_at`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`items[${items_it}].created_at`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`items[${items_it}].created_at length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].created_at`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`items[${items_it}].created_at length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].created_at`, \"\").length).to.be.at.least(0);\n        })\n  \n        pm.test('items[${items_it}].created_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].created_at`, \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'items[${items_it}].updated_at' has 'updated_at' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `items[${items_it}].updated_at`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`items[${items_it}].updated_at`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`items[${items_it}].updated_at length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].updated_at`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`items[${items_it}].updated_at length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].updated_at`, \"\").length).to.be.at.least(0);\n        })\n  \n        pm.test('items[${items_it}].updated_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].updated_at`, \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'items[${items_it}].context_id' has 'context_id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `items[${items_it}].context_id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`items[${items_it}].context_id`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`items[${items_it}].context_id length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].context_id`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`items[${items_it}].context_id length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `items[${items_it}].context_id`, \"\").length).to.be.at.least(0);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `next_page_token` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`next_page_token`)){\n                if(pm.expect(ld.get(pm.response.json(), `next_page_token`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `next_page_token`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`next_page_token length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `next_page_token`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`next_page_token length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `next_page_token`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Error response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`message length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `message`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`message length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `message`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "name": "{env-var-name}",
                  "item": [
                    {
                      "name": "Remove an environment variable",
                      "request": {
                        "name": "Remove an environment variable",
                        "description": {
                          "content": "Delete an environment variable from a context.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "context",
                            ":context-id",
                            "environment-variable",
                            ":env-var-name"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{env-var-name}}",
                              "key": "env-var-name",
                              "description": "(Required) The name of the environment variable"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{context-id}}",
                              "key": "context-id",
                              "description": "(Required) ID of the context (UUID)"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "auth": null
                      },
                      "response": [
                        {
                          "name": "A confirmation message",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "context",
                                ":context-id",
                                "environment-variable",
                                ":env-var-name"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{env-var-name}}",
                                  "key": "env-var-name",
                                  "description": "(Required) The name of the environment variable"
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{context-id}}",
                                  "key": "context-id",
                                  "description": "(Required) ID of the context (UUID)"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"message\": \"incididunt\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "name": "Error response.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "context",
                                ":context-id",
                                "environment-variable",
                                ":env-var-name"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{env-var-name}}",
                                  "key": "env-var-name",
                                  "description": "(Required) The name of the environment variable"
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{context-id}}",
                                  "key": "context-id",
                                  "description": "(Required) ID of the context (UUID)"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "Internal Server Error",
                          "code": 500,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"message\": \"tempor ut ipsum deserunt anim\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test test-postman_circle using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for context/{context-id}/environment-variable/{env-var-name} for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"A confirmation message\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Error response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "name": "Add or update an environment variable",
                      "request": {
                        "name": "Add or update an environment variable",
                        "description": {
                          "content": "Create or update an environment variable within a context. Returns information about the environment variable, not including its value.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "context",
                            ":context-id",
                            "environment-variable",
                            ":env-var-name"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{context-id}}",
                              "key": "context-id",
                              "description": "(Required) ID of the context (UUID)"
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{env-var-name}}",
                              "key": "env-var-name",
                              "description": "(Required) The name of the environment variable"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "auth": null,
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"value\": \"{{value_*string}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "name": "The new environment variable",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "context",
                                ":context-id",
                                "environment-variable",
                                ":env-var-name"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{context-id}}",
                                  "key": "context-id",
                                  "description": "(Required) ID of the context (UUID)"
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{env-var-name}}",
                                  "key": "env-var-name",
                                  "description": "(Required) The name of the environment variable"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"value\": \"{{value_*string}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"variable\": \"POSTGRES_USER\",\n  \"created_at\": \"2015-09-21T17:29:21.042Z\",\n  \"updated_at\": \"2015-09-21T17:29:21.042Z\",\n  \"context_id\": \"urn:uuid:23445fd2-a25f-433e-4449-a68b9503201a\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "name": "Error response.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "context",
                                ":context-id",
                                "environment-variable",
                                ":env-var-name"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{context-id}}",
                                  "key": "context-id",
                                  "description": "(Required) ID of the context (UUID)"
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{env-var-name}}",
                                  "key": "env-var-name",
                                  "description": "(Required) The name of the environment variable"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"value\": \"{{value_*string}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Internal Server Error",
                          "code": 500,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"message\": \"tempor ut ipsum deserunt anim\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test test-postman_circle using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for context/{context-id}/environment-variable/{env-var-name} for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"The new environment variable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Error response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "name": "{context_id}/restrictions",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "insights",
      "item": [
        null,
        null,
        null,
        {
          "name": "{project-slug}",
          "item": [
            null,
            null,
            {
              "name": "workflows",
              "item": [
                null,
                {
                  "name": "{workflow-name}",
                  "item": [
                    null,
                    null,
                    {
                      "name": "Get metrics and trends for workflows",
                      "request": {
                        "name": "Get metrics and trends for workflows",
                        "description": {
                          "content": "Get the metrics and trends for a particular workflow on a single branch or all branches",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "insights",
                            ":project-slug",
                            "workflows",
                            ":workflow-name",
                            "summary"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "all-branches",
                              "value": "{{all-branches}}",
                              "description": "Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter."
                            },
                            {
                              "disabled": false,
                              "key": "branch",
                              "value": "{{branch}}",
                              "description": "The name of a vcs branch. If not passed we will scope the API call to the default branch."
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{project-slug}}",
                              "key": "project-slug",
                              "description": "(Required) Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings)."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{workflow-name}}",
                              "key": "workflow-name",
                              "description": "(Required) The name of the workflow."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": null
                      },
                      "response": [
                        {
                          "name": "Metrics and trends for a workflow",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "insights",
                                ":project-slug",
                                "workflows",
                                ":workflow-name",
                                "summary"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "all-branches",
                                  "value": "{{all-branches}}"
                                },
                                {
                                  "key": "branch",
                                  "value": "{{branch}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{project-slug}}",
                                  "key": "project-slug",
                                  "description": "(Required) Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings)."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{workflow-name}}",
                                  "key": "workflow-name",
                                  "description": "(Required) The name of the workflow."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"metrics\": {\n    \"total_runs\": 78130863,\n    \"successful_runs\": 70867172,\n    \"mttr\": 92992419,\n    \"total_credits_used\": 29343470,\n    \"failed_runs\": 93189691,\n    \"success_rate\": 81489815.90329254,\n    \"window_start\": \"1997-07-03T15:54:09.159Z\",\n    \"duration_metrics\": {\n      \"min\": 7979816,\n      \"mean\": 72898818,\n      \"median\": 45671264,\n      \"p95\": 83832126,\n      \"max\": 88065817,\n      \"standard_deviation\": -61645991.187702306\n    },\n    \"window_end\": \"2019-05-13T19:31:07.164Z\",\n    \"throughput\": -79654747.00227153,\n    \"completed_runs\": 20148253\n  },\n  \"trends\": {\n    \"total_runs\": -97583311.30176483,\n    \"failed_runs\": 48453020.64694792,\n    \"success_rate\": -64461304.504472,\n    \"p95_duration_secs\": 22386230.756136835,\n    \"median_duration_secs\": -34324316.15851636,\n    \"total_credits_used\": -48747626.45405819,\n    \"mttr\": 39659517.9396649,\n    \"throughput\": -71835182.50105138\n  },\n  \"workflow_names\": [\n    \"qui mollit\",\n    \"amet adipisicing magna Ut\"\n  ]\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "name": "Error response.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "insights",
                                ":project-slug",
                                "workflows",
                                ":workflow-name",
                                "summary"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "all-branches",
                                  "value": "{{all-branches}}"
                                },
                                {
                                  "key": "branch",
                                  "value": "{{branch}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{project-slug}}",
                                  "key": "project-slug",
                                  "description": "(Required) Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings)."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{workflow-name}}",
                                  "key": "workflow-name",
                                  "description": "(Required) The name of the workflow."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Circle-Token",
                                "value": "{{Circle-Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Internal Server Error",
                          "code": 500,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"message\": \"tempor ut ipsum deserunt anim\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test test-postman_circle using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for insights/{project-slug}/workflows/{workflow-name}/summary?all-branches={{all-branches}}&branch={{branch}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Metrics and trends for a workflow\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `metrics` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metrics`)){\n                if(pm.expect(ld.get(pm.response.json(), `metrics`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metrics`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metrics.total_runs` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.total_runs`)){\n                if(pm.expect(ld.get(responseData, `metrics.total_runs`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.total_runs`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.total_runs`, \"\")).to.be.at.most(156261726);\n\n        pm.test('Response has the `metrics.successful_runs` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.successful_runs`)){\n                if(pm.expect(ld.get(responseData, `metrics.successful_runs`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.successful_runs`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.successful_runs`, \"\")).to.be.at.most(141734344);\n\n        pm.test('Response has the `metrics.mttr` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.mttr`)){\n                if(pm.expect(ld.get(responseData, `metrics.mttr`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.mttr`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.mttr`, \"\")).to.be.at.most(185984838);\n\n        pm.test('Response has the `metrics.total_credits_used` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.total_credits_used`)){\n                if(pm.expect(ld.get(responseData, `metrics.total_credits_used`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.total_credits_used`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.total_credits_used`, \"\")).to.be.at.most(58686940);\n\n        pm.test('Response has the `metrics.failed_runs` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.failed_runs`)){\n                if(pm.expect(ld.get(responseData, `metrics.failed_runs`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.failed_runs`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.failed_runs`, \"\")).to.be.at.most(186379382);\n\n        pm.test('Response has the `metrics.success_rate` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.success_rate`)){\n                if(pm.expect(ld.get(responseData, `metrics.success_rate`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.success_rate`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.success_rate`, \"\")).to.be.at.most(162979631.80658507);\n\n        pm.test('Response has the `metrics.window_start` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metrics.window_start`)){\n                if(pm.expect(ld.get(pm.response.json(), `metrics.window_start`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metrics.window_start`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`metrics.window_start length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `metrics.window_start`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`metrics.window_start length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `metrics.window_start`, \"\").length).to.be.at.least(0);\n        })\n  \n        pm.test('metrics.window_start format to be date-time',function(){\n            pm.expect(ld.get(responseData, `metrics.window_start`, \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `metrics.duration_metrics` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metrics.duration_metrics`)){\n                if(pm.expect(ld.get(pm.response.json(), `metrics.duration_metrics`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metrics.duration_metrics`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metrics.duration_metrics.min` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.duration_metrics.min`)){\n                if(pm.expect(ld.get(responseData, `metrics.duration_metrics.min`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.duration_metrics.min`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.duration_metrics.min`, \"\")).to.be.at.most(15959632);\n\n        pm.test('Response has the `metrics.duration_metrics.mean` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.duration_metrics.mean`)){\n                if(pm.expect(ld.get(responseData, `metrics.duration_metrics.mean`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.duration_metrics.mean`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.duration_metrics.mean`, \"\")).to.be.at.most(145797636);\n\n        pm.test('Response has the `metrics.duration_metrics.median` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.duration_metrics.median`)){\n                if(pm.expect(ld.get(responseData, `metrics.duration_metrics.median`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.duration_metrics.median`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.duration_metrics.median`, \"\")).to.be.at.most(91342528);\n\n        pm.test('Response has the `metrics.duration_metrics.p95` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.duration_metrics.p95`)){\n                if(pm.expect(ld.get(responseData, `metrics.duration_metrics.p95`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.duration_metrics.p95`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.duration_metrics.p95`, \"\")).to.be.at.most(167664252);\n\n        pm.test('Response has the `metrics.duration_metrics.max` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.duration_metrics.max`)){\n                if(pm.expect(ld.get(responseData, `metrics.duration_metrics.max`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.duration_metrics.max`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.duration_metrics.max`, \"\")).to.be.at.most(176131634);\n\n        pm.test('Response has the `metrics.duration_metrics.standard_deviation` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.duration_metrics.standard_deviation`)){\n                if(pm.expect(ld.get(responseData, `metrics.duration_metrics.standard_deviation`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.duration_metrics.standard_deviation`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.duration_metrics.standard_deviation`, \"\")).to.be.at.least(-123291982.37540461);\n\n        pm.test('Response has the `metrics.window_end` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metrics.window_end`)){\n                if(pm.expect(ld.get(pm.response.json(), `metrics.window_end`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metrics.window_end`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`metrics.window_end length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `metrics.window_end`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`metrics.window_end length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `metrics.window_end`, \"\").length).to.be.at.least(0);\n        })\n  \n        pm.test('metrics.window_end format to be date-time',function(){\n            pm.expect(ld.get(responseData, `metrics.window_end`, \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `metrics.throughput` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.throughput`)){\n                if(pm.expect(ld.get(responseData, `metrics.throughput`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.throughput`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.throughput`, \"\")).to.be.at.least(-159309494.00454307);\n\n        pm.test('Response has the `metrics.completed_runs` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`metrics.completed_runs`)){\n                if(pm.expect(ld.get(responseData, `metrics.completed_runs`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `metrics.completed_runs`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `metrics.completed_runs`, \"\")).to.be.at.most(40296506);\n\n        pm.test('Response has the `trends` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`trends`)){\n                if(pm.expect(ld.get(pm.response.json(), `trends`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `trends`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `trends.total_runs` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`trends.total_runs`)){\n                if(pm.expect(ld.get(responseData, `trends.total_runs`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `trends.total_runs`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `trends.total_runs`, \"\")).to.be.at.least(-195166622.60352966);\n\n        pm.test('Response has the `trends.failed_runs` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`trends.failed_runs`)){\n                if(pm.expect(ld.get(responseData, `trends.failed_runs`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `trends.failed_runs`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `trends.failed_runs`, \"\")).to.be.at.most(96906041.29389584);\n\n        pm.test('Response has the `trends.success_rate` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`trends.success_rate`)){\n                if(pm.expect(ld.get(responseData, `trends.success_rate`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `trends.success_rate`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `trends.success_rate`, \"\")).to.be.at.least(-128922609.008944);\n\n        pm.test('Response has the `trends.p95_duration_secs` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`trends.p95_duration_secs`)){\n                if(pm.expect(ld.get(responseData, `trends.p95_duration_secs`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `trends.p95_duration_secs`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `trends.p95_duration_secs`, \"\")).to.be.at.most(44772461.51227367);\n\n        pm.test('Response has the `trends.median_duration_secs` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`trends.median_duration_secs`)){\n                if(pm.expect(ld.get(responseData, `trends.median_duration_secs`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `trends.median_duration_secs`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `trends.median_duration_secs`, \"\")).to.be.at.least(-68648632.31703272);\n\n        pm.test('Response has the `trends.total_credits_used` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`trends.total_credits_used`)){\n                if(pm.expect(ld.get(responseData, `trends.total_credits_used`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `trends.total_credits_used`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `trends.total_credits_used`, \"\")).to.be.at.least(-97495252.90811639);\n\n        pm.test('Response has the `trends.mttr` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`trends.mttr`)){\n                if(pm.expect(ld.get(responseData, `trends.mttr`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `trends.mttr`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `trends.mttr`, \"\")).to.be.at.most(79319035.8793298);\n\n        pm.test('Response has the `trends.throughput` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`trends.throughput`)){\n                if(pm.expect(ld.get(responseData, `trends.throughput`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `trends.throughput`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `trends.throughput`, \"\")).to.be.at.least(-143670365.00210276);\n\n        pm.test('Response has the `workflow_names` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`workflow_names`)){\n                if(pm.expect(ld.get(pm.response.json(), `workflow_names`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `workflow_names`))).to.equal(true);\n                }\n\n            }\n\n        })\n  \n        pm.test(`workflow_names length to be atmost '100'`,function(){\n            pm.expect(ld.get(responseData, `workflow_names`, \"\").length).to.be.at.most(100);\n        })\n  \n        pm.test(`workflow_names length to be atleast '100'`,function(){\n          pm.expect(ld.get(responseData, `workflow_names`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Error response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`message length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `message`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`message length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `message`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    {
      "name": "me",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "name": "organization",
      "item": [
        null,
        {
          "name": "{org-slug-or-id}",
          "item": [
            null,
            null,
            {
              "name": "url-orb-allow-list",
              "item": [
                null,
                null,
                null
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "pipeline",
      "item": [
        null,
        null,
        {
          "name": "{pipeline-id}",
          "item": [
            null,
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "project",
      "item": [
        {
          "name": "{project-slug}",
          "item": [
            null,
            null,
            {
              "name": "checkout-key",
              "item": [
                null,
                null,
                {
                  "name": "{fingerprint}",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "name": "envvar",
              "item": [
                null,
                null,
                {
                  "name": "{name}",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "name": "job/{job-number}",
              "item": [
                null,
                null
              ],
              "event": []
            },
            {
              "name": "pipeline",
              "item": [
                null,
                null,
                null,
                null
              ],
              "event": []
            },
            {
              "name": "schedule",
              "item": [
                null,
                null
              ],
              "event": []
            },
            {
              "name": "{job-number}",
              "item": [
                null,
                null
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "name": "{provider}/{organization}/{project}",
          "item": [
            null,
            {
              "name": "settings",
              "item": [
                null,
                null
              ],
              "event": []
            },
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "schedule/{schedule-id}",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    null,
    {
      "name": "webhook",
      "item": [
        null,
        null,
        {
          "name": "{webhook-id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "workflow/{id}",
      "item": [
        null,
        null,
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "name": "org/{orgID}",
      "item": [
        {
          "name": "oidc-custom-claims",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        },
        {
          "name": "project/{projectID}/oidc-custom-claims",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "owner/{ownerID}/context/{context}",
      "item": [
        {
          "name": "decision",
          "item": [
            null,
            null,
            {
              "name": "settings",
              "item": [
                null,
                null
              ],
              "event": []
            },
            {
              "name": "{decisionID}",
              "item": [
                null,
                null
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "name": "policy-bundle",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "name": "organizations/{org_id}/usage_export_job",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "name": "projects/{project_id}",
      "item": [
        {
          "name": "pipeline-definitions",
          "item": [
            null,
            null,
            {
              "name": "{pipeline_definition_id}",
              "item": [
                null,
                null,
                null,
                {
                  "name": "triggers",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "name": "triggers/{trigger_id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        },
        null
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://circleci.com/api/v2",
      "key": "baseUrl"
    },
    {
      "type": "number",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "Circle-Token"
      },
      {
        "key": "value",
        "value": "{{apiKey}}"
      },
      {
        "key": "in",
        "value": "header"
      }
    ]
  },
  "info": {
    "_postman_id": "7d4fbc00-8042-40af-b2dd-88842cd61cf4",
    "name": "CircleCI API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "This describes the resources that make up the CircleCI API v2.",
      "type": "text/plain"
    }
  }
}