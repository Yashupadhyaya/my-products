{
  "item": [
    {
      "id": "cfe427e9-9ee4-4be7-b4b6-9982f0878a88",
      "name": "products",
      "item": [
        {
          "id": "bc02999c-4b55-49e4-85f1-b087ef795ee8",
          "name": "Get All Products",
          "request": {
            "name": "Get All Products",
            "description": {
              "content": "It gives you all products",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "d60925b0-835f-4854-a1df-8ca94003502a",
              "name": "Successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"id\": 1,\n    \"name\": \"apple\",\n    \"description\": \"apple\",\n    \"price\": 50\n  },\n  {\n    \"id\": 2,\n    \"name\": \"1\",\n    \"description\": \"apple\",\n    \"price\": 50\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postman using AI Type Open AI and AI Model gpt-4\nTest generated for /products for http method type get in postman framework\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\n\n// Checking if statusCode variable is present\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// Let's check the response code and perform tests accordingly\nif (pm.response.code == 200){\n    // This is a successful operation\n    pm.test(\"Successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      // Checking if the response is an array\n      if(Array.isArray(responseData)) {\n        pm.test('Response has the `id` field',function(){ \n            if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n              if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"number\");\n              }\n            }\n\n        })\n      } else {\n        // Checking if the response is an object\n        pm.test('Response has the `id` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(`id`)){\n            if(pm.expect(_.get(responseData, `id`, 200)).to.exist){\n              pm.expect(typeof _.get(responseData, `id`, 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      }\n\n    // Checking for the `name` field in the response\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    // Checking for the `description` field in the response\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(responseData[0], `description`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `description`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(pm.response.json(), `description`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `description`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    // Checking for the `price` field in the response\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `price` field',function(){ \n          if(pm.expect(responseData[0]).to.have.nested.property(`price`)){\n            if(pm.expect(_.get(responseData[0], `price`, 200)).to.exist){\n              pm.expect(typeof _.get(responseData[0], `price`, 200)).to.equal(\"number\");\n            }\n          }\n\n      })\n    } else {\n      pm.test('Response has the `price` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(`price`)){\n          if(pm.expect(_.get(responseData, `price`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData, `price`, 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "817776ee-9e74-48b1-ab0b-27d1467bdbaa",
          "name": "Add a new product to the store",
          "request": {
            "name": "Add a new product to the store",
            "description": {
              "content": "Add a new product to the store",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"id\": \"{{id}}\",\n    \"description\": \"{{description}}\",\n    \"price\": \"{{price}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "a057376f-4a46-4092-aafb-69367e3a3678",
              "name": "Successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": \"{{price}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": 4,\n  \"name\": \"apple\",\n  \"description\": \"apple\",\n  \"price\": 50\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "649e216f-c156-4f9d-bff3-28941b4a23ed",
              "name": "Invalid input",
              "originalRequest": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": \"{{price}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `id` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n                  if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `id` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`id`)){\n                if(pm.expect(_.get(responseData, `id`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `id`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(responseData[0], `description`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `description`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(pm.response.json(), `description`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `description`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `price` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`price`)){\n                  if(pm.expect(_.get(responseData[0], `price`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `price`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `price` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`price`)){\n                if(pm.expect(_.get(responseData, `price`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `price`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n});\n}\n\nif (pm.response.code == 405){\n    pm.test(\"Invalid input\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "de71c4e0-cf62-459d-b632-2f7fbaff972b",
          "name": "{productId}",
          "item": [
            {
              "id": "7a65a7b8-a9c2-4d54-9b3a-08d2dfa9f6ab",
              "name": "Find product by ID",
              "request": {
                "name": "Find product by ID",
                "description": {
                  "content": "Returns a single product",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "products",
                    ":productId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{productId}}",
                      "key": "productId",
                      "description": "(Required) ID of product to return"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "d696486a-e3a5-43f6-9ada-d4cdc12af379",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":productId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{productId}}",
                          "key": "productId",
                          "description": "(Required) ID of product to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": 4,\n  \"name\": \"1\",\n  \"description\": \"banana\",\n  \"price\": 50\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8f66d580-764b-44ad-8e64-aa7409771de9",
                  "name": "Product not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":productId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{productId}}",
                          "key": "productId",
                          "description": "(Required) ID of product to return"
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products/:productId for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `id` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n                  if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `id` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`id`)){\n                if(pm.expect(_.get(responseData, `id`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `id`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(responseData[0], `description`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `description`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(pm.response.json(), `description`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `description`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `price` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`price`)){\n                  if(pm.expect(_.get(responseData[0], `price`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `price`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `price` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`price`)){\n                if(pm.expect(_.get(responseData, `price`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `price`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Product not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "540ea43d-db1b-464e-9fe0-370559b65efe",
              "name": "Updates a product in the store with form data",
              "request": {
                "name": "Updates a product in the store with form data",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "products",
                    ":productId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{productId}}",
                      "key": "productId",
                      "description": "(Required) ID of product that needs to be updated"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"id\": \"{{id}}\",\n    \"description\": \"{{description}}\",\n    \"price\": \"{{price}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "aeebff35-484d-4b18-8add-58da854413b4",
                  "name": "Updated Product",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":productId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{productId}}",
                          "key": "productId",
                          "description": "(Required) ID of product that needs to be updated"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": \"{{price}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": 4,\n  \"name\": \"1\",\n  \"description\": \"mango\",\n  \"price\": 50\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "5bbbb6e0-02f7-4451-a3c5-ea2d59430c9c",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":productId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{productId}}",
                          "key": "productId",
                          "description": "(Required) ID of product that needs to be updated"
                        }
                      ]
                    },
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": \"{{price}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products/:productId for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Updated Product\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `id` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n                  if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `id` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`id`)){\n                if(pm.expect(_.get(responseData, `id`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `id`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(responseData[0], `description`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `description`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(pm.response.json(), `description`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `description`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `price` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`price`)){\n                  if(pm.expect(_.get(responseData[0], `price`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `price`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `price` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`price`)){\n                if(pm.expect(_.get(responseData, `price`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `price`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "d6c1f5c0-4334-4344-82df-108ea5437cb2",
              "name": "Deletes a product",
              "request": {
                "name": "Deletes a product",
                "description": {
                  "content": "delete a product",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "products",
                    ":productId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{productId}}",
                      "key": "productId",
                      "description": "(Required) Product id to delete"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "14161f17-cbe6-496f-a3ae-3a2d1e46ff3a",
                  "name": "Product deleted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":productId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{productId}}",
                          "key": "productId",
                          "description": "(Required) Product id to delete"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "104ee1d6-ebd6-4618-8f1a-c1295cb02322",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":productId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{productId}}",
                          "key": "productId",
                          "description": "(Required) Product id to delete"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products/:productId for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Product deleted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "http://52.66.106.18:8080/api",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "c8f1fe61-f8fa-44ca-b4ec-85c92595dc42",
    "name": "Swagger My-Products - OpenAPI 3.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "This page is for my products api spec",
      "type": "text/plain"
    }
  }
}