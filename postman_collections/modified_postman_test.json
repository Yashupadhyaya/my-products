{
  "item": [
    {
      "id": "1b24328d-d85c-4be6-ad14-3d515a31e92c",
      "response": [
        {
          "id": "b0186dc4-42f5-46c0-97f4-823b1e5ff2b4",
          "name": "200",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"message\": \"Hello world\"\n}",
          "cookie": [],
          "originalRequest": {
            "url": {
              "path": [
                "helloworld"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variables": []
            },
            "method": "GET",
            "body": {}
          },
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test raml-test-postman using AI Type  and AI Model \n\n\nTest generated for /helloworld for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"200\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "name": "/helloworld",
      "request": {
        "url": {
          "path": [
            "helloworld"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variables": []
        },
        "method": "GET",
        "body": {}
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "id": "baseUrl",
      "type": "string",
      "value": ""
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "2fbc82a6-b2e4-4387-b88e-8ce8079fd699",
    "name": "Hello world",
    "version": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": ""
  }
}