{
  "item": [
    {
      "name": "country",
      "item": [
        {
          "name": "Get all countries",
          "request": {
            "name": "Get all countries",
            "description": {},
            "url": {
              "path": [
                "country"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "app-identifier",
                "value": "{{app-identifier}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "customer-secret-key",
                "value": "{{customer-secret-key}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "country"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "app-identifier",
                    "value": "{{app-identifier}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "customer-secret-key",
                    "value": "{{customer-secret-key}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test newtestingpostman using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for country for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n                if(pm.expect(ld.get(pm.response.json(), `data`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.countries` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.countries`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.countries`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `data.countries`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the data.countries field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`data.countries`);\n            let countriesArray = ld.get(pm.response.json(), `data.countries`, \"\");\n            for (let countries_it = 0; countries_it < countriesArray.length; countries_it++) {\n                let iterator = countries_it;\n                \t\n        pm.test(`${iterator} element of array 'countriesArray'has 'id' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `data.countries[${countries_it}].id`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`data.countries[${countries_it}].id`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'data.countries[${countries_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `data.countries[${countries_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`data.countries[${countries_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'data.countries[${countries_it}].code' has 'code' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `data.countries[${countries_it}].code`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`data.countries[${countries_it}].code`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'data.countries[${countries_it}].default_currency' has 'default_currency' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `data.countries[${countries_it}].default_currency`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`data.countries[${countries_it}].default_currency`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'countriesArray'has 'is_active' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `data.countries[${countries_it}].is_active`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`data.countries[${countries_it}].is_active`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'countriesArray'has 'app_id' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `data.countries[${countries_it}].app_id`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`data.countries[${countries_it}].app_id`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'countriesArray'has 'customer_id' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `data.countries[${countries_it}].customer_id`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`data.countries[${countries_it}].customer_id`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'countriesArray'has 'created_by' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `data.countries[${countries_it}].created_by`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`data.countries[${countries_it}].created_by`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'countriesArray'has 'updated_by' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `data.countries[${countries_it}].updated_by`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`data.countries[${countries_it}].updated_by`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'data.countries[${countries_it}].created_at' has 'created_at' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `data.countries[${countries_it}].created_at`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`data.countries[${countries_it}].created_at`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('data.countries[${countries_it}].created_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"data.countries[${countries_it}].created_at\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'data.countries[${countries_it}].updated_at' has 'updated_at' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `data.countries[${countries_it}].updated_at`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`data.countries[${countries_it}].updated_at`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('data.countries[${countries_it}].updated_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"data.countries[${countries_it}].updated_at\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'countriesArray' has 'currencies' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `data.countries[${countries_it}].currencies`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `data.countries[${countries_it}].currencies`))).to.equal(true);\n            }\n\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `error_info` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`error_info`)){\n                if(pm.expect(ld.get(pm.response.json(), `error_info`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `error_info`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "Create a new country",
          "request": {
            "name": "Create a new country",
            "description": {},
            "url": {
              "path": [
                "country"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "app-identifier",
                "value": "{{app-identifier}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "customer-secret-key",
                "value": "{{customer-secret-key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{bearerToken}}"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": {{name_*string}},\n    \"code\": {{code_*string}},\n    \"currencies\": [\n        {{currencies_0_*string}},\n        {{currencies_1_*string}}\n    ],\n    \"default_currency\": {{default_currency_*string}},\n    \"is_active\": {{is_active_*integer}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "name": "Country created successfully",
              "originalRequest": {
                "url": {
                  "path": [
                    "country"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "app-identifier",
                    "value": "{{app-identifier}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "customer-secret-key",
                    "value": "{{customer-secret-key}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": {{name_*string}},\n    \"code\": {{code_*string}},\n    \"currencies\": [\n        {{currencies_0_*string}},\n        {{currencies_1_*string}},\n        {{currencies_2_*string}}\n    ],\n    \"default_currency\": {{default_currency_*string}},\n    \"is_active\": {{is_active_*number}}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test newtestingpostman using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for country for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 201){\n    pm.test(\"Country created successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.id`)){\n                if(pm.expect(ld.get(responseData, `data.id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.default_currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.default_currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.default_currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.default_currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.is_active` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.is_active`)){\n                if(pm.expect(ld.get(responseData, `data.is_active`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.is_active`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.app_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.app_id`)){\n                if(pm.expect(ld.get(responseData, `data.app_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.app_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.customer_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.customer_id`)){\n                if(pm.expect(ld.get(responseData, `data.customer_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.customer_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.created_by` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.created_by`)){\n                if(pm.expect(ld.get(responseData, `data.created_by`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.created_by`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.updated_by` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.updated_by`)){\n                if(pm.expect(ld.get(responseData, `data.updated_by`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.updated_by`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.created_at` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.created_at`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.created_at`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.created_at`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('data.created_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"data.created_at\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `data.updated_at` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.updated_at`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.updated_at`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.updated_at`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('data.updated_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"data.updated_at\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `data.currencies` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.currencies`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.currencies`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `data.currencies`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_info` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`error_info`)){\n                if(pm.expect(ld.get(pm.response.json(), `error_info`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `error_info`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "{id}",
          "item": [
            {
              "name": "Get country by ID",
              "request": {
                "name": "Get country by ID",
                "description": {},
                "url": {
                  "path": [
                    "country",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "app-identifier",
                    "value": "{{app-identifier}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "customer-secret-key",
                    "value": "{{customer-secret-key}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "name": "Success",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "country",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) ",
                        "key": "app-identifier",
                        "value": "{{app-identifier}}"
                      },
                      {
                        "disabled": false,
                        "description": "(Required) ",
                        "key": "customer-secret-key",
                        "value": "{{customer-secret-key}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test newtestingpostman using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for country/{id} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n                if(pm.expect(ld.get(pm.response.json(), `data`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.country.id`)){\n                if(pm.expect(ld.get(responseData, `data.country.id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.country.id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.country.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.country.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.country.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.country.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.country.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.country.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.default_currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.country.default_currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.country.default_currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.country.default_currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.is_active` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.country.is_active`)){\n                if(pm.expect(ld.get(responseData, `data.country.is_active`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.country.is_active`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.app_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.country.app_id`)){\n                if(pm.expect(ld.get(responseData, `data.country.app_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.country.app_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.customer_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.country.customer_id`)){\n                if(pm.expect(ld.get(responseData, `data.country.customer_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.country.customer_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.created_by` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.country.created_by`)){\n                if(pm.expect(ld.get(responseData, `data.country.created_by`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.country.created_by`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.updated_by` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.country.updated_by`)){\n                if(pm.expect(ld.get(responseData, `data.country.updated_by`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.country.updated_by`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.country.created_at` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.country.created_at`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.country.created_at`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.country.created_at`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('data.country.created_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"data.country.created_at\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `data.country.updated_at` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.country.updated_at`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.country.updated_at`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.country.updated_at`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('data.country.updated_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"data.country.updated_at\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `data.country.currencies` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.country.currencies`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.country.currencies`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `data.country.currencies`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_info` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`error_info`)){\n                if(pm.expect(ld.get(pm.response.json(), `error_info`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `error_info`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "name": "Update country by ID",
              "request": {
                "name": "Update country by ID",
                "description": {},
                "url": {
                  "path": [
                    "country",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "app-identifier",
                    "value": "{{app-identifier}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "customer-secret-key",
                    "value": "{{customer-secret-key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{bearerToken}}"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": {{name_*string}},\n    \"code\": {{code_*string}},\n    \"currencies\": [\n        {{currencies_0_*string}},\n        {{currencies_1_*string}}\n    ],\n    \"default_currency\": {{default_currency_*string}},\n    \"is_active\": {{is_active_*integer}}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "name": "Country updated successfully",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "country",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "disabled": false,
                        "description": "(Required) ",
                        "key": "app-identifier",
                        "value": "{{app-identifier}}"
                      },
                      {
                        "disabled": false,
                        "description": "(Required) ",
                        "key": "customer-secret-key",
                        "value": "{{customer-secret-key}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": {{name_*string}},\n    \"code\": {{code_*string}},\n    \"currencies\": [\n        {{currencies_0_*string}},\n        {{currencies_1_*string}},\n        {{currencies_2_*string}}\n    ],\n    \"default_currency\": {{default_currency_*string}},\n    \"is_active\": {{is_active_*number}}\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test newtestingpostman using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for country/{id} for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Country updated successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.id`)){\n                if(pm.expect(ld.get(responseData, `data.id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.default_currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.default_currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.default_currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.default_currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.is_active` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.is_active`)){\n                if(pm.expect(ld.get(responseData, `data.is_active`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.is_active`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.app_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.app_id`)){\n                if(pm.expect(ld.get(responseData, `data.app_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.app_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.customer_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.customer_id`)){\n                if(pm.expect(ld.get(responseData, `data.customer_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.customer_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.created_by` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.created_by`)){\n                if(pm.expect(ld.get(responseData, `data.created_by`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.created_by`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.updated_by` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`data.updated_by`)){\n                if(pm.expect(ld.get(responseData, `data.updated_by`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `data.updated_by`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data.created_at` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.created_at`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.created_at`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.created_at`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('data.created_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"data.created_at\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `data.updated_at` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.updated_at`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.updated_at`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `data.updated_at`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('data.updated_at format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"data.updated_at\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `data.currencies` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data.currencies`)){\n                if(pm.expect(ld.get(pm.response.json(), `data.currencies`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `data.currencies`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_info` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`error_info`)){\n                if(pm.expect(ld.get(pm.response.json(), `error_info`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `error_info`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "name": "Delete country by ID",
              "request": {
                "name": "Delete country by ID",
                "description": {},
                "url": {
                  "path": [
                    "country",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "app-identifier",
                    "value": "{{app-identifier}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "customer-secret-key",
                    "value": "{{customer-secret-key}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "name": "Success",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "country",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "header": [
                      {
                        "disabled": false,
                        "description": "(Required) ",
                        "key": "app-identifier",
                        "value": "{{app-identifier}}"
                      },
                      {
                        "disabled": false,
                        "description": "(Required) ",
                        "key": "customer-secret-key",
                        "value": "{{customer-secret-key}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test newtestingpostman using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for country/{id} for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_info` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`error_info`)){\n                if(pm.expect(ld.get(pm.response.json(), `error_info`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `error_info`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "http://api.example.com/v1",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "26a12bd0-46f9-40bf-803b-f0e8f07171e9",
    "name": "Sample API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.",
      "type": "text/plain"
    }
  }
}