{
  "item": [
    {
      "id": "2bd28e85-af86-4881-bc9f-5fc6167fd78d",
      "name": "Retrive Search Time Slot",
      "request": {
        "name": "Retrive Search Time Slot",
        "description": {},
        "url": {
          "path": [
            "searchTimeSlot"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "addressId",
              "value": "{{addressId}}",
              "description": "(Required) ID do endereço"
            },
            {
              "disabled": false,
              "key": "subscriberId",
              "value": "{{subscriberId}}",
              "description": "Identificador único da instação do cliente. <br>Parametro com preenchimento obrigatório para todos os agendamento de Ordens com tipo diferente de Instalação."
            },
            {
              "disabled": false,
              "key": "associatedDocument",
              "value": "{{associatedDocument}}",
              "description": "(Required) Documento associado utilizado na criação da ordem de agendamento"
            },
            {
              "disabled": false,
              "key": "startDate",
              "value": "{{startDate}}",
              "description": "(Required) Data de inicio para o periodo de pesquisa de slots ('Intervalo entre startDate e finishDate deve ser de no máximo 14 dias')"
            },
            {
              "disabled": false,
              "key": "finishDate",
              "value": "{{finishDate}}",
              "description": "(Required) Data de final para o periodo de pesquisa de slots ('Intervalo entre startDate e finishDate deve ser de no máximo 14 dias')"
            },
            {
              "disabled": false,
              "key": "orderType",
              "value": "{{orderType}}",
              "description": "(Required) Tipo da Ordem a ser executada <br> - Instalação <br> - Retirada <br> - RemanejamentoPonto <br> - ChamadoTecnico <br>"
            },
            {
              "disabled": false,
              "key": "addressChangeFlag",
              "value": "{{addressChangeFlag}}",
              "description": "Flag indicadora de Mudança de endereço em uma ordem de instalação (preenchimento permitido apenas para agendamentos de ordens do tipo instalação - orderType=Instalacao)"
            },
            {
              "disabled": false,
              "key": "productType",
              "value": "{{productType}}",
              "description": "(Required) Tipo do produto a ser considerado para o tipo de ordem a ser executada <br> - Banda Larga <br>"
            },
            {
              "disabled": false,
              "key": "priorityFlag",
              "value": "{{priorityFlag}}",
              "description": "Flag indicadora de agendamento prioritário (Preenchimento permitido apenas para orderType=Instalacao ou orderType=ChamadoTecnico)<br><b>*** APENAS PARA CONTRATOS COBERTOS COM ESTA FUNCIONALIDADE"
            },
            {
              "disabled": false,
              "key": "priorityReason",
              "value": "{{priorityReason}}",
              "description": "Motivo da solicitação de priorização do agendamento (Preenchimento obrigatório para quando \"priorityFlag\"= true)"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "54ea0876-32ed-4138-8ee1-034737aa2c40",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"OK\"\n  },\n  \"slots\": [\n    {\n      \"id\": \"8c2c93c7-4621-4830-b384-0d12bb33eedf\",\n      \"startDate\": \"2021-05-30T08:00:00\",\n      \"finishDate\": \"2021-05-30T12:00:00\",\n      \"expireIn\": 300\n    },\n    {\n      \"id\": \"bff13821-73c3-42cc-9327-b05c7df5a67f\",\n      \"startDate\": \"2021-05-30T13:00:00\",\n      \"finishDate\": \"2021-05-30T18:00:00\",\n      \"expireIn\": 300\n    },\n    {\n      \"id\": \"6cbace1a-7eda-4093-9619-09e571e742b0\",\n      \"startDate\": \"2021-05-31T08:00:00\",\n      \"finishDate\": \"2021-05-31T12:00:00\",\n      \"expireIn\": 300\n    },\n    {\n      \"id\": \"0b78aee7-2e4f-4c0a-852c-5a4845564aff\",\n      \"startDate\": \"2021-05-31T13:00:00\",\n      \"finishDate\": \"2021-05-31T18:00:00\",\n      \"expireIn\": 300\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9578f30a-373f-4514-92ed-5d3e8fb20e4e",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a8738cfe-d352-4732-835e-52a514ba2ddb",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "40132585-8704-4d7a-b081-e4865c7e851b",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "d722dee7-4e9a-448a-bca8-454e4ff45b7c",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "72f13356-a8db-4daf-bf3b-c7838de9b292",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "167cf796-75af-409b-81f5-395073f51138",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Precondition Failed",
          "code": 412,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a646a8b6-781d-401f-a597-ca670960726b",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "811b8446-b564-4b05-bc0d-1613aa0a72a2",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3a3ea31b-afb2-4269-ac08-592337b5b9a1",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9bcd6cf3-ca19-4c6d-9aa1-107c38588152",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type  and AI Model \n\n\nTest generated for /searchTimeSlot?addressId=<long>&subscriberId=<string>&associatedDocument=<string>&startDate=<dateTime>&finishDate=<dateTime>&orderType=<string>&addressChangeFlag=false&productType=<string>,<string>&priorityFlag=false&priorityReason=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `slots` field',function(){\n            pm.expect(responseData.slots).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "86cdab3a-9521-4109-bf18-9a6ed11e326f",
      "name": "appointment",
      "item": [
        {
          "id": "3ec211f7-1a69-4ab1-96fe-667b83a433cf",
          "name": "Post Appointment",
          "request": {
            "name": "Post Appointment",
            "description": {},
            "url": {
              "path": [
                "appointment"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "dc0c7d59-b467-43d5-bcdb-179479e9644d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"order\": {\n    \"type\": \"Instalacao\",\n    \"associatedDocument\": \"VTT001\",\n    \"addressChange\": {\n      \"flag\": true\n    }\n  },\n  \"customer\": {\n    \"subscriberId\": \"VTAL001\"\n  },\n  \"appointment\": {\n    \"id\": \"SA-562403\",\n    \"startDate\": \"2021-05-30T13:00:00\",\n    \"finishDate\": \"2021-05-30T18:00:00\",\n    \"priority\": {\n      \"flag\": true,\n      \"reason\": \"Cliente Diamond\"\n    }\n  },\n  \"address\": {\n    \"id\": 17713\n  },\n  \"products\": {\n    \"product\": [\n      {\n        \"type\": \"Banda Larga\"\n      }\n    ]\n  },\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 201,\n    \"message\": \"Created\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "388b289d-993c-4379-a015-20f2c825eba8",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a71c5606-6370-487f-b1bf-5e34297bc66d",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c09c47b3-5106-4584-b5cb-2b89997dd019",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b90911fd-3633-46c6-a31f-c29f03f0dc16",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Identificador do Slot não encontrado ou expirado\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a4fe39bb-978c-4c48-8ce8-7b483cf63c7c",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "77cbecb7-fcca-4717-af14-d55a52205ea9",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "37b629de-a99f-4ff9-9d5f-45885892d3ae",
              "name": "Locked",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Locked (WebDAV) (RFC 4918)",
              "code": 423,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 423,\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2defb22a-a4d9-46a4-a9a1-35379f9b31f6",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "86f7f97c-9b20-42a6-b020-b947c3a6067d",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b6c2fc55-6a4c-43a2-ace2-dad5c9c095aa",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5cd22389-8c81-4997-ad7b-28e2bda4ebc0",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type  and AI Model \n\n\nTest generated for /appointment for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `order` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order`)){\n                if(pm.expect(ld.get(pm.response.json(), `order`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `order.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('order.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"order.type\", \"\")).to.include.oneOf([\"Instalação\",\"Retirada\",\"RemanejamentoPonto\",\"ChamadoTecnico\"]);\n        })\n\n        pm.test('Response has the `order.associatedDocument` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.associatedDocument`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.associatedDocument`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.associatedDocument`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('order.associatedDocument length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"order.associatedDocument\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `order.addressChange` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.addressChange`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.addressChange`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.addressChange`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `order.addressChange.flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.addressChange.flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.addressChange.flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.addressChange.flag`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customer`)){\n                if(pm.expect(ld.get(pm.response.json(), `customer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customer`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customer.subscriberId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customer.subscriberId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customer.subscriberId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customer.subscriberId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('customer.subscriberId length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"customer.subscriberId\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `appointment` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.id length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"appointment.id\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `appointment.startDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.startDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.startDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.startDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.startDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointment.startDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test('Response has the `appointment.finishDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.finishDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.finishDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.finishDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.finishDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointment.finishDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test('Response has the `appointment.priority` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.priority.flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority.flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority.flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority.flag`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.priority.reason` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority.reason`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority.reason`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority.reason`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.priority.reason length to be atmost `80`',function(){\n            pm.expect(ld.get(responseData, \"appointment.priority.reason\", \"\").length).to.be.at.most(80);\n        })\n\n        pm.test('Response has the `address` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address`)){\n                if(pm.expect(ld.get(pm.response.json(), `address`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `address.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `address.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address.id`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.test('address.id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"address.id\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test('Response has the `products` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`products`)){\n                if(pm.expect(ld.get(pm.response.json(), `products`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `products`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `products.product` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`products.product`)){\n                if(pm.expect(ld.get(pm.response.json(), `products.product`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `products.product`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the products.product field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`products.product`);\n            let productArray = ld.get(pm.response.json(), `products.product`, \"\");\n            for (let product_it = 0; product_it < productArray.length; product_it++) {\n                let iterator = product_it;\n                \t\n        pm.test(`${iterator} element of array 'products.product[${product_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `products.product[${product_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`products.product[${product_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('products.product[${product_it}].type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"products.product[${product_it}].type\", \"\")).to.include.oneOf([\"Banda Larga\"]);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `control` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                if(pm.expect(ld.get(pm.response.json(), `control`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `control.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('control.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `control.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `control.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "3bc5965c-fb90-4528-bcf8-160b9cc5d6cf",
          "name": "{appointmentId}",
          "item": [
            {
              "id": "ab34f0e1-0df8-4615-bd0e-0d754482be75",
              "name": "Retrieve Appointment",
              "request": {
                "name": "Retrieve Appointment",
                "description": {},
                "url": {
                  "path": [
                    "appointment",
                    ":appointmentId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{appointmentId}}",
                      "key": "appointmentId",
                      "description": "(Required) identificador do agendamento a ser consultado"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "e9f97bad-77a7-47b5-a343-1b67c425b397",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"Ok\"\n  },\n  \"appointments\": {\n    \"id\": \"SA-562403\",\n    \"lifeCycleStatus\": \"Não atribuído\",\n    \"occurrences\": [\n      {\n        \"creationDateTime\": \"2021-12-07T12:17:20\",\n        \"startDate\": \"2021-10-09T13:00:00\",\n        \"finishDate\": \"2021-10-09T18:00:00\",\n        \"reason\": \"Teste Vtal CW\",\n        \"reasonDetail\": \"Teste Vtal CW\"\n      }\n    ]\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "05e1c8c4-03b7-4cf0-9f6c-e5c59bb91187",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d0f54019-83e6-4d73-8922-07870956cb41",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e44cd395-916c-499b-a6c8-bdcf4a28b927",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "cf51192f-2ba8-4070-8a92-03c61a332c64",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0d8daf1a-88b0-4905-8832-ffe03fb10e69",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c62d086b-25c3-4910-ac9e-938e3cfb7368",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d35be746-1498-4776-85a9-a1b42b7e19c5",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3f633c90-dd6e-4347-b0c5-deb9241ecbdf",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7f30cfd7-769d-47cc-bf64-6ad72d6ec55c",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a1716c77-e364-4ed9-b461-2f903ecf61e1",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type  and AI Model \n\n\nTest generated for /appointment/:appointmentId for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `control` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                if(pm.expect(ld.get(pm.response.json(), `control`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `control.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('control.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `control.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `control.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n        pm.test('Response has the `appointments.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointments.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointments.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointments.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointments.id length to be atmost `15`',function(){\n            pm.expect(ld.get(responseData, \"appointments.id\", \"\").length).to.be.at.most(15);\n        })\n\n        pm.test('Response has the `appointments.lifeCycleStatus` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointments.lifeCycleStatus`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointments.lifeCycleStatus`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointments.lifeCycleStatus`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('appointments.lifeCycleStatus to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"appointments.lifeCycleStatus\", \"\")).to.include.oneOf([\"Não atribuído\",\"Atribuído\",\"Entregue ao técnico\",\"Recebido\",\"Em deslocamento\",\"Em execução\",\"Concluído com sucesso\",\"Cancelado\"]);\n        })\n  \n        pm.test('appointments.lifeCycleStatus length to be atmost `64`',function(){\n            pm.expect(ld.get(responseData, \"appointments.lifeCycleStatus\", \"\").length).to.be.at.most(64);\n        })\n\n        pm.test('Response has the `appointments.occurrences` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointments.occurrences`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `appointments.occurrences`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the appointments.occurrences field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`appointments.occurrences`);\n            let occurrencesArray = ld.get(pm.response.json(), `appointments.occurrences`, \"\");\n            for (let occurrences_it = 0; occurrences_it < occurrencesArray.length; occurrences_it++) {\n                let iterator = occurrences_it;\n                \t\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].creationDateTime' has 'creationDateTime' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].creationDateTime`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].creationDateTime`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].creationDateTime length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].creationDateTime\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].startDate' has 'startDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].startDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].startDate`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].startDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].startDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].finishDate' has 'finishDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].finishDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].finishDate`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].finishDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].finishDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].employeeID' has 'employeeID' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].employeeID`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].employeeID`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].employeeID length to be atmost `8`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].employeeID\", \"\").length).to.be.at.most(8);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].reason' has 'reason' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].reason`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].reason`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].reason length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].reason\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].reasonDetail' has 'reasonDetail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].reasonDetail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].reasonDetail`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].reasonDetail length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].reasonDetail\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].comments' has 'comments' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].comments`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].comments`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].comments length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].comments\", \"\").length).to.be.at.most(250);\n        })\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "08438280-81ec-4a60-8de9-fa04912f5063",
              "name": "Patch Appointment",
              "request": {
                "name": "Patch Appointment",
                "description": {},
                "url": {
                  "path": [
                    "appointment",
                    ":appointmentId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{appointmentId}}",
                      "key": "appointmentId",
                      "description": "(Required) identificador do agendamento a ser atualizado"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "6fe4acf2-1b98-4128-84b3-1659380865f4",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"order\": {\n    \"type\": \"Instalacao\",\n    \"associatedDocument\": \"VTT001\",\n    \"addressChange\": {\n      \"flag\": true\n    }\n  },\n  \"customer\": {\n    \"subscriberId\": \"VTAL001\"\n  },\n  \"appointment\": {\n    \"id\": \"SA-562403\",\n    \"startDate\": \"2021-05-30T13:00:00\",\n    \"finishDate\": \"2021-05-30T18:00:00\",\n    \"priority\": {\n      \"flag\": true,\n      \"reason\": \"Cliente Diamond\"\n    }\n  },\n  \"address\": {\n    \"id\": 17713\n  },\n  \"products\": {\n    \"product\": [\n      {\n        \"type\": \"Banda Larga\"\n      }\n    ]\n  },\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 201,\n    \"message\": \"Created\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c03981ef-1455-4951-a634-39460b4bcbea",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d06f4867-fa18-4294-92ae-cf4cd236fa96",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "9104078f-0e87-44aa-8384-a137274e2802",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "78ff8fd9-3167-42ef-a304-a2a4f8b7373c",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Identificador do Slot não encontrado ou expirado\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8c04ed08-f66e-463d-981b-1cdca8e0a64e",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "057313a1-597f-4200-901d-63ccc7c64e24",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "4f66f2f7-aa68-4c1b-b54c-25a33dc8e5cd",
                  "name": "Locked",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Locked (WebDAV) (RFC 4918)",
                  "code": 423,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 423,\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0e90dc4d-cdac-4ebf-8a3d-f20612f8baa4",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0b5b7813-97c9-4935-97a0-4ac9aad8583f",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "aeece888-068d-4ede-8d44-0729294734fc",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0ca9f9a7-db40-48c0-b30b-c948af7494b4",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type  and AI Model \n\n\nTest generated for /appointment/:appointmentId for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `order` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order`)){\n                if(pm.expect(ld.get(pm.response.json(), `order`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `order.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('order.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"order.type\", \"\")).to.include.oneOf([\"Instalação\",\"Retirada\",\"RemanejamentoPonto\",\"ChamadoTecnico\"]);\n        })\n\n        pm.test('Response has the `order.associatedDocument` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.associatedDocument`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.associatedDocument`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.associatedDocument`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('order.associatedDocument length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"order.associatedDocument\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `order.addressChange` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.addressChange`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.addressChange`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.addressChange`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `order.addressChange.flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.addressChange.flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.addressChange.flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.addressChange.flag`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customer`)){\n                if(pm.expect(ld.get(pm.response.json(), `customer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customer`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customer.subscriberId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customer.subscriberId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customer.subscriberId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customer.subscriberId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('customer.subscriberId length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"customer.subscriberId\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `appointment` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.id length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"appointment.id\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `appointment.startDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.startDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.startDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.startDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.startDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointment.startDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test('Response has the `appointment.finishDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.finishDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.finishDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.finishDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.finishDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointment.finishDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test('Response has the `appointment.priority` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.priority.flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority.flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority.flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority.flag`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.priority.reason` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority.reason`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority.reason`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority.reason`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.priority.reason length to be atmost `80`',function(){\n            pm.expect(ld.get(responseData, \"appointment.priority.reason\", \"\").length).to.be.at.most(80);\n        })\n\n        pm.test('Response has the `address` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address`)){\n                if(pm.expect(ld.get(pm.response.json(), `address`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `address.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `address.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address.id`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.test('address.id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"address.id\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test('Response has the `products` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`products`)){\n                if(pm.expect(ld.get(pm.response.json(), `products`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `products`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `products.product` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`products.product`)){\n                if(pm.expect(ld.get(pm.response.json(), `products.product`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `products.product`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the products.product field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`products.product`);\n            let productArray = ld.get(pm.response.json(), `products.product`, \"\");\n            for (let product_it = 0; product_it < productArray.length; product_it++) {\n                let iterator = product_it;\n                \t\n        pm.test(`${iterator} element of array 'products.product[${product_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `products.product[${product_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`products.product[${product_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('products.product[${product_it}].type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"products.product[${product_it}].type\", \"\")).to.include.oneOf([\"Banda Larga\"]);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `control` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                if(pm.expect(ld.get(pm.response.json(), `control`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `control.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('control.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `control.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `control.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "6ae32a75-5147-4fb8-ac7d-7471f7504d83",
              "name": "Delete Appointment",
              "request": {
                "name": "Delete Appointment",
                "description": {},
                "url": {
                  "path": [
                    "appointment",
                    ":appointmentId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "appointmentReason",
                      "value": "{{appointmentReason}}",
                      "description": "(Required) Descrição da causa do cancelamento"
                    },
                    {
                      "disabled": false,
                      "key": "appointmentComments",
                      "value": "{{appointmentComments}}",
                      "description": "Observação a ser colocada"
                    }
                  ],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{appointmentId}}",
                      "key": "appointmentId",
                      "description": "(Required) identificador do agendamento a ser cancelado"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "7610597f-4e14-4dba-8de4-ae5dd0b0eb25",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"OK\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "837645a3-3a04-4135-af93-2927ed0321a1",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0b67eb1f-7098-44d5-890a-624c6c34388f",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2efb04dd-0f52-4900-a1db-af356c6b7754",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "68a422ab-76cb-4a47-a361-000350034302",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "052cd6a0-43ea-46ec-9a30-7949feede67b",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2e526d85-2ac4-4350-a3b3-8de34e28fd0a",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "de2d6ee9-6fb1-4dc9-b21c-05b0fa1f35e9",
                  "name": "Locked",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Locked (WebDAV) (RFC 4918)",
                  "code": 423,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 423,\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c55324f1-21ef-42d0-a606-8efcc973274a",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "68dff0cc-defd-46b5-91be-580dbd7bd3ae",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "fdd24c5e-6527-400f-a6ae-eb8f9a14a294",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "af85e64f-89d2-4482-b8f5-cea5bade4e68",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type  and AI Model \n\n\nTest generated for /appointment/:appointmentId?appointmentReason=<string>&appointmentComments=<string> for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "a12263c9-6f74-4dc9-a75f-a0bc45244be8",
      "name": "Appointment Confirmation",
      "request": {
        "name": "Appointment Confirmation",
        "description": {},
        "url": {
          "path": [
            "appointmentConfirmation"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customer\": {\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "8e75d276-8a71-40c8-a3f2-090f95882d8d",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"OK\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "20e4d99d-267b-4b86-8990-5c0ef882fd3f",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f15e43d6-3deb-41b4-a12d-1df0f6527171",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "cb991a6b-ab46-4167-bd19-258a492ce256",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "64707116-0aef-434e-b99f-23ab78d18c83",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "aa21bc46-d4fd-4da4-b360-dec966e68952",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a592fa35-067a-405a-aff3-2e097198bb0b",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Precondition Failed",
          "code": 412,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "bb3500ba-1925-4491-9299-9f3753ee2436",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "311e01cb-b15b-4930-9a88-9a65999a8c7d",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "027da4b5-3e57-42d4-bee6-c98d31b28d43",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "76d54c88-62c3-4daa-bb57-72255cfb0df5",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type  and AI Model \n\n\nTest generated for /appointmentConfirmation for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `control` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                if(pm.expect(ld.get(pm.response.json(), `control`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `control.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('control.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `control.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `control.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "11beb6df-2780-4b78-b5e7-e4e361a23eea",
    "name": "Appointment",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}