{
  "item": [
    {
      "id": "8c6b671d-b1db-4558-8376-7edb83291658",
      "name": "Retrive Search Time Slot",
      "request": {
        "name": "Retrive Search Time Slot",
        "description": {},
        "url": {
          "path": [
            "searchTimeSlot"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "addressId",
              "value": "{{addressId}}",
              "description": "(Required) ID do endereço"
            },
            {
              "disabled": false,
              "key": "subscriberId",
              "value": "{{subscriberId}}",
              "description": "Identificador único da instação do cliente. <br>Parametro com preenchimento obrigatório para todos os agendamento de Ordens com tipo diferente de Instalação."
            },
            {
              "disabled": false,
              "key": "associatedDocument",
              "value": "{{associatedDocument}}",
              "description": "(Required) Documento associado utilizado na criação da ordem de agendamento"
            },
            {
              "disabled": false,
              "key": "startDate",
              "value": "{{startDate}}",
              "description": "(Required) Data de inicio para o periodo de pesquisa de slots ('Intervalo entre startDate e finishDate deve ser de no máximo 14 dias')"
            },
            {
              "disabled": false,
              "key": "finishDate",
              "value": "{{finishDate}}",
              "description": "(Required) Data de final para o periodo de pesquisa de slots ('Intervalo entre startDate e finishDate deve ser de no máximo 14 dias')"
            },
            {
              "disabled": false,
              "key": "orderType",
              "value": "{{orderType}}",
              "description": "(Required) Tipo da Ordem a ser executada <br> - Instalação <br> - Retirada <br> - RemanejamentoPonto <br> - ChamadoTecnico <br>"
            },
            {
              "disabled": false,
              "key": "addressChangeFlag",
              "value": "{{addressChangeFlag}}",
              "description": "Flag indicadora de Mudança de endereço em uma ordem de instalação (preenchimento permitido apenas para agendamentos de ordens do tipo instalação - orderType=Instalacao)"
            },
            {
              "disabled": false,
              "key": "productType",
              "value": "{{productType}}",
              "description": "(Required) Tipo do produto a ser considerado para o tipo de ordem a ser executada <br> - Banda Larga <br>"
            },
            {
              "disabled": false,
              "key": "priorityFlag",
              "value": "{{priorityFlag}}",
              "description": "Flag indicadora de agendamento prioritário (Preenchimento permitido apenas para orderType=Instalacao ou orderType=ChamadoTecnico)<br><b>*** APENAS PARA CONTRATOS COBERTOS COM ESTA FUNCIONALIDADE"
            },
            {
              "disabled": false,
              "key": "priorityReason",
              "value": "{{priorityReason}}",
              "description": "Motivo da solicitação de priorização do agendamento (Preenchimento obrigatório para quando \"priorityFlag\"= true)"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "8458e265-f34e-49f6-9660-f09d0887e0cd",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"OK\"\n  },\n  \"slots\": [\n    {\n      \"id\": \"8c2c93c7-4621-4830-b384-0d12bb33eedf\",\n      \"startDate\": \"2021-05-30T08:00:00\",\n      \"finishDate\": \"2021-05-30T12:00:00\",\n      \"expireIn\": 300\n    },\n    {\n      \"id\": \"bff13821-73c3-42cc-9327-b05c7df5a67f\",\n      \"startDate\": \"2021-05-30T13:00:00\",\n      \"finishDate\": \"2021-05-30T18:00:00\",\n      \"expireIn\": 300\n    },\n    {\n      \"id\": \"6cbace1a-7eda-4093-9619-09e571e742b0\",\n      \"startDate\": \"2021-05-31T08:00:00\",\n      \"finishDate\": \"2021-05-31T12:00:00\",\n      \"expireIn\": 300\n    },\n    {\n      \"id\": \"0b78aee7-2e4f-4c0a-852c-5a4845564aff\",\n      \"startDate\": \"2021-05-31T13:00:00\",\n      \"finishDate\": \"2021-05-31T18:00:00\",\n      \"expireIn\": 300\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ff48a83d-85e9-4d96-bfa4-9d843b4dfd47",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ceec1a9d-bcc5-48e0-a915-996a371fa757",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "06adf951-cdb2-4bee-9182-c4ba97d908f2",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "1b1c2582-c751-414c-9f38-99630a95be29",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "aae2a084-9f26-4640-a8fd-e0ab8bea8a7d",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7d8c6b7b-a522-4a75-8e49-8b78a5d32d30",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Precondition Failed",
          "code": 412,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9da26bab-4849-454f-ab84-1468681a16f8",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7d7c7020-305a-4dd6-a161-f5b8409f2bbb",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "0fd29d5f-8dc6-44c0-b7dc-0e3b1417caa4",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "85b1b851-8e40-4dbc-ac85-017f0422201e",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "searchTimeSlot"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "addressId",
                  "value": "{{addressId}}"
                },
                {
                  "key": "subscriberId",
                  "value": "{{subscriberId}}"
                },
                {
                  "key": "associatedDocument",
                  "value": "{{associatedDocument}}"
                },
                {
                  "key": "startDate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "finishDate",
                  "value": "{{finishDate}}"
                },
                {
                  "key": "orderType",
                  "value": "{{orderType}}"
                },
                {
                  "key": "addressChangeFlag",
                  "value": "{{addressChangeFlag}}"
                },
                {
                  "key": "productType",
                  "value": "{{productType}}"
                },
                {
                  "key": "priorityFlag",
                  "value": "{{priorityFlag}}"
                },
                {
                  "key": "priorityReason",
                  "value": "{{priorityReason}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for /searchTimeSlot?addressId=<long>&subscriberId=<string>&associatedDocument=<string>&startDate=<dateTime>&finishDate=<dateTime>&orderType=<string>&addressChangeFlag=false&productType=<string>,<string>&priorityFlag=false&priorityReason=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `slots` field',function(){\n            pm.expect(responseData.slots).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "de2570ff-48f0-401f-bab8-e30c52fdf8a6",
      "name": "appointment",
      "item": [
        {
          "id": "9cb48f30-0666-4394-98bf-87e337c6a83b",
          "name": "Post Appointment",
          "request": {
            "name": "Post Appointment",
            "description": {},
            "url": {
              "path": [
                "appointment"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "0fe0c156-1294-4c89-a3ad-d82c8ee5713d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"order\": {\n    \"type\": \"Instalacao\",\n    \"associatedDocument\": \"VTT001\",\n    \"addressChange\": {\n      \"flag\": true\n    }\n  },\n  \"customer\": {\n    \"subscriberId\": \"VTAL001\"\n  },\n  \"appointment\": {\n    \"id\": \"SA-562403\",\n    \"startDate\": \"2021-05-30T13:00:00\",\n    \"finishDate\": \"2021-05-30T18:00:00\",\n    \"priority\": {\n      \"flag\": true,\n      \"reason\": \"Cliente Diamond\"\n    }\n  },\n  \"address\": {\n    \"id\": 17713\n  },\n  \"products\": {\n    \"product\": [\n      {\n        \"type\": \"Banda Larga\"\n      }\n    ]\n  },\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 201,\n    \"message\": \"Created\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "16f91f11-e621-495f-83f2-27c6eb462c68",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "22eafba6-db02-4572-bbc7-08f61a5dbf39",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "734454bd-ffd1-4b0e-be3e-538b41570995",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9cc0b528-2656-411a-9892-37ef3a0467f7",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Identificador do Slot não encontrado ou expirado\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "68344c69-c6a3-4608-a0aa-dc78e6336fa2",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7bd70d00-3267-4a5b-9637-a636cac80cc3",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "37aa7fa8-2ae5-4ff0-8a2a-7402d69efb3f",
              "name": "Locked",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Locked (WebDAV) (RFC 4918)",
              "code": 423,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 423,\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2d8fcc24-790b-42ee-b127-c22330e88001",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a5799337-5a4e-410a-8575-a4545ba4f382",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "bff65b73-e698-4252-bbde-85cbf76e2cf6",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "25674b86-48ae-4001-9a41-1ea723b90056",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "appointment"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for /appointment for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `order` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order`)){\n                if(pm.expect(ld.get(pm.response.json(), `order`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `order.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('order.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"order.type\", \"\")).to.include.oneOf([\"Instalação\",\"Retirada\",\"RemanejamentoPonto\",\"ChamadoTecnico\"]);\n        })\n\n        pm.test('Response has the `order.associatedDocument` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.associatedDocument`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.associatedDocument`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.associatedDocument`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('order.associatedDocument length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"order.associatedDocument\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `order.addressChange` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.addressChange`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.addressChange`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.addressChange`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `order.addressChange.flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.addressChange.flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.addressChange.flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.addressChange.flag`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customer`)){\n                if(pm.expect(ld.get(pm.response.json(), `customer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customer`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customer.subscriberId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customer.subscriberId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customer.subscriberId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customer.subscriberId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('customer.subscriberId length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"customer.subscriberId\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `appointment` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.id length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"appointment.id\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `appointment.startDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.startDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.startDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.startDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.startDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointment.startDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test('Response has the `appointment.finishDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.finishDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.finishDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.finishDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.finishDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointment.finishDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test('Response has the `appointment.priority` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.priority.flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority.flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority.flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority.flag`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.priority.reason` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority.reason`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority.reason`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority.reason`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.priority.reason length to be atmost `80`',function(){\n            pm.expect(ld.get(responseData, \"appointment.priority.reason\", \"\").length).to.be.at.most(80);\n        })\n\n        pm.test('Response has the `address` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address`)){\n                if(pm.expect(ld.get(pm.response.json(), `address`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `address.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `address.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address.id`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.test('address.id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"address.id\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test('Response has the `products` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`products`)){\n                if(pm.expect(ld.get(pm.response.json(), `products`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `products`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `products.product` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`products.product`)){\n                if(pm.expect(ld.get(pm.response.json(), `products.product`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `products.product`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the products.product field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`products.product`);\n            let productArray = ld.get(pm.response.json(), `products.product`, \"\");\n            for (let product_it = 0; product_it < productArray.length; product_it++) {\n                let iterator = product_it;\n                \t\n        pm.test(`${iterator} element of array 'products.product[${product_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `products.product[${product_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`products.product[${product_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('products.product[${product_it}].type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"products.product[${product_it}].type\", \"\")).to.include.oneOf([\"Banda Larga\"]);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `control` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                if(pm.expect(ld.get(pm.response.json(), `control`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `control.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('control.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `control.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `control.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "cad43baf-7ec1-43b6-a9c3-d1cd7f81def4",
          "name": "{appointmentId}",
          "item": [
            {
              "id": "535592d6-c9b9-4355-b958-0dc88210be5c",
              "name": "Retrieve Appointment",
              "request": {
                "name": "Retrieve Appointment",
                "description": {},
                "url": {
                  "path": [
                    "appointment",
                    ":appointmentId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{appointmentId}}",
                      "key": "appointmentId",
                      "description": "(Required) identificador do agendamento a ser consultado"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "e574f3f2-2a4c-4784-aeb7-03ec30b45c78",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"Ok\"\n  },\n  \"appointments\": {\n    \"id\": \"SA-562403\",\n    \"lifeCycleStatus\": \"Não atribuído\",\n    \"occurrences\": [\n      {\n        \"creationDateTime\": \"2021-12-07T12:17:20\",\n        \"startDate\": \"2021-10-09T13:00:00\",\n        \"finishDate\": \"2021-10-09T18:00:00\",\n        \"reason\": \"Teste Vtal CW\",\n        \"reasonDetail\": \"Teste Vtal CW\"\n      }\n    ]\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a4645a93-8125-400a-a79e-f457dbe78c87",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "199aaa5c-1a45-4c4b-bc5a-b82e75e0e4d7",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e00d9471-3b82-4b70-b0ac-228e88a9ff1c",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2adc8d25-8d89-48a0-945f-63072b9b118c",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0326dae5-4220-4bc6-abc4-d85c207d4f11",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d569e5d3-5491-43a6-a58e-5ada618e52a3",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d1893f6f-bca4-4323-9fcb-5ee6d39bb68b",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b47eb754-39bb-4b60-aee2-9abd8bd23186",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2e43a6bb-4e21-40e2-9a66-b054a30022b1",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "46fc7cd8-1177-44f3-a86b-c2d17130daad",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser consultado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for /appointment/:appointmentId for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `control` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                if(pm.expect(ld.get(pm.response.json(), `control`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `control.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('control.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `control.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `control.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n        pm.test('Response has the `appointments.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointments.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointments.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointments.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointments.id length to be atmost `15`',function(){\n            pm.expect(ld.get(responseData, \"appointments.id\", \"\").length).to.be.at.most(15);\n        })\n\n        pm.test('Response has the `appointments.lifeCycleStatus` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointments.lifeCycleStatus`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointments.lifeCycleStatus`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointments.lifeCycleStatus`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('appointments.lifeCycleStatus to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"appointments.lifeCycleStatus\", \"\")).to.include.oneOf([\"Não atribuído\",\"Atribuído\",\"Entregue ao técnico\",\"Recebido\",\"Em deslocamento\",\"Em execução\",\"Concluído com sucesso\",\"Cancelado\"]);\n        })\n  \n        pm.test('appointments.lifeCycleStatus length to be atmost `64`',function(){\n            pm.expect(ld.get(responseData, \"appointments.lifeCycleStatus\", \"\").length).to.be.at.most(64);\n        })\n\n        pm.test('Response has the `appointments.occurrences` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointments.occurrences`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `appointments.occurrences`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the appointments.occurrences field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`appointments.occurrences`);\n            let occurrencesArray = ld.get(pm.response.json(), `appointments.occurrences`, \"\");\n            for (let occurrences_it = 0; occurrences_it < occurrencesArray.length; occurrences_it++) {\n                let iterator = occurrences_it;\n                \t\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].creationDateTime' has 'creationDateTime' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].creationDateTime`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].creationDateTime`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].creationDateTime length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].creationDateTime\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].startDate' has 'startDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].startDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].startDate`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].startDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].startDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].finishDate' has 'finishDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].finishDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].finishDate`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].finishDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].finishDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].employeeID' has 'employeeID' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].employeeID`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].employeeID`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].employeeID length to be atmost `8`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].employeeID\", \"\").length).to.be.at.most(8);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].reason' has 'reason' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].reason`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].reason`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].reason length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].reason\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].reasonDetail' has 'reasonDetail' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].reasonDetail`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].reasonDetail`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].reasonDetail length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].reasonDetail\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test(`${iterator} element of array 'appointments.occurrences[${occurrences_it}].comments' has 'comments' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `appointments.occurrences[${occurrences_it}].comments`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`appointments.occurrences[${occurrences_it}].comments`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('appointments.occurrences[${occurrences_it}].comments length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"appointments.occurrences[${occurrences_it}].comments\", \"\").length).to.be.at.most(250);\n        })\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "9dfc2066-cee8-4b6f-9128-e34795670492",
              "name": "Patch Appointment",
              "request": {
                "name": "Patch Appointment",
                "description": {},
                "url": {
                  "path": [
                    "appointment",
                    ":appointmentId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{appointmentId}}",
                      "key": "appointmentId",
                      "description": "(Required) identificador do agendamento a ser atualizado"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "8a09476c-ecdd-4f0e-a5b2-177f863de5a2",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"order\": {\n    \"type\": \"Instalacao\",\n    \"associatedDocument\": \"VTT001\",\n    \"addressChange\": {\n      \"flag\": true\n    }\n  },\n  \"customer\": {\n    \"subscriberId\": \"VTAL001\"\n  },\n  \"appointment\": {\n    \"id\": \"SA-562403\",\n    \"startDate\": \"2021-05-30T13:00:00\",\n    \"finishDate\": \"2021-05-30T18:00:00\",\n    \"priority\": {\n      \"flag\": true,\n      \"reason\": \"Cliente Diamond\"\n    }\n  },\n  \"address\": {\n    \"id\": 17713\n  },\n  \"products\": {\n    \"product\": [\n      {\n        \"type\": \"Banda Larga\"\n      }\n    ]\n  },\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 201,\n    \"message\": \"Created\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "517e5d13-e712-41ef-bebb-9d162a49a9e1",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "876208e0-d7b7-4578-8c94-6f2e75884639",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a78da8d7-04f1-477d-b8b6-877b574e28ac",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "70aa5cf0-8707-471d-8192-06a37f98d17f",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Identificador do Slot não encontrado ou expirado\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d4a3053e-4a58-4995-997f-6863c3494c2a",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c2a2ab20-4ec9-4c9d-a271-e293ebad9fd2",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3c17cb82-e3e3-44f8-8247-07c731c76412",
                  "name": "Locked",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Locked (WebDAV) (RFC 4918)",
                  "code": 423,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 423,\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8eb32441-d694-4894-b589-96a81d0a8580",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "82f5cce3-49bb-4d27-ac02-dd72dbc16327",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ae1bd653-0918-443f-a5f5-d5fb91ff747a",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "10d011a2-b343-4b69-855d-2da17c9fced6",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser atualizado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"appointment\": {\n        \"slot\": {\n            \"id\": \"{{id}}\"\n        },\n        \"reason\": \"{{reason}}\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for /appointment/:appointmentId for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `order` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order`)){\n                if(pm.expect(ld.get(pm.response.json(), `order`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `order.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('order.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"order.type\", \"\")).to.include.oneOf([\"Instalação\",\"Retirada\",\"RemanejamentoPonto\",\"ChamadoTecnico\"]);\n        })\n\n        pm.test('Response has the `order.associatedDocument` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.associatedDocument`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.associatedDocument`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.associatedDocument`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('order.associatedDocument length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"order.associatedDocument\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `order.addressChange` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.addressChange`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.addressChange`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.addressChange`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `order.addressChange.flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`order.addressChange.flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `order.addressChange.flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `order.addressChange.flag`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customer`)){\n                if(pm.expect(ld.get(pm.response.json(), `customer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customer`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customer.subscriberId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customer.subscriberId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customer.subscriberId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customer.subscriberId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('customer.subscriberId length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"customer.subscriberId\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `appointment` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.id length to be atmost `30`',function(){\n            pm.expect(ld.get(responseData, \"appointment.id\", \"\").length).to.be.at.most(30);\n        })\n\n        pm.test('Response has the `appointment.startDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.startDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.startDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.startDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.startDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointment.startDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test('Response has the `appointment.finishDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.finishDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.finishDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.finishDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.finishDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"appointment.finishDate\", \"\").length).to.be.at.most(25);\n        })\n\n        pm.test('Response has the `appointment.priority` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.priority.flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority.flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority.flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority.flag`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `appointment.priority.reason` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`appointment.priority.reason`)){\n                if(pm.expect(ld.get(pm.response.json(), `appointment.priority.reason`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `appointment.priority.reason`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('appointment.priority.reason length to be atmost `80`',function(){\n            pm.expect(ld.get(responseData, \"appointment.priority.reason\", \"\").length).to.be.at.most(80);\n        })\n\n        pm.test('Response has the `address` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address`)){\n                if(pm.expect(ld.get(pm.response.json(), `address`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `address.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `address.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address.id`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.test('address.id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"address.id\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test('Response has the `products` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`products`)){\n                if(pm.expect(ld.get(pm.response.json(), `products`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `products`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `products.product` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`products.product`)){\n                if(pm.expect(ld.get(pm.response.json(), `products.product`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `products.product`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the products.product field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`products.product`);\n            let productArray = ld.get(pm.response.json(), `products.product`, \"\");\n            for (let product_it = 0; product_it < productArray.length; product_it++) {\n                let iterator = product_it;\n                \t\n        pm.test(`${iterator} element of array 'products.product[${product_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `products.product[${product_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`products.product[${product_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('products.product[${product_it}].type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"products.product[${product_it}].type\", \"\")).to.include.oneOf([\"Banda Larga\"]);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `control` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                if(pm.expect(ld.get(pm.response.json(), `control`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `control.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('control.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `control.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `control.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f6a67168-18e0-4b54-8b8d-d06cc556898e",
              "name": "Delete Appointment",
              "request": {
                "name": "Delete Appointment",
                "description": {},
                "url": {
                  "path": [
                    "appointment",
                    ":appointmentId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "appointmentReason",
                      "value": "{{appointmentReason}}",
                      "description": "(Required) Descrição da causa do cancelamento"
                    },
                    {
                      "disabled": false,
                      "key": "appointmentComments",
                      "value": "{{appointmentComments}}",
                      "description": "Observação a ser colocada"
                    }
                  ],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{appointmentId}}",
                      "key": "appointmentId",
                      "description": "(Required) identificador do agendamento a ser cancelado"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "8a12dfd3-6409-4cc2-b52b-1791a2cf0f75",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"OK\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6b581de6-fe8a-476c-b66a-ab9164fd3672",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "5f5da624-beb8-47db-8325-da5541031d9e",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "564a041e-4a4e-48df-ac34-c237f6ea82da",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "5eb1a426-b3e9-49ef-95a8-b1a915cf3c6a",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d47bbeb1-acdb-4a33-8463-46807b162e32",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e8166b48-6868-49e5-9899-72aebffcddfd",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c29c05b2-9aed-4fa7-a977-a63cbd707191",
                  "name": "Locked",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Locked (WebDAV) (RFC 4918)",
                  "code": 423,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 423,\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "64181bfb-29ff-4f36-85da-ea67eea8f2b9",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "dc7f65ed-eb9c-4884-aed0-25974322cbcd",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bf47e36a-7771-410f-9328-994cc6c6ea2e",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "13cda64a-4315-4c63-ac4a-f037c8815369",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "appointment",
                        ":appointmentId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "appointmentReason",
                          "value": "{{appointmentReason}}"
                        },
                        {
                          "key": "appointmentComments",
                          "value": "{{appointmentComments}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{appointmentId}}",
                          "key": "appointmentId",
                          "description": "(Required) identificador do agendamento a ser cancelado"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for /appointment/:appointmentId?appointmentReason=<string>&appointmentComments=<string> for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "2769fb8d-4b57-4366-be01-4f9deedac52d",
      "name": "Appointment Confirmation",
      "request": {
        "name": "Appointment Confirmation",
        "description": {},
        "url": {
          "path": [
            "appointmentConfirmation"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customer\": {\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "88a030b5-a11c-45f9-bce0-540cc6732985",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"OK\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "59bcb5c4-53c2-4c14-8837-9022313b408b",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "92616dae-5758-4100-afce-9061caed2dc9",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "6e786632-97aa-470c-83e0-a0d23f393edb",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "39d8008a-e629-4a12-9499-5ac27b305061",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "fe90bd5d-888c-429d-a9c6-220a1d47987e",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "bc6fcced-4505-4213-9b3b-ce957db41d95",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Precondition Failed",
          "code": 412,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "0f6bf3ec-252b-4d02-a650-6bff7abc171e",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "2f44fad3-6fbf-4948-8691-dc28165a5bbd",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "943b4bf0-b5b8-4905-ba09-d66af628cf7a",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ec117606-32d4-4d55-9d70-dd291b8e6989",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "appointmentConfirmation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer\": {\n        \"subscriberId\": \"{{subscriberId}}\"\n    },\n    \"appointment\": {\n        \"id\": \"{{id}}\",\n        \"confirmation\": \"{{confirmation}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for /appointmentConfirmation for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `control` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                if(pm.expect(ld.get(pm.response.json(), `control`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `control.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('control.type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `control.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `control.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `control.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('control.code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "f63fa42b-a839-40e5-84b1-2c356a3f15f1",
    "name": "Appointment",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}