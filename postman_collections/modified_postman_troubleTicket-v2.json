{
  "item": [
    {
      "id": "9dbd983e-22c4-4efc-8d1a-52cbea2cc444",
      "name": "troubleTicket",
      "item": [
        {
          "id": "aa9a2acf-2a27-4672-a515-4ecad8d94e5b",
          "name": "Creates a TroubleTicket",
          "request": {
            "name": "Creates a TroubleTicket",
            "description": {},
            "url": {
              "path": [
                "troubleTicket"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedCustomers\": [\n            \"{{affectedCustomers}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\",\n        \"origin\": \"{{origin}}\",\n        \"protocol\": \"{{protocol}}\",\n        \"issueCode\": \"{{issueCode}}\",\n        \"issueAction\": \"{{issueAction}}\",\n        \"issueDescription\": \"{{issueDescription}}\",\n        \"issueReason\": \"{{issueReason}}\",\n        \"issueObservation\": \"{{issueObservation}}\"\n    },\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"externalId\": \"{{externalId}}\",\n    \"attachment\": {\n        \"content\": \"{{content}}\",\n        \"mimeType\": \"{{mimeType}}\",\n        \"name\": \"{{name}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "b1287bd2-6c40-47c6-97c9-4a5f29d7856e",
              "name": "Created",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"CMT000000024330\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fb304f21-b4e8-4a72-aa02-ca4919ea8a39",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "faed2bdd-8249-460e-8bcd-1fe2ec559696",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2b05f220-218a-4ef3-b45e-e9f0a8f03a32",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "30dddc11-0788-4664-ba2e-3872d349ae5a",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "75c7c006-a20c-4722-bf15-255e888ed64f",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ad21a227-be69-45ad-9d05-c2d9bfaddc42",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3a89e2b8-0e11-4130-a294-7dbd87d12997",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0d2f2e86-1646-49fc-b0e8-19364c940b64",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7af6dab7-6993-41f0-99c0-7698a94618ee",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "cb23387e-df92-4020-90a3-2dc3290f72b7",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketType\": \"{{ticketType}}\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"category\": \"{{category}}\",\n    \"subCategory\": \"{{subCategory}}\",\n    \"impactDate\": \"{{impactDate}}\",\n    \"description\": \"{{description}}\",\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"affectedEquipment\": [\n            \"{{affectedEquipment}}\"\n        ],\n        \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n        \"city\": \"{{city}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /troubleTicket for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(20);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "e93a17ef-63a3-407b-a397-9e4609e38ddf",
          "name": "Retrieves TroubleTicket List",
          "request": {
            "name": "Retrieves TroubleTicket List",
            "description": {
              "content": "Esta operação retorna a lista dos Ticket abertos no período passado como parâmetro (startDate - endDate). O intervalo máximo de pesquisa são de 30 dias <br> <b>Obs: O período máximo de armazenamento dos dados são de 6 meses",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "troubleTicket"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "startDate",
                  "value": "{{startDate}}",
                  "description": "(Required) Data inicial da pesquisa"
                },
                {
                  "disabled": false,
                  "key": "endDate",
                  "value": "{{endDate}}",
                  "description": "(Required) Data fim da pesquisa"
                },
                {
                  "disabled": false,
                  "key": "ticketType",
                  "value": "{{ticketType}}",
                  "description": "(Required) Representa um tipo de negócio do registro de problemas, por exemplo incidente, reclamação, solicitação"
                },
                {
                  "disabled": false,
                  "key": "category",
                  "value": "{{category}}",
                  "description": "Tipo do chamado"
                },
                {
                  "disabled": false,
                  "key": "subCategory",
                  "value": "{{subCategory}}",
                  "description": "Subtipo da categoria do chamado"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "f2aea653-a1fe-4203-86c4-6b5c7f380bc7",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"id\": \"INC000000024330\",\n    \"ticketType\": \"Incidente\",\n    \"categoryId\": 257,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"AGENDAMENTO - FALTA DE SLOT\",\n    \"creationDate\": \"2023-01-30T14:28:00.000Z\",\n    \"status\": \"In Progress\",\n    \"statusChangeReason\": \"Automated Resolution Reported\",\n    \"statusChangeDate\": \"2023-02-04T16:12:04.000Z\"\n  },\n  {\n    \"id\": \"INC000000036541\",\n    \"ticketType\": \"Incidente\",\n    \"categoryId\": 246,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"SUSPEITA DE FALHA MASSIVA DE REDES\",\n    \"creationDate\": \"2023-02-15T15:28:00.000Z\",\n    \"status\": \"Assigned\",\n    \"statusChangeReason\": \"Automated Resolution Reported\",\n    \"statusChangeDate\": \"2023-02-04T16:12:04.000Z\"\n  },\n  {\n    \"id\": \"INC000000085134\",\n    \"ticketType\": \"Incidente\",\n    \"categoryId\": 241,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"MUDANCA DE VELOCIDADE\",\n    \"creationDate\": \"2023-03-02T12:30:00.000Z\",\n    \"status\": \"Cancelled\",\n    \"statusChangeReason\": \"Procedure not followed\",\n    \"statusChangeDate\": \"2023-02-04T16:12:04.000Z\"\n  },\n  {\n    \"id\": \"INC000000064258\",\n    \"ticketType\": \"Incidente\",\n    \"categoryId\": 255,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"ASSOCIACAO DE EQUIPAMENTO\",\n    \"creationDate\": \"2023-01-20T18:28:00.000Z\",\n    \"status\": \"Resolved\",\n    \"statusChangeReason\": \"Automated Resolution Reported\",\n    \"statusChangeDate\": \"2023-02-04T16:12:04.000Z\"\n  },\n  {\n    \"id\": \"INC000000066532\",\n    \"ticketType\": \"Incidente\",\n    \"categoryId\": 255,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"ASSOCIACAO DE EQUIPAMENTO\",\n    \"creationDate\": \"2023-01-10T15:20:00.000Z\",\n    \"status\": \"Closed\",\n    \"statusChangeReason\": \"Automated Resolution Reported\",\n    \"statusChangeDate\": \"2023-02-04T16:12:04.000Z\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "bd230a22-db3c-4a6b-9192-7be7f6764d14",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "05e1c487-4559-47a5-b297-9fbcc006ad22",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c11e87a6-a408-4113-b117-a81076302cd1",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "202843bf-80cc-49a5-aacd-ad5def07af6b",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b0b9572d-1f44-4312-8ce1-78cf5e88bb37",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ee0e0fee-620b-4133-bd0d-2592e02cdd4d",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7c62a44b-624d-43d1-ade4-211eaa471d2e",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2dceedf7-cae1-4882-b554-36506a26c998",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1bdb52b9-4c6a-43c6-8600-37923d404949",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a406d7e4-739c-4480-99cd-f40677cd9fdb",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "troubleTicket"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "{{startDate}}"
                    },
                    {
                      "key": "endDate",
                      "value": "{{endDate}}"
                    },
                    {
                      "key": "ticketType",
                      "value": "{{ticketType}}"
                    },
                    {
                      "key": "category",
                      "value": "{{category}}"
                    },
                    {
                      "key": "subCategory",
                      "value": "{{subCategory}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /troubleTicket?startDate=<date>&endDate=<date>&ticketType=<string>&category=<string>&subCategory=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f5bc4557-e36e-4909-abed-e6ad422ad9c4",
          "name": "{id}",
          "item": [
            {
              "id": "07c9e837-657c-4563-96ac-040076aa0bb5",
              "name": "Retrieves a TroubleTicket by ID",
              "request": {
                "name": "Retrieves a TroubleTicket by ID",
                "description": {},
                "url": {
                  "path": [
                    "troubleTicket",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) Identificador do TroubleTicket"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "526bf050-8b0c-43b9-8139-fd82ce28c022",
                  "name": "Success",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"INC000000024330\",\n  \"ticketType\": \"Incidente\",\n  \"categoryId\": 257,\n  \"category\": \"Suspeita de Massivo\",\n  \"subCategory\": \"AGENDAMENTO - FALTA DE SLOT\",\n  \"impactDate\": \"2023-01-30T14:28:00.000Z\",\n  \"creationDate\": \"2023-01-30T14:28:00.000Z\",\n  \"description\": \"Agenda indisponível\",\n  \"externalId\": \"TASK000001\",\n  \"note\": [\n    {\n      \"id\": 155,\n      \"author\": \"João da Silva\",\n      \"date\": \"2023-01-30T14:28:00.000Z\",\n      \"phoneNumber\": 11912348765,\n      \"affectedCustomer\": [\n        350285169,\n        856472598,\n        953247125,\n        854216478,\n        312547523\n      ],\n      \"stateAbbreviation\": \"RJ\",\n      \"city\": \"Rio de Janeiro\"\n    },\n    {\n      \"id\": 189,\n      \"author\": \"Pedro Santos\",\n      \"date\": \"2023-02-03T14:12:04.000Z\",\n      \"text\": \"Solicitação em andamento\"\n    },\n    {\n      \"id\": 236,\n      \"author\": \"Pedro Santos\",\n      \"date\": \"2023-02-04T16:12:04.000Z\",\n      \"text\": \"Atendimento realizado e chamado concluído com sucesso\"\n    }\n  ],\n  \"attachment\": [\n    {\n      \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n      \"mimeType\": \"application/pdf\",\n      \"name\": \"Evidencia\"\n    },\n    {\n      \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n      \"mimeType\": \"application/pdf\",\n      \"name\": \"Evidencia_2\"\n    }\n  ],\n  \"status\": \"Resolved\",\n  \"statusChangeReason\": \"Automated Resolution Reported\",\n  \"statusChangeDate\": \"2023-02-04T16:12:04.000Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0e94ea29-3dfe-4d57-be69-54fb80708757",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "44b9fe8c-f0ae-489b-a744-6b48a60d490c",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e843ffe4-20ef-4754-83d7-a0ce638d1c47",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "181c3d01-05af-4418-9e3c-ae4cbdc96f7f",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bf88a919-fa2e-4968-b7bb-f6d8d85b9d9d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3d5d6a60-82c1-4686-844a-6c6d0db74b2d",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "1ec63d46-d09f-4270-a4e1-7d6dc5a7dca9",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bfe48404-c18e-4158-a94c-5d61e41b8c31",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ffe0079a-b353-407e-b06a-755dadd78511",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7274f75d-a752-4494-b512-313b97fbf1f1",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /troubleTicket/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test('Response has the `ticketType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`ticketType`)){\n                if(pm.expect(ld.get(pm.response.json(), `ticketType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `ticketType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('ticketType length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"ticketType\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `categoryId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`categoryId`)){\n                if(pm.expect(ld.get(pm.response.json(), `categoryId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `categoryId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('categoryId length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"categoryId\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test('Response has the `category` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`category`)){\n                if(pm.expect(ld.get(pm.response.json(), `category`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `category`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('category to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"category\", \"\")).to.include.oneOf([\"Caso pontual\",\"Suspeita de Massivo\",\"FTTH\",\"FTTP\"]);\n        })\n  \n        pm.test('category length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"category\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `subCategory` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`subCategory`)){\n                if(pm.expect(ld.get(pm.response.json(), `subCategory`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `subCategory`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('subCategory length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"subCategory\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `impactDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`impactDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `impactDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `impactDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('impactDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"impactDate\", \"\").length).to.be.at.most(25);\n        })\n  \n        pm.test('impactDate format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"impactDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `creationDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`creationDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `creationDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `creationDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('creationDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"creationDate\", \"\").length).to.be.at.most(25);\n        })\n  \n        pm.test('creationDate format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"creationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `description` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n                if(pm.expect(ld.get(pm.response.json(), `description`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `description`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('description length to be atmost `4000`',function(){\n            pm.expect(ld.get(responseData, \"description\", \"\").length).to.be.at.most(4000);\n        })\n\n        pm.test('Response has the `externalId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`externalId`)){\n                if(pm.expect(ld.get(pm.response.json(), `externalId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `externalId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('externalId length to be atmost `50`',function(){\n            pm.expect(ld.get(responseData, \"externalId\", \"\").length).to.be.at.most(50);\n        })\n\n        pm.test('Response has the `note` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`note`)){\n                if(pm.expect(ld.get(pm.response.json(), `note`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `note`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the note field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`note`);\n            let noteArray = ld.get(pm.response.json(), `note`, \"\");\n            for (let note_it = 0; note_it < noteArray.length; note_it++) {\n                let iterator = note_it;\n                \t\n        pm.test(`${iterator} element of array 'note[${note_it}].id' has 'id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].id`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].id\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].author' has 'author' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].author`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].author`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].author length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].author\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].date' has 'date' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].date`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].date`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].date length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].date\", \"\").length).to.be.at.most(25);\n        })\n  \n        pm.test('note[${note_it}].date format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].date\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].text length to be atmost `4000`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].text\", \"\").length).to.be.at.most(4000);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].phoneNumber' has 'phoneNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].phoneNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].phoneNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].phoneNumber length to be atmost `11`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].phoneNumber\", \"\").length).to.be.at.most(11);\n        })\n\n        pm.test(`${iterator} element of array 'noteArray' has 'affectedCustomers' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].affectedCustomers`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `note[${note_it}].affectedCustomers`))).to.equal(true);\n            }\n\n        })\n\n  \n        pm.test('note[${note_it}].affectedCustomers length to be alteast `1`',function(){\n          pm.expect(ld.get(responseData, \"note[${note_it}].affectedCustomers\", \"\").length).to.be.at.least(1);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].stateAbbreviation' has 'stateAbbreviation' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].stateAbbreviation`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].stateAbbreviation`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].stateAbbreviation length to be atmost `2`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].stateAbbreviation\", \"\").length).to.be.at.most(2);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].city' has 'city' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].city`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].city`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].city length to be atmost `50`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].city\", \"\").length).to.be.at.most(50);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].origin' has 'origin' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].origin`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].origin`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('note[${note_it}].origin to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"note[${note_it}].origin\", \"\")).to.include.oneOf([\"JEC/PROCON\",\"ANATEL\"]);\n        })\n  \n        pm.test('note[${note_it}].origin length to be atmost `40`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].origin\", \"\").length).to.be.at.most(40);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].protocol' has 'protocol' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].protocol`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].protocol`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].protocol length to be atmost `40`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].protocol\", \"\").length).to.be.at.most(40);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueCode' has 'issueCode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueCode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueCode`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].issueCode length to be atmost `6`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueCode\", \"\").length).to.be.at.most(6);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueAction' has 'issueAction' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueAction`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueAction`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('note[${note_it}].issueAction to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"note[${note_it}].issueAction\", \"\")).to.include.oneOf([\"abrir\",\"fechar\"]);\n        })\n  \n        pm.test('note[${note_it}].issueAction length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueAction\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueDescription' has 'issueDescription' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueDescription`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueDescription`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].issueDescription length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueDescription\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueReason' has 'issueReason' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueReason`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueReason`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].issueReason length to be atmost `1000`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueReason\", \"\").length).to.be.at.most(1000);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueObservation' has 'issueObservation' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueObservation`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueObservation`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].issueObservation length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueObservation\", \"\").length).to.be.at.most(255);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `attachment` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`attachment`)){\n                if(pm.expect(ld.get(pm.response.json(), `attachment`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `attachment`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the attachment field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`attachment`);\n            let attachmentArray = ld.get(pm.response.json(), `attachment`, \"\");\n            for (let attachment_it = 0; attachment_it < attachmentArray.length; attachment_it++) {\n                let iterator = attachment_it;\n                \t\n        pm.test(`${iterator} element of array 'attachment[${attachment_it}].content' has 'content' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `attachment[${attachment_it}].content`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`attachment[${attachment_it}].content`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'attachment[${attachment_it}].mimeType' has 'mimeType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `attachment[${attachment_it}].mimeType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`attachment[${attachment_it}].mimeType`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('attachment[${attachment_it}].mimeType to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"attachment[${attachment_it}].mimeType\", \"\")).to.include.oneOf([\"text/csv\",\"image/jpeg\",\"application/pdf\",\"image/png\",\"application/x-rar-compressed\",\"text/plain\",\"application/zip\",\"application/x-zip-compressed\"]);\n        })\n  \n        pm.test('attachment[${attachment_it}].mimeType length to be atmost `50`',function(){\n            pm.expect(ld.get(responseData, \"attachment[${attachment_it}].mimeType\", \"\").length).to.be.at.most(50);\n        })\n\n        pm.test(`${iterator} element of array 'attachment[${attachment_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `attachment[${attachment_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`attachment[${attachment_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('attachment[${attachment_it}].name length to be atmost `50`',function(){\n            pm.expect(ld.get(responseData, \"attachment[${attachment_it}].name\", \"\").length).to.be.at.most(50);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"In Progress\",\"Assigned\",\"Cancelled\",\"In Cancelling\",\"Pending\",\"Resolved\",\"Closed\",\"New\"]);\n        })\n  \n        pm.test('status length to be atmost `15`',function(){\n            pm.expect(ld.get(responseData, \"status\", \"\").length).to.be.at.most(15);\n        })\n\n        pm.test('Response has the `statusChangeReason` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`statusChangeReason`)){\n                if(pm.expect(ld.get(pm.response.json(), `statusChangeReason`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `statusChangeReason`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('statusChangeReason length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"statusChangeReason\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `statusChangeDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`statusChangeDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `statusChangeDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `statusChangeDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('statusChangeDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"statusChangeDate\", \"\").length).to.be.at.most(25);\n        })\n  \n        pm.test('statusChangeDate format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"statusChangeDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "210ebdb6-d760-4bcd-a853-18c7afdc9cd8",
              "name": "Updates partially a TroubleTicket",
              "request": {
                "name": "Updates partially a TroubleTicket",
                "description": {},
                "url": {
                  "path": [
                    "troubleTicket",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) Identificador do TroubleTicket"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"issueCode\": \"{{issueCode}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "61e5d81b-9743-4c13-95a2-2db03776a2b6",
                  "name": "Notified",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"24330\",\n  \"ticketType\": \"Incidente\",\n  \"categoryId\": 257,\n  \"category\": \"Suspeita de Massivo\",\n  \"subCategory\": \"AGENDAMENTO - FALTA DE SLOT\",\n  \"impactDate\": \"2023-01-30T14:28:00.000Z\",\n  \"creationDate\": \"2023-01-30T14:28:00.000Z\",\n  \"description\": \"Agenda indisponível\",\n  \"externalId\": \"TASK000001\",\n  \"note\": [\n    {\n      \"author\": \"João da Silva\",\n      \"date\": \"2023-02-02T12:25:04.000Z\",\n      \"text\": \"Telefone contato: (11) 91234-8765; Clientes Impactados: 350285169, 856472598, 953247125, 854216478, 312547523; Localidade: RJ; Cidade: Rio de Janeiro\"\n    },\n    {\n      \"author\": \"João da Silva\",\n      \"date\": \"2023-02-02T14:12:04.000Z\",\n      \"text\": \"Favor verificar o problema. Evidencia em anexo.\"\n    },\n    {\n      \"author\": \"Pedro Santos\",\n      \"date\": \"2023-02-03T14:12:04.000Z\",\n      \"text\": \"Solicitação em andamento\",\n      \"attachment\": [\n        {\n          \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n          \"mimeType\": \"image/jpeg\",\n          \"name\": \"Evidencia_2\"\n        },\n        {\n          \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n          \"mimeType\": \"image/png\",\n          \"name\": \"Evidencia_3\"\n        }\n      ]\n    },\n    {\n      \"author\": \"Pedro Santos\",\n      \"date\": \"2023-02-04T16:12:04.000Z\",\n      \"text\": \"Atendimento realizado e chamado concluído com sucesso\",\n      \"attachment\": [\n        {\n          \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n          \"mimeType\": \"application/msword\",\n          \"name\": \"Evidencia_4\"\n        },\n        {\n          \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n          \"mimeType\": \"application/vnd.ms-excel\",\n          \"name\": \"Evidencia_5\"\n        }\n      ]\n    },\n    {\n      \"author\": \"João da Silva\",\n      \"date\": \"2023-02-05T14:12:04.000Z\",\n      \"text\": \"Caros por gentileza verificar o reparo. O problema persiste conforme evidência em anexo.\",\n      \"attachment\": [\n        {\n          \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n          \"mimeType\": \"text/plain\",\n          \"name\": \"Nova_evidencia\"\n        }\n      ]\n    }\n  ],\n  \"attachment\": [\n    {\n      \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n      \"mimeType\": \"application/pdf\",\n      \"name\": \"Evidencia\"\n    },\n    {\n      \"content\": \"VGVzdGUgZW52aW8gZGUgYW5leG8=\",\n      \"mimeType\": \"application/pdf\",\n      \"name\": \"Doc_Interno\"\n    }\n  ],\n  \"status\": \"In Progress\",\n  \"statusChangeReason\": null,\n  \"statusChangeDate\": \"2023-02-03T14:12:04.000Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6d0e53cd-80f5-4369-9085-1154bb863f27",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a1e6d6db-768d-4dec-b349-c5d64cdf6022",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "01a44e7e-465f-4c62-8482-8e5fb5a58bec",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7d503f2d-e5ec-4210-a6c2-588220329f84",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "35cac5e4-11cf-46e4-91ff-9c49c2f55949",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "640f50fc-cc24-4458-b3e3-bcebe2851e89",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e89719d9-2193-48b9-bc9f-5f7d35aaf0cc",
                  "name": "Locked",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Locked (WebDAV) (RFC 4918)",
                  "code": 423,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 423,\n    \"message\": \"Locked\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "99840416-3713-4957-a155-da0320f1c257",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0b78e2fc-6edf-414a-bc1e-028b92406cd0",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "dc618e2a-e2e2-46f2-9037-e5dd54b6b977",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6f2638b6-c273-471e-87b5-644b43fd80c7",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"note\": {\n        \"author\": \"{{author}}\",\n        \"text\": \"{{text}}\",\n        \"attachment\": {\n            \"content\": \"{{content}}\",\n            \"mimeType\": \"{{mimeType}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /troubleTicket/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Notified\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test('Response has the `ticketType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`ticketType`)){\n                if(pm.expect(ld.get(pm.response.json(), `ticketType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `ticketType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('ticketType length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"ticketType\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `categoryId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`categoryId`)){\n                if(pm.expect(ld.get(pm.response.json(), `categoryId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `categoryId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('categoryId length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"categoryId\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test('Response has the `category` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`category`)){\n                if(pm.expect(ld.get(pm.response.json(), `category`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `category`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('category to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"category\", \"\")).to.include.oneOf([\"Caso pontual\",\"Suspeita de Massivo\",\"FTTH\",\"FTTP\"]);\n        })\n  \n        pm.test('category length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"category\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `subCategory` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`subCategory`)){\n                if(pm.expect(ld.get(pm.response.json(), `subCategory`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `subCategory`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('subCategory length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"subCategory\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test('Response has the `impactDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`impactDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `impactDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `impactDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('impactDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"impactDate\", \"\").length).to.be.at.most(25);\n        })\n  \n        pm.test('impactDate format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"impactDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `creationDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`creationDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `creationDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `creationDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('creationDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"creationDate\", \"\").length).to.be.at.most(25);\n        })\n  \n        pm.test('creationDate format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"creationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `description` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n                if(pm.expect(ld.get(pm.response.json(), `description`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `description`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('description length to be atmost `4000`',function(){\n            pm.expect(ld.get(responseData, \"description\", \"\").length).to.be.at.most(4000);\n        })\n\n        pm.test('Response has the `externalId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`externalId`)){\n                if(pm.expect(ld.get(pm.response.json(), `externalId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `externalId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('externalId length to be atmost `50`',function(){\n            pm.expect(ld.get(responseData, \"externalId\", \"\").length).to.be.at.most(50);\n        })\n\n        pm.test('Response has the `note` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`note`)){\n                if(pm.expect(ld.get(pm.response.json(), `note`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `note`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the note field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`note`);\n            let noteArray = ld.get(pm.response.json(), `note`, \"\");\n            for (let note_it = 0; note_it < noteArray.length; note_it++) {\n                let iterator = note_it;\n                \t\n        pm.test(`${iterator} element of array 'note[${note_it}].id' has 'id' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].id`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].id`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].id length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].id\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].author' has 'author' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].author`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].author`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].author length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].author\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].date' has 'date' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].date`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].date`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].date length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].date\", \"\").length).to.be.at.most(25);\n        })\n  \n        pm.test('note[${note_it}].date format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].date\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].text' has 'text' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].text`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].text`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].text length to be atmost `4000`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].text\", \"\").length).to.be.at.most(4000);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].phoneNumber' has 'phoneNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].phoneNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].phoneNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].phoneNumber length to be atmost `11`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].phoneNumber\", \"\").length).to.be.at.most(11);\n        })\n\n        pm.test(`${iterator} element of array 'noteArray' has 'affectedCustomers' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].affectedCustomers`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `note[${note_it}].affectedCustomers`))).to.equal(true);\n            }\n\n        })\n\n  \n        pm.test('note[${note_it}].affectedCustomers length to be alteast `1`',function(){\n          pm.expect(ld.get(responseData, \"note[${note_it}].affectedCustomers\", \"\").length).to.be.at.least(1);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].stateAbbreviation' has 'stateAbbreviation' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].stateAbbreviation`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].stateAbbreviation`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].stateAbbreviation length to be atmost `2`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].stateAbbreviation\", \"\").length).to.be.at.most(2);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].city' has 'city' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].city`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].city`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].city length to be atmost `50`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].city\", \"\").length).to.be.at.most(50);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].origin' has 'origin' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].origin`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].origin`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('note[${note_it}].origin to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"note[${note_it}].origin\", \"\")).to.include.oneOf([\"JEC/PROCON\",\"ANATEL\"]);\n        })\n  \n        pm.test('note[${note_it}].origin length to be atmost `40`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].origin\", \"\").length).to.be.at.most(40);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].protocol' has 'protocol' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].protocol`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].protocol`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].protocol length to be atmost `40`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].protocol\", \"\").length).to.be.at.most(40);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueCode' has 'issueCode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueCode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueCode`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].issueCode length to be atmost `6`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueCode\", \"\").length).to.be.at.most(6);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueAction' has 'issueAction' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueAction`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueAction`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('note[${note_it}].issueAction to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"note[${note_it}].issueAction\", \"\")).to.include.oneOf([\"abrir\",\"fechar\"]);\n        })\n  \n        pm.test('note[${note_it}].issueAction length to be atmost `20`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueAction\", \"\").length).to.be.at.most(20);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueDescription' has 'issueDescription' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueDescription`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueDescription`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].issueDescription length to be atmost `100`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueDescription\", \"\").length).to.be.at.most(100);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueReason' has 'issueReason' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueReason`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueReason`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].issueReason length to be atmost `1000`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueReason\", \"\").length).to.be.at.most(1000);\n        })\n\n        pm.test(`${iterator} element of array 'note[${note_it}].issueObservation' has 'issueObservation' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `note[${note_it}].issueObservation`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`note[${note_it}].issueObservation`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('note[${note_it}].issueObservation length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"note[${note_it}].issueObservation\", \"\").length).to.be.at.most(255);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `attachment` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`attachment`)){\n                if(pm.expect(ld.get(pm.response.json(), `attachment`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `attachment`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the attachment field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`attachment`);\n            let attachmentArray = ld.get(pm.response.json(), `attachment`, \"\");\n            for (let attachment_it = 0; attachment_it < attachmentArray.length; attachment_it++) {\n                let iterator = attachment_it;\n                \t\n        pm.test(`${iterator} element of array 'attachment[${attachment_it}].content' has 'content' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `attachment[${attachment_it}].content`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`attachment[${attachment_it}].content`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'attachment[${attachment_it}].mimeType' has 'mimeType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `attachment[${attachment_it}].mimeType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`attachment[${attachment_it}].mimeType`, null)).to.equal(\"string\");\n            }\n        })\n\n \n        pm.test('attachment[${attachment_it}].mimeType to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"attachment[${attachment_it}].mimeType\", \"\")).to.include.oneOf([\"text/csv\",\"image/jpeg\",\"application/pdf\",\"image/png\",\"application/x-rar-compressed\",\"text/plain\",\"application/zip\",\"application/x-zip-compressed\"]);\n        })\n  \n        pm.test('attachment[${attachment_it}].mimeType length to be atmost `50`',function(){\n            pm.expect(ld.get(responseData, \"attachment[${attachment_it}].mimeType\", \"\").length).to.be.at.most(50);\n        })\n\n        pm.test(`${iterator} element of array 'attachment[${attachment_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `attachment[${attachment_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`attachment[${attachment_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test('attachment[${attachment_it}].name length to be atmost `50`',function(){\n            pm.expect(ld.get(responseData, \"attachment[${attachment_it}].name\", \"\").length).to.be.at.most(50);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"In Progress\",\"Assigned\",\"Cancelled\",\"In Cancelling\",\"Pending\",\"Resolved\",\"Closed\",\"New\"]);\n        })\n  \n        pm.test('status length to be atmost `15`',function(){\n            pm.expect(ld.get(responseData, \"status\", \"\").length).to.be.at.most(15);\n        })\n\n        pm.test('Response has the `statusChangeReason` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`statusChangeReason`)){\n                if(pm.expect(ld.get(pm.response.json(), `statusChangeReason`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `statusChangeReason`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('statusChangeReason length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"statusChangeReason\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `statusChangeDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`statusChangeDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `statusChangeDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `statusChangeDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('statusChangeDate length to be atmost `25`',function(){\n            pm.expect(ld.get(responseData, \"statusChangeDate\", \"\").length).to.be.at.most(25);\n        })\n  \n        pm.test('statusChangeDate format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"statusChangeDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f7fb8dea-f061-408f-832e-e7f6b7ee936c",
              "name": "Deletes a TroubleTicket",
              "request": {
                "name": "Deletes a TroubleTicket",
                "description": {},
                "url": {
                  "path": [
                    "troubleTicket",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) Identificador do TroubleTicket"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "d558a730-0f96-4f7e-a2e2-7af5459d5765",
                  "name": "Success",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 200,\n    \"message\": \"Success\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "22db05df-0342-48be-8b64-8148c3d38cb4",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "fe7547a1-720a-4de2-9181-2cba897a5491",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bc395342-11ab-47e1-bba5-68cb7187212b",
                  "name": "Forbidden - Scope Not Permitted",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c00a02c1-9a31-48e3-ae04-561755c0ac3a",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e3828155-18db-4371-97a0-2fc448650822",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "89a42f76-507b-43f6-93ff-ef39424dd2a2",
                  "name": "Not Acceptable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "62bf1ef9-63b4-4e9f-936c-18441048c52d",
                  "name": "Locked",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Locked (WebDAV) (RFC 4918)",
                  "code": 423,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 423,\n    \"message\": \"Locked\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "67bfe3ed-54da-4b57-af11-4d4e10ad3f2d",
                  "name": "Too Many Requests - Exceeded Quota",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ff68ab5e-01c5-4682-9125-acab3958c3fd",
                  "name": "Internal Server Error",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ba89d1ce-2def-4286-a05c-9eb17d165ffd",
                  "name": "Service Unavailable",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "588ed001-9dc6-4c8b-821e-f95da6fc78d5",
                  "name": "Gateway Timeout",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "troubleTicket",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) Identificador do TroubleTicket"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Gateway Timeout",
                  "code": 504,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /troubleTicket/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "104632be-7450-481c-91d4-78f70d38c95d",
      "name": "listener",
      "item": [
        {
          "id": "53965657-a7ae-4a45-b8d7-17f05552b418",
          "name": "Client listener for entity TroubleTicketAttributeValueChangeEvent",
          "request": {
            "name": "Client listener for entity TroubleTicketAttributeValueChangeEvent",
            "description": {
              "content": "Example of a client listener for receiving the notification TroubleTicketAttributeValueChangeEvent",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "listener",
                "troubleTicketAttributeValueChangeEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\",\n                \"phoneNumber\": \"{{phoneNumber}}\",\n                \"affectedCustomers\": [\n                    \"{{affectedCustomers}}\"\n                ],\n                \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n                \"city\": \"{{city}}\",\n                \"origin\": \"{{origin}}\",\n                \"protocol\": \"{{protocol}}\",\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueObservation\": \"{{issueObservation}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "d40dc9ed-8ac5-43a7-aa35-2ff68e8cf2a8",
              "name": "Notified",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 201,\n    \"message\": \"Notified\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3a799bff-c7e2-4c0b-aed5-d86095c6e453",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0e538249-6299-41eb-a943-bb3ae5d8cbdd",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d8918e75-ba35-4019-8d2a-07ce4341b2b8",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "738e7a52-adb4-42ef-a578-e743ed22dbbe",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4da78043-e459-48fb-95c9-87e9f726b5b4",
              "name": "Not Allowed",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 405,\n    \"message\": \"Not Allowed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "91bedc31-457d-4592-acda-1fb9ab7eddf3",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5597fe01-ca8b-451d-bc61-981a27e36a5a",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8df613ce-29c6-4e5c-a88b-1b6d55193a71",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2d1f7086-e83e-4caa-8527-13e674991811",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d73b41dc-b27e-4f38-ab5f-00b231736500",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "86b838b5-8088-4638-92e8-7559c144fdb0",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketAttributeValueChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/troubleTicketAttributeValueChangeEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Notified\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 405){\n    pm.test(\"Not Allowed\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "a1408069-7546-4c7e-8465-6e8e3b322ec9",
          "name": "Client listener for entity TroubleTicketStateChangeEvent",
          "request": {
            "name": "Client listener for entity TroubleTicketStateChangeEvent",
            "description": {
              "content": "Example of a client listener for receiving the notification TroubleTicketStateChangeEvent",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "listener",
                "troubleTicketStateChangeEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\",\n            \"resource\": {\n                \"devices\": [\n                    \"{{devices}}\"\n                ],\n                \"fiberPath\": {\n                    \"items\": [\n                        \"{{items}}\"\n                    ]\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "ad892772-010b-4f95-8ef9-ade6be9222b1",
              "name": "Notified",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 201,\n    \"message\": \"Notified\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "da489942-8674-4b90-b839-7a710ffccdc1",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "caed25e4-5b0a-440f-ac6a-391dab308327",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "94e81a0b-747c-4c5d-b7d5-50347a6a2b61",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7094b8d4-5639-41e2-99db-75bc803ea5ea",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7507d2dc-99c3-499d-ab8b-c7e81d41c18e",
              "name": "Not Allowed",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 405,\n    \"message\": \"Not Allowed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "06402579-f643-47dd-acd1-a5664a427136",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b6951893-57c1-4375-81fe-11c311a8aec2",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "94185bba-7794-4ca9-a076-416ac5b13ce4",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e6ad181a-57cf-4507-baba-3f680686981d",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "54971c0f-f889-43c7-be9a-2cb75d08776a",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e8f13e04-b99d-4879-ab87-33b5eaade93b",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"status\": \"{{status}}\",\n            \"statusChangeReason\": \"{{statusChangeReason}}\",\n            \"statusChangeDate\": \"{{statusChangeDate}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/troubleTicketStateChangeEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Notified\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 405){\n    pm.test(\"Not Allowed\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2dfcedad-029d-49fe-8a4e-2ec00a8a74e9",
          "name": "Client listener for entity TroubleTicketInformationRequiredEvent",
          "request": {
            "name": "Client listener for entity TroubleTicketInformationRequiredEvent",
            "description": {
              "content": "Example of a client listener for receiving the notification TroubleTicketInformationRequiredEvent",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "listener",
                "troubleTicketInformationRequiredEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"note\": {\n                \"id\": \"{{note.id}}\",\n                \"author\": \"{{author}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\",\n                \"phoneNumber\": \"{{phoneNumber}}\",\n                \"affectedCustomers\": [\n                    \"{{affectedCustomers}}\"\n                ],\n                \"stateAbbreviation\": \"{{stateAbbreviation}}\",\n                \"city\": \"{{city}}\",\n                \"origin\": \"{{origin}}\",\n                \"protocol\": \"{{protocol}}\",\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueObservation\": \"{{issueObservation}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "7e91dc39-dfdb-461f-9ed0-d53817e099b4",
              "name": "Notified",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": 201,\n    \"message\": \"Notified\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4d4ed78a-8d7b-4037-bed5-453678936e89",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 400,\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6bf0b0be-34b5-4a11-a418-3f60a393fe96",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1d434e68-0c25-41ed-9ae6-d737babbe6ed",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b7e0dc3f-2a21-442e-9254-70c00345c2f7",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0c7b5906-99e6-4e25-b743-d2e842da9bc5",
              "name": "Not Allowed",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 405,\n    \"message\": \"Not Allowed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6fef2768-6b2a-43da-8a44-fe9ad6ea30d2",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "800876d3-06b1-482e-be56-c3ebc89a8f3a",
              "name": "Not Acceptable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c0c6b738-f2cd-4e97-bc41-1df0d7cd5e55",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "30ba4fcc-ce05-44de-a5d6-0db5c5e8e600",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "976b46b7-7a8c-4547-92e0-d4b2387e39e9",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "58858073-960c-443a-b0a7-c284faa11f37",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "troubleTicketInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"eventTime\": \"{{eventTime}}\",\n    \"eventType\": \"{{eventType}}\",\n    \"event\": {\n        \"troubleTicket\": {\n            \"id\": \"{{id}}\",\n            \"externalId\": \"{{externalId}}\",\n            \"ticketType\": \"{{ticketType}}\",\n            \"note\": {\n                \"issueCode\": \"{{issueCode}}\",\n                \"issueDescription\": \"{{issueDescription}}\",\n                \"issueObservation\": \"{{issueObservation}}\",\n                \"issueReason\": \"{{issueReason}}\",\n                \"issueAction\": \"{{issueAction}}\",\n                \"date\": \"{{date}}\",\n                \"text\": \"{{text}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/troubleTicketInformationRequiredEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Notified\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 405){\n    pm.test(\"Not Allowed\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "8804ab20-f8dd-474b-8590-9c7b119babc4",
      "name": "Retrieves Categories and SubCategories List",
      "request": {
        "name": "Retrieves Categories and SubCategories List",
        "description": {},
        "url": {
          "path": [
            "category"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "427a6a49-5357-4840-a953-7362e0b4e72a",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"id\": 241,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"MUDANCA DE VELOCIDADE\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 242,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"RETIRADA\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 243,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"CANCELAMENTO ORDEM DE SERVICO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 244,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"FALHA FUNCIONAL\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 245,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"ORDEM PENDENCIA VTAL COM SLA VENCIDO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 246,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"SUSPEITA DE FALHA MASSIVA DE REDES\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 247,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"SUSPEITA DE FALHA DE REDES\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 248,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"PRE DIAGNOSTICO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 249,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"DIAGNOSTICO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 250,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"EXECUCAO DOS SERVICOS REMOTOS\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 251,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"ABERTURA DE CHAMADO TECNICO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 252,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"NOTIFICACAO DO ENCERRAMENTO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 253,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"AGENDAMENTO - ERRO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 254,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"INSTALACAO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 255,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"CONSULTA DE VIABILIDADE\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 256,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"ASSOCIACAO DE EQUIPAMENTO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 257,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"CONSULTA DE ENDERECOS\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 258,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"BLOQUEIO/DESBLOQUEIO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 259,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"AGENDAMENTO - FALTA DE SLOT\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 260,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"CADASTRO ENDERECOS / COMPLEMENTO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 261,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"TET\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 262,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"REJEITE JANELA DE MANUTENCAO\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 263,\n    \"category\": \"Caso pontual\",\n    \"subCategory\": \"TEC\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 264,\n    \"category\": \"Reparo\",\n    \"subCategory\": \"Reclamacao cliente\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\",\n      \"note.origin\",\n      \"note.protocol\"\n    ]\n  },\n  {\n    \"id\": 265,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"CDO errada\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 266,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"CDO acima 300m\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 267,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"Falha de associação ONT\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 268,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"CDO sem potência adequada\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 269,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"CDO não localizada\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 270,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"CDO vandalizada\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 271,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"CDO não construída\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 272,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"Riser não construído\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 273,\n    \"category\": \"Ativacao\",\n    \"subCategory\": \"Facilidade ocupada (ID da Facilidade)\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 274,\n    \"category\": \"Reparo\",\n    \"subCategory\": \"CDO sem potência adequada\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 275,\n    \"category\": \"Reparo\",\n    \"subCategory\": \"Problema de Navegação\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 276,\n    \"category\": \"Reparo\",\n    \"subCategory\": \"Falha de associaçao ONT\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedCustomer\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  },\n  {\n    \"id\": 277,\n    \"category\": \"Suspeita de Massivo\",\n    \"subCategory\": \"SUSPEITA DE FALHA MASSIVA DE REDES - EQUIPAMENTOS\",\n    \"templateFields\": [\n      \"note.phoneNumber\",\n      \"note.affectedEquipment\",\n      \"note.stateAbbreviation\",\n      \"note.city\"\n    ]\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3ec9cee0-2d1a-4d7a-a962-f88c323cf5a6",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 401,\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "31fbe54e-4896-4913-bccb-9c3654bfbe26",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 403,\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3c176304-1f4e-44fd-990e-65cb6db57313",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 404,\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "b7987a68-737e-4086-a96b-81ac5dce39f7",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 406,\n    \"message\": \"Not Acceptable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "650321ed-136d-4148-9763-5135b0144a68",
          "name": "Not Acceptable",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Precondition Failed",
          "code": 412,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 412,\n    \"message\": \"Precondition Failed\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7da7eaf6-f05e-469e-95b6-7e288e3b7b73",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": 429,\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "e7a4f8e4-69ca-4a5d-9ba7-19fb71eab252",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "59f9fa43-4df5-4f38-ba83-7be0e7334e07",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 503,\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "2f00e82a-fdd2-41d3-8a25-466b0a03a3d0",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "category"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-testvtal using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /category for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 412){\n    pm.test(\"Not Acceptable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Precondition Failed\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('type to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n            pm.expect(ld.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('message length to be atmost `250`',function(){\n            pm.expect(ld.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('code length to be atmost `3`',function(){\n            pm.expect(ld.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "25315200-2a16-4968-b753-3629df7139e2",
    "name": "TroubleTicketManagement",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}