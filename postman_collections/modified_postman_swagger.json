{
  "item": [
    {
      "id": "0f76dafc-4a34-4897-85e4-cfdf518c9557",
      "name": "pet",
      "item": [
        {
          "id": "20cfa4d1-651e-4d3c-8e9c-4d1ed0a2c33d",
          "name": "Add a new pet to the store",
          "request": {
            "name": "Add a new pet to the store",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "http://petstore.swagger.io/api/oauth/dialog"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"photoUrls\": \"{{photoUrls}}\",\n    \"id\": \"{{id}}\",\n    \"category\": {\n        \"id\": \"{{id}}\",\n        \"name\": \"{{name}}\"\n    },\n    \"tags\": \"{{tags}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "ef97e823-a11d-41b3-bf46-e6816a9c5012",
              "name": "Invalid input",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /pet for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 405){\n    pm.test(\"Invalid input\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ece8b992-cbdf-407e-9c1f-67be7895d02c",
          "name": "Update an existing pet",
          "request": {
            "name": "Update an existing pet",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "http://petstore.swagger.io/api/oauth/dialog"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"photoUrls\": \"{{photoUrls}}\",\n    \"id\": \"{{id}}\",\n    \"category\": {\n        \"id\": \"{{id}}\",\n        \"name\": \"{{name}}\"\n    },\n    \"tags\": \"{{tags}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "623eeb35-94cb-4aa4-bb7d-79cf5d361828",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d9f52da1-79dd-42d9-9677-e10a64b0855d",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "fcd3da19-9c91-4bc5-a3f8-323a7ff8a989",
              "name": "Validation exception",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {}
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /pet for http method type put in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Pet not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n\nif (pm.response.code == 405){\n    pm.test(\"Validation exception\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f572ab82-ac6d-4cdd-a6a2-e3790905b391",
          "name": "Finds Pets by status",
          "request": {
            "name": "Finds Pets by status",
            "description": {
              "content": "Multiple status values can be provided with comma separated strings",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "status",
                  "value": "{{status}}",
                  "description": "Status values that need to be considered for filter"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "http://petstore.swagger.io/api/oauth/dialog"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            }
          },
          "response": [
            {
              "id": "442b1e7d-6874-4b5d-8f3d-fd285c66c8da",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "75f7a35a-42bc-435e-8cf6-9559d253235b",
              "name": "Invalid status value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /pet/findByStatus?status=available for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid status value\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "33cdf375-68f9-4bd9-b0e6-2b16e814076b",
          "name": "Finds Pets by tags",
          "request": {
            "name": "Finds Pets by tags",
            "description": {
              "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByTags"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}",
                  "description": "Tags to filter by"
                },
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}",
                  "description": "Tags to filter by"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "http://petstore.swagger.io/api/oauth/dialog"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            }
          },
          "response": [
            {
              "id": "ab40fb9d-f7f6-4ee6-b0ae-7eda502e561d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3d67dd3f-ee14-4bbd-82b8-8eac4fa66dfb",
              "name": "Invalid tag value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /pet/findByTags?tags=<string>&tags=<string> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid tag value\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8332ad02-3a3c-4cbb-b19f-f7fbce17fbc1",
          "name": "{petId}",
          "item": [
            {
              "id": "8da31f45-1ffb-4f96-9695-2bb2353ca390",
              "name": "Find pet by ID",
              "request": {
                "name": "Find pet by ID",
                "description": {
                  "content": "Returns a single pet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet to return"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "api_key"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "30b25949-f870-4bb9-9313-10f1419a9f1b",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/xml"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a47c74d3-9682-48c1-be7f-1169f9001650",
                  "name": "Invalid ID supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "e22aee70-0511-4f51-8f8d-04ddc9e891bf",
                  "name": "Pet not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /pet/:petId for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"id\")){\n            if(responseData.id!=null){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `category.id` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"category.id\")){\n            if(responseData.category.id!=null){\n              pm.expect(typeof _.get(responseData, \"category.id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `category.name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"category.name\")){\n          if(responseData.category.name!=null){\n            pm.expect(typeof _.get(responseData, \"category.name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `photoUrls` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"photoUrls\")){\n            if(responseData.photoUrls!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"photoUrls\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n      \n        pm.test('Response has the `tags` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"tags\")){\n            if(responseData.tags!=null){\n              pm.expect(Array.isArray(_.get(responseData, \"tags\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `tags` field has all the required fields',function(){         \n          pm.expect(responseData).to.have.nested.property(\"tags\");  \n          let tagsArray = _.get(responseData, \"tags\", \"\");  \n          for (let i = 0; i < tagsArray.length; i++) {  \n            \t\n        pm.test(`${i} element of array 'tags' has 'id' as number`,function(){  \n          if(pm.expect(responseData.tags[i]).to.have.nested.property(\"id\")){\n            if(responseData.tags[i].id != null ){\n              pm.expect(typeof _.get(responseData,`tags[${i}].id`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'tags' has 'name' as 'string'`,function(){ \n        if(pm.expect(responseData.tags[i]).to.have.nested.property(\"name\")){\n          if(responseData.tags[i].name != null){\n            pm.expect(typeof _.get(responseData,`tags[${i}].name`, \"\")).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"status\", \"\")).to.include.oneOf([\"available\",\"pending\",\"sold\"]);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Pet not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "23bdde0c-cc4c-4276-98ce-075a6a3f7e10",
              "name": "Updates a pet in the store with form data",
              "request": {
                "name": "Updates a pet in the store with form data",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet that needs to be updated"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "http://petstore.swagger.io/api/oauth/dialog"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                },
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Updated name of the pet"
                    },
                    {
                      "disabled": false,
                      "key": "status",
                      "value": "{{status}}",
                      "description": "Updated status of the pet"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "c6400f4b-51cb-4d2e-8b26-3c218aa2fbf0",
                  "name": "Invalid input",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet that needs to be updated"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "disabled": false,
                          "description": {
                            "content": "Updated name of the pet",
                            "type": "text/plain"
                          },
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "disabled": false,
                          "description": {
                            "content": "Updated status of the pet",
                            "type": "text/plain"
                          },
                          "key": "status",
                          "value": "{{status}}"
                        }
                      ]
                    }
                  },
                  "status": "Method Not Allowed",
                  "code": 405,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /pet/:petId for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 405){\n    pm.test(\"Invalid input\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "d8a93b4f-fa5e-4acc-a149-e37eef1c11f4",
              "name": "Deletes a pet",
              "request": {
                "name": "Deletes a pet",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) Pet id to delete"
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "key": "api_key",
                    "value": "{{api_key}}",
                    "description": ""
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "http://petstore.swagger.io/api/oauth/dialog"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "dd5daf6b-cafa-465a-8c3f-08ea833ded14",
                  "name": "Invalid pet value",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) Pet id to delete"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "disabled": false,
                        "key": "api_key",
                        "value": "{{api_key}}",
                        "description": ""
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /pet/:petId for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid pet value\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "15b51296-87cd-4d48-ae69-96bc5a11e0f8",
              "name": "uploads an image",
              "request": {
                "name": "uploads an image",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId",
                    "uploadImage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet to update"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "http://petstore.swagger.io/api/oauth/dialog"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                },
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "additionalMetadata",
                      "value": "{{additionalMetadata}}",
                      "type": "text",
                      "description": "Additional data to pass to server"
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "description": "file to upload"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "aa0b2363-352a-41e3-98b1-c53025c3281c",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId",
                        "uploadImage"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to update"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "description": {
                            "content": "Additional data to pass to server",
                            "type": "text/plain"
                          },
                          "key": "additionalMetadata",
                          "value": "{{additionalMetadata}}",
                          "type": "text"
                        },
                        {
                          "description": {
                            "content": "file to upload",
                            "type": "text/plain"
                          },
                          "key": "file",
                          "value": "{{file}}",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"code\": -20669802,\n  \"type\": \"laboris pariatur veniam sunt\",\n  \"message\": \"dolore aliquip incididunt\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /pet/:petId/uploadImage for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "9b15e8e2-5f7f-4193-a0cd-f76f737913aa",
      "name": "store",
      "item": [
        {
          "id": "3f42266d-d64e-45bf-b468-58065ccc28ed",
          "name": "Returns pet inventories by status",
          "request": {
            "name": "Returns pet inventories by status",
            "description": {
              "content": "Returns a map of status codes to quantities",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "inventory"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "api_key"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "8f5cdedd-f0f6-494a-ac49-c8a1aba35ff7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "inventory"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"laborumf\": 98314513,\n  \"ut8\": 97565875\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /store/inventory for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "deb4f990-6492-4a94-bdf1-cb10ba2eda81",
          "name": "order",
          "item": [
            {
              "id": "0cc08063-a211-4070-8a52-a755742da9d4",
              "name": "Place an order for a pet",
              "request": {
                "name": "Place an order for a pet",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "store",
                    "order"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "POST",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"{{id}}\",\n    \"petId\": \"{{petId}}\",\n    \"quantity\": \"{{quantity}}\",\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{status}}\",\n    \"complete\": \"{{complete}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "15c2613c-60f4-4fe7-a367-97d40c2640dd",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "store",
                        "order"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/xml"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"{{id}}\",\n    \"petId\": \"{{petId}}\",\n    \"quantity\": \"{{quantity}}\",\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{status}}\",\n    \"complete\": \"{{complete}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"<string>\",\n  \"complete\": \"<boolean>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ccc7c84e-ff18-46a8-a107-f7feafb5cb5e",
                  "name": "Invalid Order",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "store",
                        "order"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"{{id}}\",\n    \"petId\": \"{{petId}}\",\n    \"quantity\": \"{{quantity}}\",\n    \"shipDate\": \"{{shipDate}}\",\n    \"status\": \"{{status}}\",\n    \"complete\": \"{{complete}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /store/order for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"id\")){\n            if(responseData.id!=null){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `petId` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"petId\")){\n            if(responseData.petId!=null){\n              pm.expect(typeof _.get(responseData, \"petId\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `quantity` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"quantity\")){\n            if(responseData.quantity!=null){\n              pm.expect(typeof _.get(responseData, \"quantity\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `shipDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"shipDate\")){\n          if(responseData.shipDate!=null){\n            pm.expect(typeof _.get(responseData, \"shipDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('shipDate format to be date-time',function(){\n                pm.expect(_.get(responseData, \"shipDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"status\", \"\")).to.include.oneOf([\"placed\",\"approved\",\"delivered\"]);\n        })\n\n      pm.test('Response has the `complete` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"complete\")){\n          if(responseData.complete!=null){\n            pm.expect(typeof _.get(responseData, \"complete\", \"\")).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid Order\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a7a4b64f-4920-46dc-96f5-074861d9d998",
              "name": "{orderId}",
              "item": [
                {
                  "id": "843ae13a-c563-423c-8beb-9f3a5f9da6e3",
                  "name": "Find purchase order by ID",
                  "request": {
                    "name": "Find purchase order by ID",
                    "description": {
                      "content": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "store",
                        "order",
                        ":orderId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{orderId}}",
                          "key": "orderId",
                          "description": "(Required) ID of pet that needs to be fetched"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/xml"
                      }
                    ],
                    "method": "GET",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "6ada9159-79f2-465e-97e3-879815620639",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of pet that needs to be fetched"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/xml"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"<string>\",\n  \"complete\": \"<boolean>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "b89801b7-93dc-4b29-a52b-ec4ee8d9923b",
                      "name": "Invalid ID supplied",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of pet that needs to be fetched"
                            }
                          ]
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "e777386e-96af-4fe7-875c-14f232a25e04",
                      "name": "Order not found",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of pet that needs to be fetched"
                            }
                          ]
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /store/order/:orderId for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"id\")){\n            if(responseData.id!=null){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `petId` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"petId\")){\n            if(responseData.petId!=null){\n              pm.expect(typeof _.get(responseData, \"petId\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `quantity` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"quantity\")){\n            if(responseData.quantity!=null){\n              pm.expect(typeof _.get(responseData, \"quantity\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `shipDate` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"shipDate\")){\n          if(responseData.shipDate!=null){\n            pm.expect(typeof _.get(responseData, \"shipDate\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n            pm.test('shipDate format to be date-time',function(){\n                pm.expect(_.get(responseData, \"shipDate\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n \n        pm.test('status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"status\", \"\")).to.include.oneOf([\"placed\",\"approved\",\"delivered\"]);\n        })\n\n      pm.test('Response has the `complete` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"complete\")){\n          if(responseData.complete!=null){\n            pm.expect(typeof _.get(responseData, \"complete\", \"\")).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Order not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "8f744a8d-8d0d-4024-93f0-c3a94c92e501",
                  "name": "Delete purchase order by ID",
                  "request": {
                    "name": "Delete purchase order by ID",
                    "description": {
                      "content": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "store",
                        "order",
                        ":orderId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{orderId}}",
                          "key": "orderId",
                          "description": "(Required) ID of the order that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "db55799a-da1b-42ab-a0d3-a9fa2568bb9a",
                      "name": "Invalid ID supplied",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of the order that needs to be deleted"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "9beaed96-e969-4f3f-8489-5d2132de18db",
                      "name": "Order not found",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of the order that needs to be deleted"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /store/order/:orderId for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Order not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "52686afa-226a-4038-ac8a-88e031d15c54",
      "name": "user",
      "item": [
        {
          "id": "28dbe69f-e6a8-4841-b73e-d375c1d34153",
          "name": "Create user",
          "request": {
            "name": "Create user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "5088e26c-7d67-4dcf-a08f-47c68ce06d92",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /user for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "eaadd68a-9586-4911-988a-62013676b26d",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithArray"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    },\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "00a652be-25bb-49da-8673-d474e98fc8ed",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithArray"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /user/createWithArray for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "0a8acb23-3fd4-4bcd-98ef-a7820bd6b960",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithList"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    },\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "8e344719-87e6-4ff8-a7a5-9cb9a02af395",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithList"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /user/createWithList for http method type post in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "41f050ae-b76f-4801-b4eb-e339cc467fb3",
          "name": "Logs user into the system",
          "request": {
            "name": "Logs user into the system",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "username",
                  "value": "{{username}}",
                  "description": "The user name for login"
                },
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "The password for login in clear text"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "73b066d7-88db-42c7-bf6b-7970362e0894",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "username",
                      "value": "{{username}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "calls per hour allowed by the user",
                  "key": "X-Rate-Limit",
                  "value": "{{X-Rate-Limit}}"
                },
                {
                  "disabled": false,
                  "description": "date in UTC when toekn expires",
                  "key": "X-Expires-After",
                  "value": "{{X-Expires-After}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "\"laboris\"",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5f657a9e-0ad7-4b95-b06f-24b96b0ed47a",
              "name": "Invalid username/password supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "username",
                      "value": "{{username}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /user/login?username=<string>&password=<string> for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid username/password supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "31b4bfe6-24de-4c52-b20e-32dd1942544b",
          "name": "Logs out current logged in user session",
          "request": {
            "name": "Logs out current logged in user session",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "b85a2fae-0105-4d1a-ae54-93973dc4094e",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /user/logout for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4455cf6c-d551-45e2-b011-b7310c02ded1",
          "name": "{username}",
          "item": [
            {
              "id": "07b7bfcf-5972-4efa-907e-398b83db7016",
              "name": "Get user by user name",
              "request": {
                "name": "Get user by user name",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "42c1cf04-d187-4aec-81ca-d8e1b47b32ad",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/xml"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c481a041-f308-43a1-9bfb-e2144ea3744b",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "6ae32650-4c98-4f73-9db1-5e183cef2191",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /user/:username for http method type get in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `id` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"id\")){\n            if(responseData.id!=null){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `username` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"username\")){\n          if(responseData.username!=null){\n            pm.expect(typeof _.get(responseData, \"username\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `password` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"password\")){\n          if(responseData.password!=null){\n            pm.expect(typeof _.get(responseData, \"password\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", \"\")).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `userStatus` field',function(){\n          if(pm.expect(responseData).to.have.nested.property(\"userStatus\")){\n            if(responseData.userStatus!=null){\n              pm.expect(typeof _.get(responseData, \"userStatus\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid username supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"User not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f1c2bd66-738a-4c9d-898c-c6ef1a38e5fc",
              "name": "Updated user",
              "request": {
                "name": "Updated user",
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) name that need to be deleted"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "e17f956d-aebd-407e-9fc0-23b89e01e62f",
                  "name": "Invalid user supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) name that need to be deleted"
                        }
                      ]
                    },
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "f21879ec-8b51-4063-bac5-800e5310f035",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) name that need to be deleted"
                        }
                      ]
                    },
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"{{id}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"{{userStatus}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /user/:username for http method type put in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid user supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"User not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "af53350b-5c76-4711-9e34-f0ed3cb99977",
              "name": "Delete user",
              "request": {
                "name": "Delete user",
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) The name that needs to be deleted"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "1c8879ca-985f-44bc-a4b7-51f830572bed",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "f098d033-1fb1-40f9-b5ca-e4d0793e5519",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test test-Koreai using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\n\n// Test generated for /user/:username for http method type delete in postman framework\n\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid username supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"User not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/v2",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "f3087b33-5917-4e92-939d-77c9adc7292f",
    "name": "Swagger Petstore YAML",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters\n\nContact Support:\n Email: apiteam@swagger.io",
      "type": "text/plain"
    }
  }
}