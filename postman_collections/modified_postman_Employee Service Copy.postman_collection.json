{
  "info": {
    "_postman_id": "77a7622b-6900-4170-b307-2ee9ee77daa0",
    "name": "Employee Service Copy",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "19572067"
  },
  "item": [
    {
      "name": "employees",
      "item": [
        {
          "name": "{id}",
          "item": [
            {
              "name": "Gets an employee by ID.",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/employees/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "employees",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{id}}",
                      "description": "(Required) Employee ID"
                    }
                  ]
                },
                "description": "Retrieves an employee by the associated ID\n"
              },
              "response": [
                {
                  "name": "Successful operation",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/employees/:id",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "employees",
                        ":id"
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{id}}"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"email\": \"<string>\",\n  \"jobTitle\": \"<string>\",\n  \"name\": \"<string>\",\n  \"id\": \"<uuid>\"\n}"
                },
                {
                  "name": "Not found",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/employees/:id",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "employees",
                        ":id"
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{id}}"
                        }
                      ]
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "_postman_previewlanguage": "text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//Import necessary dependencies\nconst assert = require('chai').assert;\nconst myFunc = require('../src/myFunc.js');\n\n//Existing Test Case\ndescribe('myFunc()', function () {\n  it('should return “Hello, World!” when no parameters are provided', function() {\n    assert.equal(myFunc(), 'Hello, World!');\n  });\n});\n\n//Updated Test Case\ndescribe('myFunc(text)', function () {\n  it('should return text when one parameter is provided', function() {\n    let text = 'Artillery Test';\n    assert.equal(myFunc(text), 'Artillery Test');\n  });\n\n  it('should return “Hello, Artillery!” when the parameter is \"Artillery\"', function() {\n    assert.equal(myFunc('Artillery'), 'Hello, Artillery!');\n  });\n\n  it('should return responded error message for null parameter', function() {\n    assert.throws(() => { myFunc(null); }, Error, 'Invalid input');\n  });\n});\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Searches employees.",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/employees?searchString=<string>",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "employees"
              ],
              "query": [
                {
                  "key": "searchString",
                  "value": "{{searchString}}",
                  "description": "Pass an optional search string for the look up"
                }
              ]
            },
            "description": "By passing in the appropriate options you can apply filters to your search operationId: getEmployees\n"
          },
          "response": [
            {
              "name": "Search results matching the filter criteria",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/employees?searchString=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "employees"
                  ],
                  "query": [
                    {
                      "key": "searchString",
                      "value": "{{searchString}}",
                      "description": "Pass an optional search string for the look up"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n  {\n    \"email\": \"<string>\",\n    \"jobTitle\": \"<string>\",\n    \"name\": \"<string>\",\n    \"id\": \"<uuid>\"\n  },\n  {\n    \"email\": \"<string>\",\n    \"jobTitle\": \"<string>\",\n    \"name\": \"<string>\",\n    \"id\": \"<uuid>\"\n  }\n]"
            },
            {
              "name": "Bad input",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/employees?searchString=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "employees"
                  ],
                  "query": [
                    {
                      "key": "searchString",
                      "value": "{{searchString}}",
                      "description": "Pass an optional search string for the look up"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Import necessary dependencies\nconst assert = require('chai').assert;\nconst myFunc = require('../src/myFunc.js');\n\n//Existing Test Case\ndescribe('myFunc()', function () {\n  it('should return “Hello, World!” when no parameters are provided', function() {\n    assert.equal(myFunc(), 'Hello, World!');\n  });\n});\n\n//Updated Test Case\ndescribe('myFunc(text)', function () {\n  it('should return text when one parameter is provided', function() {\n    let text = 'Artillery Test';\n    assert.equal(myFunc(text), 'Artillery Test');\n  });\n\n  it('should return “Hello, Artillery!” when the parameter is \"Artillery\"', function() {\n    assert.equal(myFunc('Artillery'), 'Hello, Artillery!');\n  });\n\n  it('should return responded error message for null parameter', function() {\n    assert.throws(() => { myFunc(null); }, Error, 'Invalid input');\n  });\n});\n"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "adds an employee",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"jobTitle\": \"{{jobTitle}}\",\n    \"name\": \"{{name}}\",\n    \"id\": \"{{id}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/employees",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "employees"
              ]
            },
            "description": "Adds an employee to the system"
          },
          "response": [
            {
              "name": "employee created",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"jobTitle\": \"{{jobTitle}}\",\n    \"name\": \"{{name}}\",\n    \"id\": \"{{id}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/employees",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "employees"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "text",
              "header": [],
              "cookie": [],
              "body": ""
            },
            {
              "name": "invalid input, object invalid",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"jobTitle\": \"{{jobTitle}}\",\n    \"name\": \"{{name}}\",\n    \"id\": \"{{id}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/employees",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "employees"
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [],
              "cookie": [],
              "body": ""
            },
            {
              "name": "an existing employee already exists",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"jobTitle\": \"{{jobTitle}}\",\n    \"name\": \"{{name}}\",\n    \"id\": \"{{id}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/employees",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "employees"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "Error: It looks like there is a data insufficiency. The existing test case, import details, and source code are missing so a test script can't be generated without enough information to base it on. Please provide all the necessary details."
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://virtserver.swaggerhub.com/061REB413/employee-service/0.1"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ]
}